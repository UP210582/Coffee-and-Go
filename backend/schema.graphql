# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type App {
  id: ID!
  action: String
  qty: Int
  baseVehicle: BaseVehicle
  yearsFrom: Int
  yearsTo: Int
  make: Make
  model: Model
  submodelId: Int
  engineBaseId: Int
  engineBlockId: Int
  positionId: Int
  mfrId: Int
  equipmentModelId: Int
  vehicleTypeId: Int
  productionStartYear: Int
  productionEndYear: Int
  partType: PartType
  partNumber: String
  brandAAIAID: String
  subbrandAAIAID: String
  assetName: String
  assetItemOrder: Int
  notes: String
}

input AppWhereUniqueInput {
  id: ID
}

input AppWhereInput {
  AND: [AppWhereInput!]
  OR: [AppWhereInput!]
  NOT: [AppWhereInput!]
  id: IDFilter
  action: StringFilter
  qty: IntNullableFilter
  baseVehicle: BaseVehicleWhereInput
  yearsFrom: IntNullableFilter
  yearsTo: IntNullableFilter
  make: MakeWhereInput
  model: ModelWhereInput
  submodelId: IntNullableFilter
  engineBaseId: IntNullableFilter
  engineBlockId: IntNullableFilter
  positionId: IntNullableFilter
  mfrId: IntNullableFilter
  equipmentModelId: IntNullableFilter
  vehicleTypeId: IntNullableFilter
  productionStartYear: IntNullableFilter
  productionEndYear: IntNullableFilter
  partType: PartTypeWhereInput
  partNumber: StringFilter
  brandAAIAID: StringFilter
  subbrandAAIAID: StringFilter
  assetName: StringFilter
  assetItemOrder: IntNullableFilter
  notes: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AppOrderByInput {
  id: OrderDirection
  action: OrderDirection
  qty: OrderDirection
  yearsFrom: OrderDirection
  yearsTo: OrderDirection
  submodelId: OrderDirection
  engineBaseId: OrderDirection
  engineBlockId: OrderDirection
  positionId: OrderDirection
  mfrId: OrderDirection
  equipmentModelId: OrderDirection
  vehicleTypeId: OrderDirection
  productionStartYear: OrderDirection
  productionEndYear: OrderDirection
  partNumber: OrderDirection
  brandAAIAID: OrderDirection
  subbrandAAIAID: OrderDirection
  assetName: OrderDirection
  assetItemOrder: OrderDirection
  notes: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AppUpdateInput {
  action: String
  qty: Int
  baseVehicle: BaseVehicleRelateToOneForUpdateInput
  yearsFrom: Int
  yearsTo: Int
  make: MakeRelateToOneForUpdateInput
  model: ModelRelateToOneForUpdateInput
  submodelId: Int
  engineBaseId: Int
  engineBlockId: Int
  positionId: Int
  mfrId: Int
  equipmentModelId: Int
  vehicleTypeId: Int
  productionStartYear: Int
  productionEndYear: Int
  partType: PartTypeRelateToOneForUpdateInput
  partNumber: String
  brandAAIAID: String
  subbrandAAIAID: String
  assetName: String
  assetItemOrder: Int
  notes: String
}

input BaseVehicleRelateToOneForUpdateInput {
  create: BaseVehicleCreateInput
  connect: BaseVehicleWhereUniqueInput
  disconnect: Boolean
}

input MakeRelateToOneForUpdateInput {
  create: MakeCreateInput
  connect: MakeWhereUniqueInput
  disconnect: Boolean
}

input ModelRelateToOneForUpdateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
  disconnect: Boolean
}

input PartTypeRelateToOneForUpdateInput {
  create: PartTypeCreateInput
  connect: PartTypeWhereUniqueInput
  disconnect: Boolean
}

input AppUpdateArgs {
  where: AppWhereUniqueInput!
  data: AppUpdateInput!
}

input AppCreateInput {
  action: String
  qty: Int
  baseVehicle: BaseVehicleRelateToOneForCreateInput
  yearsFrom: Int
  yearsTo: Int
  make: MakeRelateToOneForCreateInput
  model: ModelRelateToOneForCreateInput
  submodelId: Int
  engineBaseId: Int
  engineBlockId: Int
  positionId: Int
  mfrId: Int
  equipmentModelId: Int
  vehicleTypeId: Int
  productionStartYear: Int
  productionEndYear: Int
  partType: PartTypeRelateToOneForCreateInput
  partNumber: String
  brandAAIAID: String
  subbrandAAIAID: String
  assetName: String
  assetItemOrder: Int
  notes: String
}

input BaseVehicleRelateToOneForCreateInput {
  create: BaseVehicleCreateInput
  connect: BaseVehicleWhereUniqueInput
}

input MakeRelateToOneForCreateInput {
  create: MakeCreateInput
  connect: MakeWhereUniqueInput
}

input ModelRelateToOneForCreateInput {
  create: ModelCreateInput
  connect: ModelWhereUniqueInput
}

input PartTypeRelateToOneForCreateInput {
  create: PartTypeCreateInput
  connect: PartTypeWhereUniqueInput
}

type Asset {
  id: ID!
  yearsFrom: Int
  yearsTo: Int
  make: Make
  model: Model
  submodelId: Int
  engineBaseId: Int
  note: String
  assetName: String
}

input AssetWhereUniqueInput {
  id: ID
}

input AssetWhereInput {
  AND: [AssetWhereInput!]
  OR: [AssetWhereInput!]
  NOT: [AssetWhereInput!]
  id: IDFilter
  yearsFrom: IntNullableFilter
  yearsTo: IntNullableFilter
  make: MakeWhereInput
  model: ModelWhereInput
  submodelId: IntNullableFilter
  engineBaseId: IntNullableFilter
  note: StringFilter
  assetName: StringFilter
}

input AssetOrderByInput {
  id: OrderDirection
  yearsFrom: OrderDirection
  yearsTo: OrderDirection
  submodelId: OrderDirection
  engineBaseId: OrderDirection
  note: OrderDirection
  assetName: OrderDirection
}

input AssetUpdateInput {
  yearsFrom: Int
  yearsTo: Int
  make: MakeRelateToOneForUpdateInput
  model: ModelRelateToOneForUpdateInput
  submodelId: Int
  engineBaseId: Int
  note: String
  assetName: String
}

input AssetUpdateArgs {
  where: AssetWhereUniqueInput!
  data: AssetUpdateInput!
}

input AssetCreateInput {
  yearsFrom: Int
  yearsTo: Int
  make: MakeRelateToOneForCreateInput
  model: ModelRelateToOneForCreateInput
  submodelId: Int
  engineBaseId: Int
  note: String
  assetName: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type DigitalAsset {
  id: ID!
  assetName: String
  fileName: String
  fileType: String
  uri: String
  fileDateModified: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
}

input DigitalAssetWhereUniqueInput {
  id: ID
  assetName: String
}

input DigitalAssetWhereInput {
  AND: [DigitalAssetWhereInput!]
  OR: [DigitalAssetWhereInput!]
  NOT: [DigitalAssetWhereInput!]
  id: IDFilter
  assetName: StringFilter
  fileName: StringFilter
  fileType: StringFilter
  uri: StringFilter
  fileDateModified: DateTimeNullableFilter
  effectiveDate: DateTimeNullableFilter
  expirationDate: DateTimeNullableFilter
}

input DigitalAssetOrderByInput {
  id: OrderDirection
  assetName: OrderDirection
  fileName: OrderDirection
  fileType: OrderDirection
  uri: OrderDirection
  fileDateModified: OrderDirection
  effectiveDate: OrderDirection
  expirationDate: OrderDirection
}

input DigitalAssetUpdateInput {
  assetName: String
  fileName: String
  fileType: String
  uri: String
  fileDateModified: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
}

input DigitalAssetUpdateArgs {
  where: DigitalAssetWhereUniqueInput!
  data: DigitalAssetUpdateInput!
}

input DigitalAssetCreateInput {
  assetName: String
  fileName: String
  fileType: String
  uri: String
  fileDateModified: DateTime
  effectiveDate: DateTime
  expirationDate: DateTime
}

type PartType {
  id: ID!
  description: String
}

input PartTypeWhereUniqueInput {
  id: ID
}

input PartTypeWhereInput {
  AND: [PartTypeWhereInput!]
  OR: [PartTypeWhereInput!]
  NOT: [PartTypeWhereInput!]
  id: IDFilter
  description: StringFilter
}

input PartTypeOrderByInput {
  id: OrderDirection
  description: OrderDirection
}

input PartTypeUpdateInput {
  description: String
}

input PartTypeUpdateArgs {
  where: PartTypeWhereUniqueInput!
  data: PartTypeUpdateInput!
}

input PartTypeCreateInput {
  description: String
}

type Catalog {
  id: ID!
  type: String
  message: String
  filePath: String
  originalFilename: String
}

input CatalogWhereUniqueInput {
  id: ID
}

input CatalogWhereInput {
  AND: [CatalogWhereInput!]
  OR: [CatalogWhereInput!]
  NOT: [CatalogWhereInput!]
  id: IDFilter
  type: StringFilter
  message: StringFilter
  filePath: StringFilter
  originalFilename: StringFilter
}

input CatalogOrderByInput {
  id: OrderDirection
  type: OrderDirection
  message: OrderDirection
  filePath: OrderDirection
  originalFilename: OrderDirection
}

input CatalogUpdateInput {
  type: String
  message: String
  filePath: String
  originalFilename: String
}

input CatalogUpdateArgs {
  where: CatalogWhereUniqueInput!
  data: CatalogUpdateInput!
}

input CatalogCreateInput {
  type: String
  message: String
  filePath: String
  originalFilename: String
}

type AcesApp {
  id: ID!
  action: String
  externalId: String
  baseVehicleId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  engineBlockId: String
  engineVINId: String
  mfrId: String
  equipmentModelId: String
  vehicleTypeId: String
  equipmentBaseId: String
  positionId: String
  qty: Int
  partTypeId: String
  partNumber: String
  notes: String
  rawJSON: String
}

input AcesAppWhereUniqueInput {
  id: ID
}

input AcesAppWhereInput {
  AND: [AcesAppWhereInput!]
  OR: [AcesAppWhereInput!]
  NOT: [AcesAppWhereInput!]
  id: IDFilter
  action: StringNullableFilter
  externalId: StringNullableFilter
  baseVehicleId: StringNullableFilter
  yearsFrom: IntNullableFilter
  yearsTo: IntNullableFilter
  makeId: StringNullableFilter
  modelId: StringNullableFilter
  subModelId: StringNullableFilter
  engineBaseId: StringNullableFilter
  engineBlockId: StringNullableFilter
  engineVINId: StringNullableFilter
  mfrId: StringNullableFilter
  equipmentModelId: StringNullableFilter
  vehicleTypeId: StringNullableFilter
  equipmentBaseId: StringNullableFilter
  positionId: StringNullableFilter
  qty: IntNullableFilter
  partTypeId: StringNullableFilter
  partNumber: StringNullableFilter
  notes: StringNullableFilter
  rawJSON: StringNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input AcesAppOrderByInput {
  id: OrderDirection
  action: OrderDirection
  externalId: OrderDirection
  baseVehicleId: OrderDirection
  yearsFrom: OrderDirection
  yearsTo: OrderDirection
  makeId: OrderDirection
  modelId: OrderDirection
  subModelId: OrderDirection
  engineBaseId: OrderDirection
  engineBlockId: OrderDirection
  engineVINId: OrderDirection
  mfrId: OrderDirection
  equipmentModelId: OrderDirection
  vehicleTypeId: OrderDirection
  equipmentBaseId: OrderDirection
  positionId: OrderDirection
  qty: OrderDirection
  partTypeId: OrderDirection
  partNumber: OrderDirection
  notes: OrderDirection
  rawJSON: OrderDirection
}

input AcesAppUpdateInput {
  action: String
  externalId: String
  baseVehicleId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  engineBlockId: String
  engineVINId: String
  mfrId: String
  equipmentModelId: String
  vehicleTypeId: String
  equipmentBaseId: String
  positionId: String
  qty: Int
  partTypeId: String
  partNumber: String
  notes: String
  rawJSON: String
}

input AcesAppUpdateArgs {
  where: AcesAppWhereUniqueInput!
  data: AcesAppUpdateInput!
}

input AcesAppCreateInput {
  action: String
  externalId: String
  baseVehicleId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  engineBlockId: String
  engineVINId: String
  mfrId: String
  equipmentModelId: String
  vehicleTypeId: String
  equipmentBaseId: String
  positionId: String
  qty: Int
  partTypeId: String
  partNumber: String
  notes: String
  rawJSON: String
}

type AcesAsset {
  id: ID!
  action: String
  externalId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  assetName: String
  notes: String
  rawJSON: String
}

input AcesAssetWhereUniqueInput {
  id: ID
}

input AcesAssetWhereInput {
  AND: [AcesAssetWhereInput!]
  OR: [AcesAssetWhereInput!]
  NOT: [AcesAssetWhereInput!]
  id: IDFilter
  action: StringNullableFilter
  externalId: StringNullableFilter
  yearsFrom: IntNullableFilter
  yearsTo: IntNullableFilter
  makeId: StringNullableFilter
  modelId: StringNullableFilter
  subModelId: StringNullableFilter
  engineBaseId: StringNullableFilter
  assetName: StringNullableFilter
  notes: StringNullableFilter
  rawJSON: StringNullableFilter
}

input AcesAssetOrderByInput {
  id: OrderDirection
  action: OrderDirection
  externalId: OrderDirection
  yearsFrom: OrderDirection
  yearsTo: OrderDirection
  makeId: OrderDirection
  modelId: OrderDirection
  subModelId: OrderDirection
  engineBaseId: OrderDirection
  assetName: OrderDirection
  notes: OrderDirection
  rawJSON: OrderDirection
}

input AcesAssetUpdateInput {
  action: String
  externalId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  assetName: String
  notes: String
  rawJSON: String
}

input AcesAssetUpdateArgs {
  where: AcesAssetWhereUniqueInput!
  data: AcesAssetUpdateInput!
}

input AcesAssetCreateInput {
  action: String
  externalId: String
  yearsFrom: Int
  yearsTo: Int
  makeId: String
  modelId: String
  subModelId: String
  engineBaseId: String
  assetName: String
  notes: String
  rawJSON: String
}

type AcesDigitalFileInformation {
  id: ID!
  action: String
  languageCode: String
  assetName: String
  fileName: String
  assetDetailType: String
  fileType: String
  representation: String
  fileSize: Int
  resolution: Int
  colorMode: String
  background: String
  orientationView: String
  assetHeight: Int
  assetWidth: Int
  uom: String
  assetDescription: String
  filePath: String
  uri: String
  fileDateModified: String
  effectiveDate: String
  expirationDate: String
  country: String
  rawJSON: String
}

input AcesDigitalFileInformationWhereUniqueInput {
  id: ID
}

input AcesDigitalFileInformationWhereInput {
  AND: [AcesDigitalFileInformationWhereInput!]
  OR: [AcesDigitalFileInformationWhereInput!]
  NOT: [AcesDigitalFileInformationWhereInput!]
  id: IDFilter
  action: StringNullableFilter
  languageCode: StringNullableFilter
  assetName: StringNullableFilter
  fileName: StringNullableFilter
  assetDetailType: StringNullableFilter
  fileType: StringNullableFilter
  representation: StringNullableFilter
  fileSize: IntNullableFilter
  resolution: IntNullableFilter
  colorMode: StringNullableFilter
  background: StringNullableFilter
  orientationView: StringNullableFilter
  assetHeight: IntNullableFilter
  assetWidth: IntNullableFilter
  uom: StringNullableFilter
  assetDescription: StringNullableFilter
  filePath: StringNullableFilter
  uri: StringNullableFilter
  fileDateModified: StringNullableFilter
  effectiveDate: StringNullableFilter
  expirationDate: StringNullableFilter
  country: StringNullableFilter
  rawJSON: StringNullableFilter
}

input AcesDigitalFileInformationOrderByInput {
  id: OrderDirection
  action: OrderDirection
  languageCode: OrderDirection
  assetName: OrderDirection
  fileName: OrderDirection
  assetDetailType: OrderDirection
  fileType: OrderDirection
  representation: OrderDirection
  fileSize: OrderDirection
  resolution: OrderDirection
  colorMode: OrderDirection
  background: OrderDirection
  orientationView: OrderDirection
  assetHeight: OrderDirection
  assetWidth: OrderDirection
  uom: OrderDirection
  assetDescription: OrderDirection
  filePath: OrderDirection
  uri: OrderDirection
  fileDateModified: OrderDirection
  effectiveDate: OrderDirection
  expirationDate: OrderDirection
  country: OrderDirection
  rawJSON: OrderDirection
}

input AcesDigitalFileInformationUpdateInput {
  action: String
  languageCode: String
  assetName: String
  fileName: String
  assetDetailType: String
  fileType: String
  representation: String
  fileSize: Int
  resolution: Int
  colorMode: String
  background: String
  orientationView: String
  assetHeight: Int
  assetWidth: Int
  uom: String
  assetDescription: String
  filePath: String
  uri: String
  fileDateModified: String
  effectiveDate: String
  expirationDate: String
  country: String
  rawJSON: String
}

input AcesDigitalFileInformationUpdateArgs {
  where: AcesDigitalFileInformationWhereUniqueInput!
  data: AcesDigitalFileInformationUpdateInput!
}

input AcesDigitalFileInformationCreateInput {
  action: String
  languageCode: String
  assetName: String
  fileName: String
  assetDetailType: String
  fileType: String
  representation: String
  fileSize: Int
  resolution: Int
  colorMode: String
  background: String
  orientationView: String
  assetHeight: Int
  assetWidth: Int
  uom: String
  assetDescription: String
  filePath: String
  uri: String
  fileDateModified: String
  effectiveDate: String
  expirationDate: String
  country: String
  rawJSON: String
}

type MeasurementGroup {
  id: ID!
  measurementGroupID: Int
  measurementGroupName: String
}

input MeasurementGroupWhereUniqueInput {
  id: ID
  measurementGroupID: Int
}

input MeasurementGroupWhereInput {
  AND: [MeasurementGroupWhereInput!]
  OR: [MeasurementGroupWhereInput!]
  NOT: [MeasurementGroupWhereInput!]
  id: IDFilter
  measurementGroupID: IntFilter
  measurementGroupName: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input MeasurementGroupOrderByInput {
  id: OrderDirection
  measurementGroupID: OrderDirection
  measurementGroupName: OrderDirection
}

input MeasurementGroupUpdateInput {
  measurementGroupID: Int
  measurementGroupName: String
}

input MeasurementGroupUpdateArgs {
  where: MeasurementGroupWhereUniqueInput!
  data: MeasurementGroupUpdateInput!
}

input MeasurementGroupCreateInput {
  measurementGroupID: Int
  measurementGroupName: String
}

type MetaData {
  id: ID!
  metaID: Int
  metaName: String
  metaDescr: String
  metaFormat: String
  dataType: String
  minLength: Int
  maxLength: Int
}

input MetaDataWhereUniqueInput {
  id: ID
  metaID: Int
}

input MetaDataWhereInput {
  AND: [MetaDataWhereInput!]
  OR: [MetaDataWhereInput!]
  NOT: [MetaDataWhereInput!]
  id: IDFilter
  metaID: IntFilter
  metaName: StringFilter
  metaDescr: StringFilter
  metaFormat: StringFilter
  dataType: StringFilter
  minLength: IntNullableFilter
  maxLength: IntNullableFilter
}

input MetaDataOrderByInput {
  id: OrderDirection
  metaID: OrderDirection
  metaName: OrderDirection
  metaDescr: OrderDirection
  metaFormat: OrderDirection
  dataType: OrderDirection
  minLength: OrderDirection
  maxLength: OrderDirection
}

input MetaDataUpdateInput {
  metaID: Int
  metaName: String
  metaDescr: String
  metaFormat: String
  dataType: String
  minLength: Int
  maxLength: Int
}

input MetaDataUpdateArgs {
  where: MetaDataWhereUniqueInput!
  data: MetaDataUpdateInput!
}

input MetaDataCreateInput {
  metaID: Int
  metaName: String
  metaDescr: String
  metaFormat: String
  dataType: String
  minLength: Int
  maxLength: Int
}

type MetaUOMCodeAssignment {
  id: ID!
  metaUOMCodeAssignmentID: Int
  paptID: Int
  metaUOMID: Int
}

input MetaUOMCodeAssignmentWhereUniqueInput {
  id: ID
  metaUOMCodeAssignmentID: Int
}

input MetaUOMCodeAssignmentWhereInput {
  AND: [MetaUOMCodeAssignmentWhereInput!]
  OR: [MetaUOMCodeAssignmentWhereInput!]
  NOT: [MetaUOMCodeAssignmentWhereInput!]
  id: IDFilter
  metaUOMCodeAssignmentID: IntFilter
  paptID: IntFilter
  metaUOMID: IntFilter
}

input MetaUOMCodeAssignmentOrderByInput {
  id: OrderDirection
  metaUOMCodeAssignmentID: OrderDirection
  paptID: OrderDirection
  metaUOMID: OrderDirection
}

input MetaUOMCodeAssignmentUpdateInput {
  metaUOMCodeAssignmentID: Int
  paptID: Int
  metaUOMID: Int
}

input MetaUOMCodeAssignmentUpdateArgs {
  where: MetaUOMCodeAssignmentWhereUniqueInput!
  data: MetaUOMCodeAssignmentUpdateInput!
}

input MetaUOMCodeAssignmentCreateInput {
  metaUOMCodeAssignmentID: Int
  paptID: Int
  metaUOMID: Int
}

type MetaUOMCode {
  id: ID!
  metaUOMID: Int
  uomCode: String
  uomDescription: String
  uomLabel: String
  measurementGroupID: Int
}

input MetaUOMCodeWhereUniqueInput {
  id: ID
  metaUOMID: Int
}

input MetaUOMCodeWhereInput {
  AND: [MetaUOMCodeWhereInput!]
  OR: [MetaUOMCodeWhereInput!]
  NOT: [MetaUOMCodeWhereInput!]
  id: IDFilter
  metaUOMID: IntFilter
  uomCode: StringFilter
  uomDescription: StringFilter
  uomLabel: StringFilter
  measurementGroupID: IntFilter
}

input MetaUOMCodeOrderByInput {
  id: OrderDirection
  metaUOMID: OrderDirection
  uomCode: OrderDirection
  uomDescription: OrderDirection
  uomLabel: OrderDirection
  measurementGroupID: OrderDirection
}

input MetaUOMCodeUpdateInput {
  metaUOMID: Int
  uomCode: String
  uomDescription: String
  uomLabel: String
  measurementGroupID: Int
}

input MetaUOMCodeUpdateArgs {
  where: MetaUOMCodeWhereUniqueInput!
  data: MetaUOMCodeUpdateInput!
}

input MetaUOMCodeCreateInput {
  metaUOMID: Int
  uomCode: String
  uomDescription: String
  uomLabel: String
  measurementGroupID: Int
}

type PartAttributeAssignment {
  id: ID!
  paptID: Int
  partTerminologyID: Int
  paid: Int
  metaID: Int
}

input PartAttributeAssignmentWhereUniqueInput {
  id: ID
  paptID: Int
}

input PartAttributeAssignmentWhereInput {
  AND: [PartAttributeAssignmentWhereInput!]
  OR: [PartAttributeAssignmentWhereInput!]
  NOT: [PartAttributeAssignmentWhereInput!]
  id: IDFilter
  paptID: IntFilter
  partTerminologyID: IntFilter
  paid: IntFilter
  metaID: IntFilter
}

input PartAttributeAssignmentOrderByInput {
  id: OrderDirection
  paptID: OrderDirection
  partTerminologyID: OrderDirection
  paid: OrderDirection
  metaID: OrderDirection
}

input PartAttributeAssignmentUpdateInput {
  paptID: Int
  partTerminologyID: Int
  paid: Int
  metaID: Int
}

input PartAttributeAssignmentUpdateArgs {
  where: PartAttributeAssignmentWhereUniqueInput!
  data: PartAttributeAssignmentUpdateInput!
}

input PartAttributeAssignmentCreateInput {
  paptID: Int
  partTerminologyID: Int
  paid: Int
  metaID: Int
}

type PartAttributeStyle {
  id: ID!
  styleID: Int
  paptID: Int
}

input PartAttributeStyleWhereUniqueInput {
  id: ID
}

input PartAttributeStyleWhereInput {
  AND: [PartAttributeStyleWhereInput!]
  OR: [PartAttributeStyleWhereInput!]
  NOT: [PartAttributeStyleWhereInput!]
  id: IDFilter
  styleID: IntNullableFilter
  paptID: IntNullableFilter
}

input PartAttributeStyleOrderByInput {
  id: OrderDirection
  styleID: OrderDirection
  paptID: OrderDirection
}

input PartAttributeStyleUpdateInput {
  styleID: Int
  paptID: Int
}

input PartAttributeStyleUpdateArgs {
  where: PartAttributeStyleWhereUniqueInput!
  data: PartAttributeStyleUpdateInput!
}

input PartAttributeStyleCreateInput {
  styleID: Int
  paptID: Int
}

type PartAttribute {
  id: ID!
  paid: Int
  paName: String
  paDescr: String
}

input PartAttributeWhereUniqueInput {
  id: ID
  paid: Int
}

input PartAttributeWhereInput {
  AND: [PartAttributeWhereInput!]
  OR: [PartAttributeWhereInput!]
  NOT: [PartAttributeWhereInput!]
  id: IDFilter
  paid: IntFilter
  paName: StringFilter
  paDescr: StringFilter
}

input PartAttributeOrderByInput {
  id: OrderDirection
  paid: OrderDirection
  paName: OrderDirection
  paDescr: OrderDirection
}

input PartAttributeUpdateInput {
  paid: Int
  paName: String
  paDescr: String
}

input PartAttributeUpdateArgs {
  where: PartAttributeWhereUniqueInput!
  data: PartAttributeUpdateInput!
}

input PartAttributeCreateInput {
  paid: Int
  paName: String
  paDescr: String
}

type PartTypeStyle {
  id: ID!
  styleID: Int
  partTerminologyID: Int
}

input PartTypeStyleWhereUniqueInput {
  id: ID
}

input PartTypeStyleWhereInput {
  AND: [PartTypeStyleWhereInput!]
  OR: [PartTypeStyleWhereInput!]
  NOT: [PartTypeStyleWhereInput!]
  id: IDFilter
  styleID: IntNullableFilter
  partTerminologyID: IntNullableFilter
}

input PartTypeStyleOrderByInput {
  id: OrderDirection
  styleID: OrderDirection
  partTerminologyID: OrderDirection
}

input PartTypeStyleUpdateInput {
  styleID: Int
  partTerminologyID: Int
}

input PartTypeStyleUpdateArgs {
  where: PartTypeStyleWhereUniqueInput!
  data: PartTypeStyleUpdateInput!
}

input PartTypeStyleCreateInput {
  styleID: Int
  partTerminologyID: Int
}

type Style {
  id: ID!
  styleID: Int
  styleName: String
}

input StyleWhereUniqueInput {
  id: ID
}

input StyleWhereInput {
  AND: [StyleWhereInput!]
  OR: [StyleWhereInput!]
  NOT: [StyleWhereInput!]
  id: IDFilter
  styleID: IntNullableFilter
  styleName: StringFilter
}

input StyleOrderByInput {
  id: OrderDirection
  styleID: OrderDirection
  styleName: OrderDirection
}

input StyleUpdateInput {
  styleID: Int
  styleName: String
}

input StyleUpdateArgs {
  where: StyleWhereUniqueInput!
  data: StyleUpdateInput!
}

input StyleCreateInput {
  styleID: Int
  styleName: String
}

type ValidValueAssignment {
  id: ID!
  validValueAssignmentID: Int
  paptID: Int
  validValueID: Int
}

input ValidValueAssignmentWhereUniqueInput {
  id: ID
  validValueAssignmentID: Int
}

input ValidValueAssignmentWhereInput {
  AND: [ValidValueAssignmentWhereInput!]
  OR: [ValidValueAssignmentWhereInput!]
  NOT: [ValidValueAssignmentWhereInput!]
  id: IDFilter
  validValueAssignmentID: IntFilter
  paptID: IntFilter
  validValueID: IntFilter
}

input ValidValueAssignmentOrderByInput {
  id: OrderDirection
  validValueAssignmentID: OrderDirection
  paptID: OrderDirection
  validValueID: OrderDirection
}

input ValidValueAssignmentUpdateInput {
  validValueAssignmentID: Int
  paptID: Int
  validValueID: Int
}

input ValidValueAssignmentUpdateArgs {
  where: ValidValueAssignmentWhereUniqueInput!
  data: ValidValueAssignmentUpdateInput!
}

input ValidValueAssignmentCreateInput {
  validValueAssignmentID: Int
  paptID: Int
  validValueID: Int
}

type ValidValue {
  id: ID!
  validValueID: Int
  validValue: String
}

input ValidValueWhereUniqueInput {
  id: ID
  validValueID: Int
  validValue: String
}

input ValidValueWhereInput {
  AND: [ValidValueWhereInput!]
  OR: [ValidValueWhereInput!]
  NOT: [ValidValueWhereInput!]
  id: IDFilter
  validValueID: IntFilter
  validValue: StringFilter
}

input ValidValueOrderByInput {
  id: OrderDirection
  validValueID: OrderDirection
  validValue: OrderDirection
}

input ValidValueUpdateInput {
  validValueID: Int
  validValue: String
}

input ValidValueUpdateArgs {
  where: ValidValueWhereUniqueInput!
  data: ValidValueUpdateInput!
}

input ValidValueCreateInput {
  validValueID: Int
  validValue: String
}

type PAVersion {
  id: ID!
  pAdbVersion: String
  pAdbPublication: CalendarDay
  pCdbPublication: CalendarDay
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PAVersionWhereUniqueInput {
  id: ID
}

input PAVersionWhereInput {
  AND: [PAVersionWhereInput!]
  OR: [PAVersionWhereInput!]
  NOT: [PAVersionWhereInput!]
  id: IDFilter
  pAdbVersion: StringFilter
  pAdbPublication: CalendarDayNullableFilter
  pCdbPublication: CalendarDayNullableFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input PAVersionOrderByInput {
  id: OrderDirection
  pAdbVersion: OrderDirection
  pAdbPublication: OrderDirection
  pCdbPublication: OrderDirection
}

input PAVersionUpdateInput {
  pAdbVersion: String
  pAdbPublication: CalendarDay
  pCdbPublication: CalendarDay
}

input PAVersionUpdateArgs {
  where: PAVersionWhereUniqueInput!
  data: PAVersionUpdateInput!
}

input PAVersionCreateInput {
  pAdbVersion: String
  pAdbPublication: CalendarDay
  pCdbPublication: CalendarDay
}

type ACESCodedValue {
  id: ID!
  Element: String
  Attribute: String
  CodedValue: String
  CodeDescription: String
}

input ACESCodedValueWhereUniqueInput {
  id: ID
}

input ACESCodedValueWhereInput {
  AND: [ACESCodedValueWhereInput!]
  OR: [ACESCodedValueWhereInput!]
  NOT: [ACESCodedValueWhereInput!]
  id: IDFilter
  Element: StringFilter
  Attribute: StringFilter
  CodedValue: StringFilter
  CodeDescription: StringFilter
}

input ACESCodedValueOrderByInput {
  id: OrderDirection
  Element: OrderDirection
  Attribute: OrderDirection
  CodedValue: OrderDirection
  CodeDescription: OrderDirection
}

input ACESCodedValueUpdateInput {
  Element: String
  Attribute: String
  CodedValue: String
  CodeDescription: String
}

input ACESCodedValueUpdateArgs {
  where: ACESCodedValueWhereUniqueInput!
  data: ACESCodedValueUpdateInput!
}

input ACESCodedValueCreateInput {
  Element: String
  Attribute: String
  CodedValue: String
  CodeDescription: String
}

type Alias {
  id: ID!
  AliasID: Int
  AliasName: String
  partsToAlias(where: PartsToAliasWhereInput! = {}, orderBy: [PartsToAliasOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToAliasWhereUniqueInput): [PartsToAlias!]
  partsToAliasCount(where: PartsToAliasWhereInput! = {}): Int
}

input AliasWhereUniqueInput {
  id: ID
  AliasID: Int
}

input AliasWhereInput {
  AND: [AliasWhereInput!]
  OR: [AliasWhereInput!]
  NOT: [AliasWhereInput!]
  id: IDFilter
  AliasID: IntFilter
  AliasName: StringFilter
  partsToAlias: PartsToAliasManyRelationFilter
}

input PartsToAliasManyRelationFilter {
  every: PartsToAliasWhereInput
  some: PartsToAliasWhereInput
  none: PartsToAliasWhereInput
}

input AliasOrderByInput {
  id: OrderDirection
  AliasID: OrderDirection
  AliasName: OrderDirection
}

input AliasUpdateInput {
  AliasID: Int
  AliasName: String
  partsToAlias: PartsToAliasRelateToManyForUpdateInput
}

input PartsToAliasRelateToManyForUpdateInput {
  disconnect: [PartsToAliasWhereUniqueInput!]
  set: [PartsToAliasWhereUniqueInput!]
  create: [PartsToAliasCreateInput!]
  connect: [PartsToAliasWhereUniqueInput!]
}

input AliasUpdateArgs {
  where: AliasWhereUniqueInput!
  data: AliasUpdateInput!
}

input AliasCreateInput {
  AliasID: Int
  AliasName: String
  partsToAlias: PartsToAliasRelateToManyForCreateInput
}

input PartsToAliasRelateToManyForCreateInput {
  create: [PartsToAliasCreateInput!]
  connect: [PartsToAliasWhereUniqueInput!]
}

type Category {
  id: ID!
  CategoryID: Int
  CategoryName: String
  codeMasters(where: CodeMasterWhereInput! = {}, orderBy: [CodeMasterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CodeMasterWhereUniqueInput): [CodeMaster!]
  codeMastersCount(where: CodeMasterWhereInput! = {}): Int
}

input CategoryWhereUniqueInput {
  id: ID
  CategoryID: Int
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  CategoryID: IntFilter
  CategoryName: StringFilter
  codeMasters: CodeMasterManyRelationFilter
}

input CodeMasterManyRelationFilter {
  every: CodeMasterWhereInput
  some: CodeMasterWhereInput
  none: CodeMasterWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  CategoryID: OrderDirection
  CategoryName: OrderDirection
}

input CategoryUpdateInput {
  CategoryID: Int
  CategoryName: String
  codeMasters: CodeMasterRelateToManyForUpdateInput
}

input CodeMasterRelateToManyForUpdateInput {
  disconnect: [CodeMasterWhereUniqueInput!]
  set: [CodeMasterWhereUniqueInput!]
  create: [CodeMasterCreateInput!]
  connect: [CodeMasterWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  CategoryID: Int
  CategoryName: String
  codeMasters: CodeMasterRelateToManyForCreateInput
}

input CodeMasterRelateToManyForCreateInput {
  create: [CodeMasterCreateInput!]
  connect: [CodeMasterWhereUniqueInput!]
}

type CodeMaster {
  id: ID!
  CodeMasterID: Int
  CategoryID: Category
  SubCategoryID: Subcategory
  PositionID: Position
  RevDate: DateTime
}

input CodeMasterWhereUniqueInput {
  id: ID
  CodeMasterID: Int
}

input CodeMasterWhereInput {
  AND: [CodeMasterWhereInput!]
  OR: [CodeMasterWhereInput!]
  NOT: [CodeMasterWhereInput!]
  id: IDFilter
  CodeMasterID: IntFilter
  CategoryID: CategoryWhereInput
  SubCategoryID: SubcategoryWhereInput
  PositionID: PositionWhereInput
  RevDate: DateTimeNullableFilter
}

input CodeMasterOrderByInput {
  id: OrderDirection
  CodeMasterID: OrderDirection
  RevDate: OrderDirection
}

input CodeMasterUpdateInput {
  CodeMasterID: Int
  CategoryID: CategoryRelateToOneForUpdateInput
  SubCategoryID: SubcategoryRelateToOneForUpdateInput
  PositionID: PositionRelateToOneForUpdateInput
  RevDate: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SubcategoryRelateToOneForUpdateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
  disconnect: Boolean
}

input PositionRelateToOneForUpdateInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
  disconnect: Boolean
}

input CodeMasterUpdateArgs {
  where: CodeMasterWhereUniqueInput!
  data: CodeMasterUpdateInput!
}

input CodeMasterCreateInput {
  CodeMasterID: Int
  CategoryID: CategoryRelateToOneForCreateInput
  SubCategoryID: SubcategoryRelateToOneForCreateInput
  PositionID: PositionRelateToOneForCreateInput
  RevDate: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input SubcategoryRelateToOneForCreateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
}

input PositionRelateToOneForCreateInput {
  create: PositionCreateInput
  connect: PositionWhereUniqueInput
}

type PCChange {
  id: ID!
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: PCChangeReason
  RevDate: DateTime
  changeDetails(where: PCChangeDetailWhereInput! = {}, orderBy: [PCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeDetailWhereUniqueInput): [PCChangeDetail!]
  changeDetailsCount(where: PCChangeDetailWhereInput! = {}): Int
}

input PCChangeWhereUniqueInput {
  id: ID
  ChangeID: Int
}

input PCChangeWhereInput {
  AND: [PCChangeWhereInput!]
  OR: [PCChangeWhereInput!]
  NOT: [PCChangeWhereInput!]
  id: IDFilter
  ChangeID: IntFilter
  RequestID: IntFilter
  ChangeReasonID: PCChangeReasonWhereInput
  RevDate: DateTimeNullableFilter
  changeDetails: PCChangeDetailManyRelationFilter
}

input PCChangeDetailManyRelationFilter {
  every: PCChangeDetailWhereInput
  some: PCChangeDetailWhereInput
  none: PCChangeDetailWhereInput
}

input PCChangeOrderByInput {
  id: OrderDirection
  ChangeID: OrderDirection
  RequestID: OrderDirection
  RevDate: OrderDirection
}

input PCChangeUpdateInput {
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: PCChangeReasonRelateToOneForUpdateInput
  RevDate: DateTime
  changeDetails: PCChangeDetailRelateToManyForUpdateInput
}

input PCChangeReasonRelateToOneForUpdateInput {
  create: PCChangeReasonCreateInput
  connect: PCChangeReasonWhereUniqueInput
  disconnect: Boolean
}

input PCChangeDetailRelateToManyForUpdateInput {
  disconnect: [PCChangeDetailWhereUniqueInput!]
  set: [PCChangeDetailWhereUniqueInput!]
  create: [PCChangeDetailCreateInput!]
  connect: [PCChangeDetailWhereUniqueInput!]
}

input PCChangeUpdateArgs {
  where: PCChangeWhereUniqueInput!
  data: PCChangeUpdateInput!
}

input PCChangeCreateInput {
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: PCChangeReasonRelateToOneForCreateInput
  RevDate: DateTime
  changeDetails: PCChangeDetailRelateToManyForCreateInput
}

input PCChangeReasonRelateToOneForCreateInput {
  create: PCChangeReasonCreateInput
  connect: PCChangeReasonWhereUniqueInput
}

input PCChangeDetailRelateToManyForCreateInput {
  create: [PCChangeDetailCreateInput!]
  connect: [PCChangeDetailWhereUniqueInput!]
}

type PCChangeAttributeState {
  id: ID!
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails(where: PCChangeDetailWhereInput! = {}, orderBy: [PCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeDetailWhereUniqueInput): [PCChangeDetail!]
  changeDetailsCount(where: PCChangeDetailWhereInput! = {}): Int
}

input PCChangeAttributeStateWhereUniqueInput {
  id: ID
  ChangeAttributeStateID: Int
}

input PCChangeAttributeStateWhereInput {
  AND: [PCChangeAttributeStateWhereInput!]
  OR: [PCChangeAttributeStateWhereInput!]
  NOT: [PCChangeAttributeStateWhereInput!]
  id: IDFilter
  ChangeAttributeStateID: IntFilter
  ChangeAttributeState: StringFilter
  changeDetails: PCChangeDetailManyRelationFilter
}

input PCChangeAttributeStateOrderByInput {
  id: OrderDirection
  ChangeAttributeStateID: OrderDirection
  ChangeAttributeState: OrderDirection
}

input PCChangeAttributeStateUpdateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: PCChangeDetailRelateToManyForUpdateInput
}

input PCChangeAttributeStateUpdateArgs {
  where: PCChangeAttributeStateWhereUniqueInput!
  data: PCChangeAttributeStateUpdateInput!
}

input PCChangeAttributeStateCreateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: PCChangeDetailRelateToManyForCreateInput
}

type PCChangeDetail {
  id: ID!
  ChangeDetailID: Int
  ChangeID: PCChange
  ChangeAttributeStateID: PCChangeAttributeState
  TableNameID: PCChangeTableName
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input PCChangeDetailWhereUniqueInput {
  id: ID
  ChangeDetailID: Int
}

input PCChangeDetailWhereInput {
  AND: [PCChangeDetailWhereInput!]
  OR: [PCChangeDetailWhereInput!]
  NOT: [PCChangeDetailWhereInput!]
  id: IDFilter
  ChangeDetailID: IntFilter
  ChangeID: PCChangeWhereInput
  ChangeAttributeStateID: PCChangeAttributeStateWhereInput
  TableNameID: PCChangeTableNameWhereInput
  PrimaryKeyColumnName: StringFilter
  PrimaryKeyBefore: IntNullableFilter
  PrimaryKeyAfter: IntNullableFilter
  ColumnName: StringFilter
  ColumnValueBefore: StringFilter
  ColumnValueAfter: StringFilter
}

input PCChangeDetailOrderByInput {
  id: OrderDirection
  ChangeDetailID: OrderDirection
  PrimaryKeyColumnName: OrderDirection
  PrimaryKeyBefore: OrderDirection
  PrimaryKeyAfter: OrderDirection
  ColumnName: OrderDirection
  ColumnValueBefore: OrderDirection
  ColumnValueAfter: OrderDirection
}

input PCChangeDetailUpdateInput {
  ChangeDetailID: Int
  ChangeID: PCChangeRelateToOneForUpdateInput
  ChangeAttributeStateID: PCChangeAttributeStateRelateToOneForUpdateInput
  TableNameID: PCChangeTableNameRelateToOneForUpdateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input PCChangeRelateToOneForUpdateInput {
  create: PCChangeCreateInput
  connect: PCChangeWhereUniqueInput
  disconnect: Boolean
}

input PCChangeAttributeStateRelateToOneForUpdateInput {
  create: PCChangeAttributeStateCreateInput
  connect: PCChangeAttributeStateWhereUniqueInput
  disconnect: Boolean
}

input PCChangeTableNameRelateToOneForUpdateInput {
  create: PCChangeTableNameCreateInput
  connect: PCChangeTableNameWhereUniqueInput
  disconnect: Boolean
}

input PCChangeDetailUpdateArgs {
  where: PCChangeDetailWhereUniqueInput!
  data: PCChangeDetailUpdateInput!
}

input PCChangeDetailCreateInput {
  ChangeDetailID: Int
  ChangeID: PCChangeRelateToOneForCreateInput
  ChangeAttributeStateID: PCChangeAttributeStateRelateToOneForCreateInput
  TableNameID: PCChangeTableNameRelateToOneForCreateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input PCChangeRelateToOneForCreateInput {
  create: PCChangeCreateInput
  connect: PCChangeWhereUniqueInput
}

input PCChangeAttributeStateRelateToOneForCreateInput {
  create: PCChangeAttributeStateCreateInput
  connect: PCChangeAttributeStateWhereUniqueInput
}

input PCChangeTableNameRelateToOneForCreateInput {
  create: PCChangeTableNameCreateInput
  connect: PCChangeTableNameWhereUniqueInput
}

type PCChangeReason {
  id: ID!
  ChangeReasonID: Int
  ChangeReason: String
  pcChanges(where: PCChangeWhereInput! = {}, orderBy: [PCChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeWhereUniqueInput): [PCChange!]
  pcChangesCount(where: PCChangeWhereInput! = {}): Int
}

input PCChangeReasonWhereUniqueInput {
  id: ID
  ChangeReasonID: Int
}

input PCChangeReasonWhereInput {
  AND: [PCChangeReasonWhereInput!]
  OR: [PCChangeReasonWhereInput!]
  NOT: [PCChangeReasonWhereInput!]
  id: IDFilter
  ChangeReasonID: IntFilter
  ChangeReason: StringFilter
  pcChanges: PCChangeManyRelationFilter
}

input PCChangeManyRelationFilter {
  every: PCChangeWhereInput
  some: PCChangeWhereInput
  none: PCChangeWhereInput
}

input PCChangeReasonOrderByInput {
  id: OrderDirection
  ChangeReasonID: OrderDirection
  ChangeReason: OrderDirection
}

input PCChangeReasonUpdateInput {
  ChangeReasonID: Int
  ChangeReason: String
  pcChanges: PCChangeRelateToManyForUpdateInput
}

input PCChangeRelateToManyForUpdateInput {
  disconnect: [PCChangeWhereUniqueInput!]
  set: [PCChangeWhereUniqueInput!]
  create: [PCChangeCreateInput!]
  connect: [PCChangeWhereUniqueInput!]
}

input PCChangeReasonUpdateArgs {
  where: PCChangeReasonWhereUniqueInput!
  data: PCChangeReasonUpdateInput!
}

input PCChangeReasonCreateInput {
  ChangeReasonID: Int
  ChangeReason: String
  pcChanges: PCChangeRelateToManyForCreateInput
}

input PCChangeRelateToManyForCreateInput {
  create: [PCChangeCreateInput!]
  connect: [PCChangeWhereUniqueInput!]
}

type PCChangeTableName {
  id: ID!
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails(where: PCChangeDetailWhereInput! = {}, orderBy: [PCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeDetailWhereUniqueInput): [PCChangeDetail!]
  changeDetailsCount(where: PCChangeDetailWhereInput! = {}): Int
}

input PCChangeTableNameWhereUniqueInput {
  id: ID
  TableNameID: Int
}

input PCChangeTableNameWhereInput {
  AND: [PCChangeTableNameWhereInput!]
  OR: [PCChangeTableNameWhereInput!]
  NOT: [PCChangeTableNameWhereInput!]
  id: IDFilter
  TableNameID: IntFilter
  TableName: StringFilter
  TableDescription: StringFilter
  changeDetails: PCChangeDetailManyRelationFilter
}

input PCChangeTableNameOrderByInput {
  id: OrderDirection
  TableNameID: OrderDirection
  TableName: OrderDirection
  TableDescription: OrderDirection
}

input PCChangeTableNameUpdateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: PCChangeDetailRelateToManyForUpdateInput
}

input PCChangeTableNameUpdateArgs {
  where: PCChangeTableNameWhereUniqueInput!
  data: PCChangeTableNameUpdateInput!
}

input PCChangeTableNameCreateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: PCChangeDetailRelateToManyForCreateInput
}

type Part {
  id: ID!
  PartTerminologyID: Int
  PartTerminologyName: String
  PartsDescriptionID: PartsDescription
  RevDate: DateTime
}

input PartWhereUniqueInput {
  id: ID
  PartTerminologyID: Int
}

input PartWhereInput {
  AND: [PartWhereInput!]
  OR: [PartWhereInput!]
  NOT: [PartWhereInput!]
  id: IDFilter
  PartTerminologyID: IntFilter
  PartTerminologyName: StringFilter
  PartsDescriptionID: PartsDescriptionWhereInput
  RevDate: DateTimeNullableFilter
}

input PartOrderByInput {
  id: OrderDirection
  PartTerminologyID: OrderDirection
  PartTerminologyName: OrderDirection
  RevDate: OrderDirection
}

input PartUpdateInput {
  PartTerminologyID: Int
  PartTerminologyName: String
  PartsDescriptionID: PartsDescriptionRelateToOneForUpdateInput
  RevDate: DateTime
}

input PartsDescriptionRelateToOneForUpdateInput {
  create: PartsDescriptionCreateInput
  connect: PartsDescriptionWhereUniqueInput
  disconnect: Boolean
}

input PartUpdateArgs {
  where: PartWhereUniqueInput!
  data: PartUpdateInput!
}

input PartCreateInput {
  PartTerminologyID: Int
  PartTerminologyName: String
  PartsDescriptionID: PartsDescriptionRelateToOneForCreateInput
  RevDate: DateTime
}

input PartsDescriptionRelateToOneForCreateInput {
  create: PartsDescriptionCreateInput
  connect: PartsDescriptionWhereUniqueInput
}

type PartsDescription {
  id: ID!
  PartsDescriptionID: Int
  PartsDescription: String
  parts(where: PartWhereInput! = {}, orderBy: [PartOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartWhereUniqueInput): [Part!]
  partsCount(where: PartWhereInput! = {}): Int
}

input PartsDescriptionWhereUniqueInput {
  id: ID
  PartsDescriptionID: Int
}

input PartsDescriptionWhereInput {
  AND: [PartsDescriptionWhereInput!]
  OR: [PartsDescriptionWhereInput!]
  NOT: [PartsDescriptionWhereInput!]
  id: IDFilter
  PartsDescriptionID: IntFilter
  PartsDescription: StringFilter
  parts: PartManyRelationFilter
}

input PartManyRelationFilter {
  every: PartWhereInput
  some: PartWhereInput
  none: PartWhereInput
}

input PartsDescriptionOrderByInput {
  id: OrderDirection
  PartsDescriptionID: OrderDirection
  PartsDescription: OrderDirection
}

input PartsDescriptionUpdateInput {
  PartsDescriptionID: Int
  PartsDescription: String
  parts: PartRelateToManyForUpdateInput
}

input PartRelateToManyForUpdateInput {
  disconnect: [PartWhereUniqueInput!]
  set: [PartWhereUniqueInput!]
  create: [PartCreateInput!]
  connect: [PartWhereUniqueInput!]
}

input PartsDescriptionUpdateArgs {
  where: PartsDescriptionWhereUniqueInput!
  data: PartsDescriptionUpdateInput!
}

input PartsDescriptionCreateInput {
  PartsDescriptionID: Int
  PartsDescription: String
  parts: PartRelateToManyForCreateInput
}

input PartRelateToManyForCreateInput {
  create: [PartCreateInput!]
  connect: [PartWhereUniqueInput!]
}

type PartsRelationship {
  id: ID!
  PartTerminology: PCdbPartTerminology
}

input PartsRelationshipWhereUniqueInput {
  id: ID
}

input PartsRelationshipWhereInput {
  AND: [PartsRelationshipWhereInput!]
  OR: [PartsRelationshipWhereInput!]
  NOT: [PartsRelationshipWhereInput!]
  id: IDFilter
  PartTerminology: PCdbPartTerminologyWhereInput
}

input PartsRelationshipOrderByInput {
  id: OrderDirection
}

input PartsRelationshipUpdateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForUpdateInput
}

input PCdbPartTerminologyRelateToOneForUpdateInput {
  create: PCdbPartTerminologyCreateInput
  connect: PCdbPartTerminologyWhereUniqueInput
  disconnect: Boolean
}

input PartsRelationshipUpdateArgs {
  where: PartsRelationshipWhereUniqueInput!
  data: PartsRelationshipUpdateInput!
}

input PartsRelationshipCreateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForCreateInput
}

input PCdbPartTerminologyRelateToOneForCreateInput {
  create: PCdbPartTerminologyCreateInput
  connect: PCdbPartTerminologyWhereUniqueInput
}

type PartsToAlias {
  id: ID!
  PartTerminology: PCdbPartTerminology
  alias: Alias
}

input PartsToAliasWhereUniqueInput {
  id: ID
}

input PartsToAliasWhereInput {
  AND: [PartsToAliasWhereInput!]
  OR: [PartsToAliasWhereInput!]
  NOT: [PartsToAliasWhereInput!]
  id: IDFilter
  PartTerminology: PCdbPartTerminologyWhereInput
  alias: AliasWhereInput
}

input PartsToAliasOrderByInput {
  id: OrderDirection
}

input PartsToAliasUpdateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForUpdateInput
  alias: AliasRelateToOneForUpdateInput
}

input AliasRelateToOneForUpdateInput {
  create: AliasCreateInput
  connect: AliasWhereUniqueInput
  disconnect: Boolean
}

input PartsToAliasUpdateArgs {
  where: PartsToAliasWhereUniqueInput!
  data: PartsToAliasUpdateInput!
}

input PartsToAliasCreateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForCreateInput
  alias: AliasRelateToOneForCreateInput
}

input AliasRelateToOneForCreateInput {
  create: AliasCreateInput
  connect: AliasWhereUniqueInput
}

type PartsToUse {
  id: ID!
  PartTerminology: PCdbPartTerminology
  Use: Use
}

input PartsToUseWhereUniqueInput {
  id: ID
}

input PartsToUseWhereInput {
  AND: [PartsToUseWhereInput!]
  OR: [PartsToUseWhereInput!]
  NOT: [PartsToUseWhereInput!]
  id: IDFilter
  PartTerminology: PCdbPartTerminologyWhereInput
  Use: UseWhereInput
}

input PartsToUseOrderByInput {
  id: OrderDirection
}

input PartsToUseUpdateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForUpdateInput
  Use: UseRelateToOneForUpdateInput
}

input UseRelateToOneForUpdateInput {
  create: UseCreateInput
  connect: UseWhereUniqueInput
  disconnect: Boolean
}

input PartsToUseUpdateArgs {
  where: PartsToUseWhereUniqueInput!
  data: PartsToUseUpdateInput!
}

input PartsToUseCreateInput {
  PartTerminology: PCdbPartTerminologyRelateToOneForCreateInput
  Use: UseRelateToOneForCreateInput
}

input UseRelateToOneForCreateInput {
  create: UseCreateInput
  connect: UseWhereUniqueInput
}

type Position {
  id: ID!
  PositionID: Int
  Position: String
  codeMasters(where: CodeMasterWhereInput! = {}, orderBy: [CodeMasterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CodeMasterWhereUniqueInput): [CodeMaster!]
  codeMastersCount(where: CodeMasterWhereInput! = {}): Int
}

input PositionWhereUniqueInput {
  id: ID
  PositionID: Int
}

input PositionWhereInput {
  AND: [PositionWhereInput!]
  OR: [PositionWhereInput!]
  NOT: [PositionWhereInput!]
  id: IDFilter
  PositionID: IntFilter
  Position: StringFilter
  codeMasters: CodeMasterManyRelationFilter
}

input PositionOrderByInput {
  id: OrderDirection
  PositionID: OrderDirection
  Position: OrderDirection
}

input PositionUpdateInput {
  PositionID: Int
  Position: String
  codeMasters: CodeMasterRelateToManyForUpdateInput
}

input PositionUpdateArgs {
  where: PositionWhereUniqueInput!
  data: PositionUpdateInput!
}

input PositionCreateInput {
  PositionID: Int
  Position: String
  codeMasters: CodeMasterRelateToManyForCreateInput
}

type Subcategory {
  id: ID!
  SubCategoryID: Int
  SubCategoryName: String
  codeMasters(where: CodeMasterWhereInput! = {}, orderBy: [CodeMasterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CodeMasterWhereUniqueInput): [CodeMaster!]
  codeMastersCount(where: CodeMasterWhereInput! = {}): Int
}

input SubcategoryWhereUniqueInput {
  id: ID
  SubCategoryID: Int
}

input SubcategoryWhereInput {
  AND: [SubcategoryWhereInput!]
  OR: [SubcategoryWhereInput!]
  NOT: [SubcategoryWhereInput!]
  id: IDFilter
  SubCategoryID: IntFilter
  SubCategoryName: StringFilter
  codeMasters: CodeMasterManyRelationFilter
}

input SubcategoryOrderByInput {
  id: OrderDirection
  SubCategoryID: OrderDirection
  SubCategoryName: OrderDirection
}

input SubcategoryUpdateInput {
  SubCategoryID: Int
  SubCategoryName: String
  codeMasters: CodeMasterRelateToManyForUpdateInput
}

input SubcategoryUpdateArgs {
  where: SubcategoryWhereUniqueInput!
  data: SubcategoryUpdateInput!
}

input SubcategoryCreateInput {
  SubCategoryID: Int
  SubCategoryName: String
  codeMasters: CodeMasterRelateToManyForCreateInput
}

type Use {
  id: ID!
  UseID: Int
  UseDescription: String
  partsToUse(where: PartsToUseWhereInput! = {}, orderBy: [PartsToUseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToUseWhereUniqueInput): [PartsToUse!]
  partsToUseCount(where: PartsToUseWhereInput! = {}): Int
}

input UseWhereUniqueInput {
  id: ID
  UseID: Int
}

input UseWhereInput {
  AND: [UseWhereInput!]
  OR: [UseWhereInput!]
  NOT: [UseWhereInput!]
  id: IDFilter
  UseID: IntFilter
  UseDescription: StringFilter
  partsToUse: PartsToUseManyRelationFilter
}

input PartsToUseManyRelationFilter {
  every: PartsToUseWhereInput
  some: PartsToUseWhereInput
  none: PartsToUseWhereInput
}

input UseOrderByInput {
  id: OrderDirection
  UseID: OrderDirection
  UseDescription: OrderDirection
}

input UseUpdateInput {
  UseID: Int
  UseDescription: String
  partsToUse: PartsToUseRelateToManyForUpdateInput
}

input PartsToUseRelateToManyForUpdateInput {
  disconnect: [PartsToUseWhereUniqueInput!]
  set: [PartsToUseWhereUniqueInput!]
  create: [PartsToUseCreateInput!]
  connect: [PartsToUseWhereUniqueInput!]
}

input UseUpdateArgs {
  where: UseWhereUniqueInput!
  data: UseUpdateInput!
}

input UseCreateInput {
  UseID: Int
  UseDescription: String
  partsToUse: PartsToUseRelateToManyForCreateInput
}

input PartsToUseRelateToManyForCreateInput {
  create: [PartsToUseCreateInput!]
  connect: [PartsToUseWhereUniqueInput!]
}

type PIESCode {
  id: ID!
  PIESCodeId: Int
  CodeValue: String
  CodeFormat: String
  FieldFormat: String
  CodeDescription: String
  Source: String
  piesReferenceFieldCodes(where: PIESReferenceFieldCodeWhereInput! = {}, orderBy: [PIESReferenceFieldCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESReferenceFieldCodeWhereUniqueInput): [PIESReferenceFieldCode!]
  piesReferenceFieldCodesCount(where: PIESReferenceFieldCodeWhereInput! = {}): Int
}

input PIESCodeWhereUniqueInput {
  id: ID
  PIESCodeId: Int
}

input PIESCodeWhereInput {
  AND: [PIESCodeWhereInput!]
  OR: [PIESCodeWhereInput!]
  NOT: [PIESCodeWhereInput!]
  id: IDFilter
  PIESCodeId: IntFilter
  CodeValue: StringFilter
  CodeFormat: StringFilter
  FieldFormat: StringFilter
  CodeDescription: StringFilter
  Source: StringFilter
  piesReferenceFieldCodes: PIESReferenceFieldCodeManyRelationFilter
}

input PIESReferenceFieldCodeManyRelationFilter {
  every: PIESReferenceFieldCodeWhereInput
  some: PIESReferenceFieldCodeWhereInput
  none: PIESReferenceFieldCodeWhereInput
}

input PIESCodeOrderByInput {
  id: OrderDirection
  PIESCodeId: OrderDirection
  CodeValue: OrderDirection
  CodeFormat: OrderDirection
  FieldFormat: OrderDirection
  CodeDescription: OrderDirection
  Source: OrderDirection
}

input PIESCodeUpdateInput {
  PIESCodeId: Int
  CodeValue: String
  CodeFormat: String
  FieldFormat: String
  CodeDescription: String
  Source: String
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForUpdateInput
}

input PIESReferenceFieldCodeRelateToManyForUpdateInput {
  disconnect: [PIESReferenceFieldCodeWhereUniqueInput!]
  set: [PIESReferenceFieldCodeWhereUniqueInput!]
  create: [PIESReferenceFieldCodeCreateInput!]
  connect: [PIESReferenceFieldCodeWhereUniqueInput!]
}

input PIESCodeUpdateArgs {
  where: PIESCodeWhereUniqueInput!
  data: PIESCodeUpdateInput!
}

input PIESCodeCreateInput {
  PIESCodeId: Int
  CodeValue: String
  CodeFormat: String
  FieldFormat: String
  CodeDescription: String
  Source: String
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForCreateInput
}

input PIESReferenceFieldCodeRelateToManyForCreateInput {
  create: [PIESReferenceFieldCodeCreateInput!]
  connect: [PIESReferenceFieldCodeWhereUniqueInput!]
}

type PIESExpiCode {
  id: ID!
  PIESExpiCodeId: Int
  ExpiCode: String
  ExpiCodeDescription: String
  PIESExpiGroupId: PIESExpiGroup
  piesReferenceFieldCodes(where: PIESReferenceFieldCodeWhereInput! = {}, orderBy: [PIESReferenceFieldCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESReferenceFieldCodeWhereUniqueInput): [PIESReferenceFieldCode!]
  piesReferenceFieldCodesCount(where: PIESReferenceFieldCodeWhereInput! = {}): Int
}

input PIESExpiCodeWhereUniqueInput {
  id: ID
  PIESExpiCodeId: Int
}

input PIESExpiCodeWhereInput {
  AND: [PIESExpiCodeWhereInput!]
  OR: [PIESExpiCodeWhereInput!]
  NOT: [PIESExpiCodeWhereInput!]
  id: IDFilter
  PIESExpiCodeId: IntFilter
  ExpiCode: StringFilter
  ExpiCodeDescription: StringFilter
  PIESExpiGroupId: PIESExpiGroupWhereInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeManyRelationFilter
}

input PIESExpiCodeOrderByInput {
  id: OrderDirection
  PIESExpiCodeId: OrderDirection
  ExpiCode: OrderDirection
  ExpiCodeDescription: OrderDirection
}

input PIESExpiCodeUpdateInput {
  PIESExpiCodeId: Int
  ExpiCode: String
  ExpiCodeDescription: String
  PIESExpiGroupId: PIESExpiGroupRelateToOneForUpdateInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForUpdateInput
}

input PIESExpiGroupRelateToOneForUpdateInput {
  create: PIESExpiGroupCreateInput
  connect: PIESExpiGroupWhereUniqueInput
  disconnect: Boolean
}

input PIESExpiCodeUpdateArgs {
  where: PIESExpiCodeWhereUniqueInput!
  data: PIESExpiCodeUpdateInput!
}

input PIESExpiCodeCreateInput {
  PIESExpiCodeId: Int
  ExpiCode: String
  ExpiCodeDescription: String
  PIESExpiGroupId: PIESExpiGroupRelateToOneForCreateInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForCreateInput
}

input PIESExpiGroupRelateToOneForCreateInput {
  create: PIESExpiGroupCreateInput
  connect: PIESExpiGroupWhereUniqueInput
}

type PIESExpiGroup {
  id: ID!
  PIESExpiGroupId: Int
  ExpiGroupCode: String
  ExpiGroupDescription: String
  expiCodes(where: PIESExpiCodeWhereInput! = {}, orderBy: [PIESExpiCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESExpiCodeWhereUniqueInput): [PIESExpiCode!]
  expiCodesCount(where: PIESExpiCodeWhereInput! = {}): Int
}

input PIESExpiGroupWhereUniqueInput {
  id: ID
  PIESExpiGroupId: Int
}

input PIESExpiGroupWhereInput {
  AND: [PIESExpiGroupWhereInput!]
  OR: [PIESExpiGroupWhereInput!]
  NOT: [PIESExpiGroupWhereInput!]
  id: IDFilter
  PIESExpiGroupId: IntFilter
  ExpiGroupCode: StringFilter
  ExpiGroupDescription: StringFilter
  expiCodes: PIESExpiCodeManyRelationFilter
}

input PIESExpiCodeManyRelationFilter {
  every: PIESExpiCodeWhereInput
  some: PIESExpiCodeWhereInput
  none: PIESExpiCodeWhereInput
}

input PIESExpiGroupOrderByInput {
  id: OrderDirection
  PIESExpiGroupId: OrderDirection
  ExpiGroupCode: OrderDirection
  ExpiGroupDescription: OrderDirection
}

input PIESExpiGroupUpdateInput {
  PIESExpiGroupId: Int
  ExpiGroupCode: String
  ExpiGroupDescription: String
  expiCodes: PIESExpiCodeRelateToManyForUpdateInput
}

input PIESExpiCodeRelateToManyForUpdateInput {
  disconnect: [PIESExpiCodeWhereUniqueInput!]
  set: [PIESExpiCodeWhereUniqueInput!]
  create: [PIESExpiCodeCreateInput!]
  connect: [PIESExpiCodeWhereUniqueInput!]
}

input PIESExpiGroupUpdateArgs {
  where: PIESExpiGroupWhereUniqueInput!
  data: PIESExpiGroupUpdateInput!
}

input PIESExpiGroupCreateInput {
  PIESExpiGroupId: Int
  ExpiGroupCode: String
  ExpiGroupDescription: String
  expiCodes: PIESExpiCodeRelateToManyForCreateInput
}

input PIESExpiCodeRelateToManyForCreateInput {
  create: [PIESExpiCodeCreateInput!]
  connect: [PIESExpiCodeWhereUniqueInput!]
}

type PIESField {
  id: ID!
  PIESFieldId: Int
  FieldName: String
  ReferenceFieldNumber: String
  PIESSegmentId: PIESSegment
  piesReferenceFieldCodes(where: PIESReferenceFieldCodeWhereInput! = {}, orderBy: [PIESReferenceFieldCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESReferenceFieldCodeWhereUniqueInput): [PIESReferenceFieldCode!]
  piesReferenceFieldCodesCount(where: PIESReferenceFieldCodeWhereInput! = {}): Int
}

input PIESFieldWhereUniqueInput {
  id: ID
  PIESFieldId: Int
}

input PIESFieldWhereInput {
  AND: [PIESFieldWhereInput!]
  OR: [PIESFieldWhereInput!]
  NOT: [PIESFieldWhereInput!]
  id: IDFilter
  PIESFieldId: IntFilter
  FieldName: StringFilter
  ReferenceFieldNumber: StringFilter
  PIESSegmentId: PIESSegmentWhereInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeManyRelationFilter
}

input PIESFieldOrderByInput {
  id: OrderDirection
  PIESFieldId: OrderDirection
  FieldName: OrderDirection
  ReferenceFieldNumber: OrderDirection
}

input PIESFieldUpdateInput {
  PIESFieldId: Int
  FieldName: String
  ReferenceFieldNumber: String
  PIESSegmentId: PIESSegmentRelateToOneForUpdateInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForUpdateInput
}

input PIESSegmentRelateToOneForUpdateInput {
  create: PIESSegmentCreateInput
  connect: PIESSegmentWhereUniqueInput
  disconnect: Boolean
}

input PIESFieldUpdateArgs {
  where: PIESFieldWhereUniqueInput!
  data: PIESFieldUpdateInput!
}

input PIESFieldCreateInput {
  PIESFieldId: Int
  FieldName: String
  ReferenceFieldNumber: String
  PIESSegmentId: PIESSegmentRelateToOneForCreateInput
  piesReferenceFieldCodes: PIESReferenceFieldCodeRelateToManyForCreateInput
}

input PIESSegmentRelateToOneForCreateInput {
  create: PIESSegmentCreateInput
  connect: PIESSegmentWhereUniqueInput
}

type PIESReferenceFieldCode {
  id: ID!
  PIESReferenceFieldCodeId: Int
  PIESFieldId: PIESField
  PIESCodeId: PIESCode
  PIESExpiCodeId: PIESExpiCode
  ReferenceNotes: String
}

input PIESReferenceFieldCodeWhereUniqueInput {
  id: ID
  PIESReferenceFieldCodeId: Int
}

input PIESReferenceFieldCodeWhereInput {
  AND: [PIESReferenceFieldCodeWhereInput!]
  OR: [PIESReferenceFieldCodeWhereInput!]
  NOT: [PIESReferenceFieldCodeWhereInput!]
  id: IDFilter
  PIESReferenceFieldCodeId: IntFilter
  PIESFieldId: PIESFieldWhereInput
  PIESCodeId: PIESCodeWhereInput
  PIESExpiCodeId: PIESExpiCodeWhereInput
  ReferenceNotes: StringFilter
}

input PIESReferenceFieldCodeOrderByInput {
  id: OrderDirection
  PIESReferenceFieldCodeId: OrderDirection
  ReferenceNotes: OrderDirection
}

input PIESReferenceFieldCodeUpdateInput {
  PIESReferenceFieldCodeId: Int
  PIESFieldId: PIESFieldRelateToOneForUpdateInput
  PIESCodeId: PIESCodeRelateToOneForUpdateInput
  PIESExpiCodeId: PIESExpiCodeRelateToOneForUpdateInput
  ReferenceNotes: String
}

input PIESFieldRelateToOneForUpdateInput {
  create: PIESFieldCreateInput
  connect: PIESFieldWhereUniqueInput
  disconnect: Boolean
}

input PIESCodeRelateToOneForUpdateInput {
  create: PIESCodeCreateInput
  connect: PIESCodeWhereUniqueInput
  disconnect: Boolean
}

input PIESExpiCodeRelateToOneForUpdateInput {
  create: PIESExpiCodeCreateInput
  connect: PIESExpiCodeWhereUniqueInput
  disconnect: Boolean
}

input PIESReferenceFieldCodeUpdateArgs {
  where: PIESReferenceFieldCodeWhereUniqueInput!
  data: PIESReferenceFieldCodeUpdateInput!
}

input PIESReferenceFieldCodeCreateInput {
  PIESReferenceFieldCodeId: Int
  PIESFieldId: PIESFieldRelateToOneForCreateInput
  PIESCodeId: PIESCodeRelateToOneForCreateInput
  PIESExpiCodeId: PIESExpiCodeRelateToOneForCreateInput
  ReferenceNotes: String
}

input PIESFieldRelateToOneForCreateInput {
  create: PIESFieldCreateInput
  connect: PIESFieldWhereUniqueInput
}

input PIESCodeRelateToOneForCreateInput {
  create: PIESCodeCreateInput
  connect: PIESCodeWhereUniqueInput
}

input PIESExpiCodeRelateToOneForCreateInput {
  create: PIESExpiCodeCreateInput
  connect: PIESExpiCodeWhereUniqueInput
}

type PIESSegment {
  id: ID!
  PIESSegmentId: Int
  SegmentAbb: String
  SegmentName: String
  SegmentDescription: String
  piesFields(where: PIESFieldWhereInput! = {}, orderBy: [PIESFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESFieldWhereUniqueInput): [PIESField!]
  piesFieldsCount(where: PIESFieldWhereInput! = {}): Int
}

input PIESSegmentWhereUniqueInput {
  id: ID
  PIESSegmentId: Int
}

input PIESSegmentWhereInput {
  AND: [PIESSegmentWhereInput!]
  OR: [PIESSegmentWhereInput!]
  NOT: [PIESSegmentWhereInput!]
  id: IDFilter
  PIESSegmentId: IntFilter
  SegmentAbb: StringFilter
  SegmentName: StringFilter
  SegmentDescription: StringFilter
  piesFields: PIESFieldManyRelationFilter
}

input PIESFieldManyRelationFilter {
  every: PIESFieldWhereInput
  some: PIESFieldWhereInput
  none: PIESFieldWhereInput
}

input PIESSegmentOrderByInput {
  id: OrderDirection
  PIESSegmentId: OrderDirection
  SegmentAbb: OrderDirection
  SegmentName: OrderDirection
  SegmentDescription: OrderDirection
}

input PIESSegmentUpdateInput {
  PIESSegmentId: Int
  SegmentAbb: String
  SegmentName: String
  SegmentDescription: String
  piesFields: PIESFieldRelateToManyForUpdateInput
}

input PIESFieldRelateToManyForUpdateInput {
  disconnect: [PIESFieldWhereUniqueInput!]
  set: [PIESFieldWhereUniqueInput!]
  create: [PIESFieldCreateInput!]
  connect: [PIESFieldWhereUniqueInput!]
}

input PIESSegmentUpdateArgs {
  where: PIESSegmentWhereUniqueInput!
  data: PIESSegmentUpdateInput!
}

input PIESSegmentCreateInput {
  PIESSegmentId: Int
  SegmentAbb: String
  SegmentName: String
  SegmentDescription: String
  piesFields: PIESFieldRelateToManyForCreateInput
}

input PIESFieldRelateToManyForCreateInput {
  create: [PIESFieldCreateInput!]
  connect: [PIESFieldWhereUniqueInput!]
}

type PCVersion {
  id: ID!
  VersionDate: DateTime
}

input PCVersionWhereUniqueInput {
  id: ID
}

input PCVersionWhereInput {
  AND: [PCVersionWhereInput!]
  OR: [PCVersionWhereInput!]
  NOT: [PCVersionWhereInput!]
  id: IDFilter
  VersionDate: DateTimeNullableFilter
}

input PCVersionOrderByInput {
  id: OrderDirection
  VersionDate: OrderDirection
}

input PCVersionUpdateInput {
  VersionDate: DateTime
}

input PCVersionUpdateArgs {
  where: PCVersionWhereUniqueInput!
  data: PCVersionUpdateInput!
}

input PCVersionCreateInput {
  VersionDate: DateTime
}

type PartsSupersession {
  id: ID!
  OldPartTerminologyID: Int
  OldPartTerminologyName: String
  NewPartTerminologyID: Int
  NewPartTerminologyName: String
  RevDate: DateTime
}

input PartsSupersessionWhereUniqueInput {
  id: ID
  OldPartTerminologyID: Int
  NewPartTerminologyID: Int
}

input PartsSupersessionWhereInput {
  AND: [PartsSupersessionWhereInput!]
  OR: [PartsSupersessionWhereInput!]
  NOT: [PartsSupersessionWhereInput!]
  id: IDFilter
  OldPartTerminologyID: IntFilter
  OldPartTerminologyName: StringFilter
  NewPartTerminologyID: IntFilter
  NewPartTerminologyName: StringFilter
  RevDate: DateTimeNullableFilter
}

input PartsSupersessionOrderByInput {
  id: OrderDirection
  OldPartTerminologyID: OrderDirection
  OldPartTerminologyName: OrderDirection
  NewPartTerminologyID: OrderDirection
  NewPartTerminologyName: OrderDirection
  RevDate: OrderDirection
}

input PartsSupersessionUpdateInput {
  OldPartTerminologyID: Int
  OldPartTerminologyName: String
  NewPartTerminologyID: Int
  NewPartTerminologyName: String
  RevDate: DateTime
}

input PartsSupersessionUpdateArgs {
  where: PartsSupersessionWhereUniqueInput!
  data: PartsSupersessionUpdateInput!
}

input PartsSupersessionCreateInput {
  OldPartTerminologyID: Int
  OldPartTerminologyName: String
  NewPartTerminologyID: Int
  NewPartTerminologyName: String
  RevDate: DateTime
}

type QChangeAttributeState {
  id: ID!
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails(where: QChangeDetailWhereInput! = {}, orderBy: [QChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeDetailWhereUniqueInput): [QChangeDetail!]
  changeDetailsCount(where: QChangeDetailWhereInput! = {}): Int
}

input QChangeAttributeStateWhereUniqueInput {
  id: ID
  ChangeAttributeStateID: Int
}

input QChangeAttributeStateWhereInput {
  AND: [QChangeAttributeStateWhereInput!]
  OR: [QChangeAttributeStateWhereInput!]
  NOT: [QChangeAttributeStateWhereInput!]
  id: IDFilter
  ChangeAttributeStateID: IntFilter
  ChangeAttributeState: StringFilter
  changeDetails: QChangeDetailManyRelationFilter
}

input QChangeDetailManyRelationFilter {
  every: QChangeDetailWhereInput
  some: QChangeDetailWhereInput
  none: QChangeDetailWhereInput
}

input QChangeAttributeStateOrderByInput {
  id: OrderDirection
  ChangeAttributeStateID: OrderDirection
  ChangeAttributeState: OrderDirection
}

input QChangeAttributeStateUpdateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: QChangeDetailRelateToManyForUpdateInput
}

input QChangeDetailRelateToManyForUpdateInput {
  disconnect: [QChangeDetailWhereUniqueInput!]
  set: [QChangeDetailWhereUniqueInput!]
  create: [QChangeDetailCreateInput!]
  connect: [QChangeDetailWhereUniqueInput!]
}

input QChangeAttributeStateUpdateArgs {
  where: QChangeAttributeStateWhereUniqueInput!
  data: QChangeAttributeStateUpdateInput!
}

input QChangeAttributeStateCreateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: QChangeDetailRelateToManyForCreateInput
}

input QChangeDetailRelateToManyForCreateInput {
  create: [QChangeDetailCreateInput!]
  connect: [QChangeDetailWhereUniqueInput!]
}

type QChangeDetail {
  id: ID!
  ChangeDetailID: Int
  ChangeID: QChange
  ChangeAttributeStateID: QChangeAttributeState
  TableNameID: QChangeTableName
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input QChangeDetailWhereUniqueInput {
  id: ID
  ChangeDetailID: Int
}

input QChangeDetailWhereInput {
  AND: [QChangeDetailWhereInput!]
  OR: [QChangeDetailWhereInput!]
  NOT: [QChangeDetailWhereInput!]
  id: IDFilter
  ChangeDetailID: IntFilter
  ChangeID: QChangeWhereInput
  ChangeAttributeStateID: QChangeAttributeStateWhereInput
  TableNameID: QChangeTableNameWhereInput
  PrimaryKeyColumnName: StringFilter
  PrimaryKeyBefore: IntNullableFilter
  PrimaryKeyAfter: IntNullableFilter
  ColumnName: StringFilter
  ColumnValueBefore: StringFilter
  ColumnValueAfter: StringFilter
}

input QChangeDetailOrderByInput {
  id: OrderDirection
  ChangeDetailID: OrderDirection
  PrimaryKeyColumnName: OrderDirection
  PrimaryKeyBefore: OrderDirection
  PrimaryKeyAfter: OrderDirection
  ColumnName: OrderDirection
  ColumnValueBefore: OrderDirection
  ColumnValueAfter: OrderDirection
}

input QChangeDetailUpdateInput {
  ChangeDetailID: Int
  ChangeID: QChangeRelateToOneForUpdateInput
  ChangeAttributeStateID: QChangeAttributeStateRelateToOneForUpdateInput
  TableNameID: QChangeTableNameRelateToOneForUpdateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input QChangeRelateToOneForUpdateInput {
  create: QChangeCreateInput
  connect: QChangeWhereUniqueInput
  disconnect: Boolean
}

input QChangeAttributeStateRelateToOneForUpdateInput {
  create: QChangeAttributeStateCreateInput
  connect: QChangeAttributeStateWhereUniqueInput
  disconnect: Boolean
}

input QChangeTableNameRelateToOneForUpdateInput {
  create: QChangeTableNameCreateInput
  connect: QChangeTableNameWhereUniqueInput
  disconnect: Boolean
}

input QChangeDetailUpdateArgs {
  where: QChangeDetailWhereUniqueInput!
  data: QChangeDetailUpdateInput!
}

input QChangeDetailCreateInput {
  ChangeDetailID: Int
  ChangeID: QChangeRelateToOneForCreateInput
  ChangeAttributeStateID: QChangeAttributeStateRelateToOneForCreateInput
  TableNameID: QChangeTableNameRelateToOneForCreateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input QChangeRelateToOneForCreateInput {
  create: QChangeCreateInput
  connect: QChangeWhereUniqueInput
}

input QChangeAttributeStateRelateToOneForCreateInput {
  create: QChangeAttributeStateCreateInput
  connect: QChangeAttributeStateWhereUniqueInput
}

input QChangeTableNameRelateToOneForCreateInput {
  create: QChangeTableNameCreateInput
  connect: QChangeTableNameWhereUniqueInput
}

type QChangeReason {
  id: ID!
  ChangeReasonID: Int
  ChangeReason: String
}

input QChangeReasonWhereUniqueInput {
  id: ID
  ChangeReasonID: Int
}

input QChangeReasonWhereInput {
  AND: [QChangeReasonWhereInput!]
  OR: [QChangeReasonWhereInput!]
  NOT: [QChangeReasonWhereInput!]
  id: IDFilter
  ChangeReasonID: IntFilter
  ChangeReason: StringFilter
}

input QChangeReasonOrderByInput {
  id: OrderDirection
  ChangeReasonID: OrderDirection
  ChangeReason: OrderDirection
}

input QChangeReasonUpdateInput {
  ChangeReasonID: Int
  ChangeReason: String
}

input QChangeReasonUpdateArgs {
  where: QChangeReasonWhereUniqueInput!
  data: QChangeReasonUpdateInput!
}

input QChangeReasonCreateInput {
  ChangeReasonID: Int
  ChangeReason: String
}

type QChange {
  id: ID!
  ChangeID: Int
  effectiveDate: DateTime
  reason: String
  changeDetails(where: QChangeDetailWhereInput! = {}, orderBy: [QChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeDetailWhereUniqueInput): [QChangeDetail!]
  changeDetailsCount(where: QChangeDetailWhereInput! = {}): Int
}

input QChangeWhereUniqueInput {
  id: ID
  ChangeID: Int
}

input QChangeWhereInput {
  AND: [QChangeWhereInput!]
  OR: [QChangeWhereInput!]
  NOT: [QChangeWhereInput!]
  id: IDFilter
  ChangeID: IntFilter
  effectiveDate: DateTimeNullableFilter
  reason: StringFilter
  changeDetails: QChangeDetailManyRelationFilter
}

input QChangeOrderByInput {
  id: OrderDirection
  ChangeID: OrderDirection
  effectiveDate: OrderDirection
  reason: OrderDirection
}

input QChangeUpdateInput {
  ChangeID: Int
  effectiveDate: DateTime
  reason: String
  changeDetails: QChangeDetailRelateToManyForUpdateInput
}

input QChangeUpdateArgs {
  where: QChangeWhereUniqueInput!
  data: QChangeUpdateInput!
}

input QChangeCreateInput {
  ChangeID: Int
  effectiveDate: DateTime
  reason: String
  changeDetails: QChangeDetailRelateToManyForCreateInput
}

type QChangeTableName {
  id: ID!
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails(where: QChangeDetailWhereInput! = {}, orderBy: [QChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeDetailWhereUniqueInput): [QChangeDetail!]
  changeDetailsCount(where: QChangeDetailWhereInput! = {}): Int
}

input QChangeTableNameWhereUniqueInput {
  id: ID
  TableNameID: Int
}

input QChangeTableNameWhereInput {
  AND: [QChangeTableNameWhereInput!]
  OR: [QChangeTableNameWhereInput!]
  NOT: [QChangeTableNameWhereInput!]
  id: IDFilter
  TableNameID: IntFilter
  TableName: StringFilter
  TableDescription: StringFilter
  changeDetails: QChangeDetailManyRelationFilter
}

input QChangeTableNameOrderByInput {
  id: OrderDirection
  TableNameID: OrderDirection
  TableName: OrderDirection
  TableDescription: OrderDirection
}

input QChangeTableNameUpdateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: QChangeDetailRelateToManyForUpdateInput
}

input QChangeTableNameUpdateArgs {
  where: QChangeTableNameWhereUniqueInput!
  data: QChangeTableNameUpdateInput!
}

input QChangeTableNameCreateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: QChangeDetailRelateToManyForCreateInput
}

type GroupNumber {
  id: ID!
  GroupNumberID: Int
  GroupDescription: String
  qualifierGroups(where: QualifierGroupWhereInput! = {}, orderBy: [QualifierGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierGroupWhereUniqueInput): [QualifierGroup!]
  qualifierGroupsCount(where: QualifierGroupWhereInput! = {}): Int
}

input GroupNumberWhereUniqueInput {
  id: ID
  GroupNumberID: Int
}

input GroupNumberWhereInput {
  AND: [GroupNumberWhereInput!]
  OR: [GroupNumberWhereInput!]
  NOT: [GroupNumberWhereInput!]
  id: IDFilter
  GroupNumberID: IntFilter
  GroupDescription: StringFilter
  qualifierGroups: QualifierGroupManyRelationFilter
}

input QualifierGroupManyRelationFilter {
  every: QualifierGroupWhereInput
  some: QualifierGroupWhereInput
  none: QualifierGroupWhereInput
}

input GroupNumberOrderByInput {
  id: OrderDirection
  GroupNumberID: OrderDirection
  GroupDescription: OrderDirection
}

input GroupNumberUpdateInput {
  GroupNumberID: Int
  GroupDescription: String
  qualifierGroups: QualifierGroupRelateToManyForUpdateInput
}

input QualifierGroupRelateToManyForUpdateInput {
  disconnect: [QualifierGroupWhereUniqueInput!]
  set: [QualifierGroupWhereUniqueInput!]
  create: [QualifierGroupCreateInput!]
  connect: [QualifierGroupWhereUniqueInput!]
}

input GroupNumberUpdateArgs {
  where: GroupNumberWhereUniqueInput!
  data: GroupNumberUpdateInput!
}

input GroupNumberCreateInput {
  GroupNumberID: Int
  GroupDescription: String
  qualifierGroups: QualifierGroupRelateToManyForCreateInput
}

input QualifierGroupRelateToManyForCreateInput {
  create: [QualifierGroupCreateInput!]
  connect: [QualifierGroupWhereUniqueInput!]
}

type QLanguage {
  id: ID!
  LanguageID: Int
  LanguageName: String
  DialectName: String
  qualifierTranslations(where: QualifierTranslationWhereInput! = {}, orderBy: [QualifierTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierTranslationWhereUniqueInput): [QualifierTranslation!]
  qualifierTranslationsCount(where: QualifierTranslationWhereInput! = {}): Int
}

input QLanguageWhereUniqueInput {
  id: ID
}

input QLanguageWhereInput {
  AND: [QLanguageWhereInput!]
  OR: [QLanguageWhereInput!]
  NOT: [QLanguageWhereInput!]
  id: IDFilter
  LanguageID: IntNullableFilter
  LanguageName: StringFilter
  DialectName: StringFilter
  qualifierTranslations: QualifierTranslationManyRelationFilter
}

input QualifierTranslationManyRelationFilter {
  every: QualifierTranslationWhereInput
  some: QualifierTranslationWhereInput
  none: QualifierTranslationWhereInput
}

input QLanguageOrderByInput {
  id: OrderDirection
  LanguageID: OrderDirection
  LanguageName: OrderDirection
  DialectName: OrderDirection
}

input QLanguageUpdateInput {
  LanguageID: Int
  LanguageName: String
  DialectName: String
  qualifierTranslations: QualifierTranslationRelateToManyForUpdateInput
}

input QualifierTranslationRelateToManyForUpdateInput {
  disconnect: [QualifierTranslationWhereUniqueInput!]
  set: [QualifierTranslationWhereUniqueInput!]
  create: [QualifierTranslationCreateInput!]
  connect: [QualifierTranslationWhereUniqueInput!]
}

input QLanguageUpdateArgs {
  where: QLanguageWhereUniqueInput!
  data: QLanguageUpdateInput!
}

input QLanguageCreateInput {
  LanguageID: Int
  LanguageName: String
  DialectName: String
  qualifierTranslations: QualifierTranslationRelateToManyForCreateInput
}

input QualifierTranslationRelateToManyForCreateInput {
  create: [QualifierTranslationCreateInput!]
  connect: [QualifierTranslationWhereUniqueInput!]
}

type QdbChange {
  id: ID!
  VersionDate: DateTime
  QualifierID: Int
  QualifierText: String
  Action: String
}

input QdbChangeWhereUniqueInput {
  id: ID
}

input QdbChangeWhereInput {
  AND: [QdbChangeWhereInput!]
  OR: [QdbChangeWhereInput!]
  NOT: [QdbChangeWhereInput!]
  id: IDFilter
  VersionDate: DateTimeNullableFilter
  QualifierID: IntNullableFilter
  QualifierText: StringFilter
  Action: StringNullableFilter
}

input QdbChangeOrderByInput {
  id: OrderDirection
  VersionDate: OrderDirection
  QualifierID: OrderDirection
  QualifierText: OrderDirection
  Action: OrderDirection
}

input QdbChangeUpdateInput {
  VersionDate: DateTime
  QualifierID: Int
  QualifierText: String
  Action: String
}

input QdbChangeUpdateArgs {
  where: QdbChangeWhereUniqueInput!
  data: QdbChangeUpdateInput!
}

input QdbChangeCreateInput {
  VersionDate: DateTime
  QualifierID: Int
  QualifierText: String
  Action: String
}

type QQualifier {
  id: ID!
  QualifierID: Int
  QualifierText: String
  ExampleText: String
  QualifierTypeID: QualifierType
  NewQualifierID: Int
  WhenModified: DateTime
  qualifierGroups(where: QualifierGroupWhereInput! = {}, orderBy: [QualifierGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierGroupWhereUniqueInput): [QualifierGroup!]
  qualifierGroupsCount(where: QualifierGroupWhereInput! = {}): Int
  qualifierTranslations(where: QualifierTranslationWhereInput! = {}, orderBy: [QualifierTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierTranslationWhereUniqueInput): [QualifierTranslation!]
  qualifierTranslationsCount(where: QualifierTranslationWhereInput! = {}): Int
}

input QQualifierWhereUniqueInput {
  id: ID
  QualifierID: Int
}

input QQualifierWhereInput {
  AND: [QQualifierWhereInput!]
  OR: [QQualifierWhereInput!]
  NOT: [QQualifierWhereInput!]
  id: IDFilter
  QualifierID: IntFilter
  QualifierText: StringFilter
  ExampleText: StringFilter
  QualifierTypeID: QualifierTypeWhereInput
  NewQualifierID: IntNullableFilter
  WhenModified: DateTimeFilter
  qualifierGroups: QualifierGroupManyRelationFilter
  qualifierTranslations: QualifierTranslationManyRelationFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input QQualifierOrderByInput {
  id: OrderDirection
  QualifierID: OrderDirection
  QualifierText: OrderDirection
  ExampleText: OrderDirection
  NewQualifierID: OrderDirection
  WhenModified: OrderDirection
}

input QQualifierUpdateInput {
  QualifierID: Int
  QualifierText: String
  ExampleText: String
  QualifierTypeID: QualifierTypeRelateToOneForUpdateInput
  NewQualifierID: Int
  WhenModified: DateTime
  qualifierGroups: QualifierGroupRelateToManyForUpdateInput
  qualifierTranslations: QualifierTranslationRelateToManyForUpdateInput
}

input QualifierTypeRelateToOneForUpdateInput {
  create: QualifierTypeCreateInput
  connect: QualifierTypeWhereUniqueInput
  disconnect: Boolean
}

input QQualifierUpdateArgs {
  where: QQualifierWhereUniqueInput!
  data: QQualifierUpdateInput!
}

input QQualifierCreateInput {
  QualifierID: Int
  QualifierText: String
  ExampleText: String
  QualifierTypeID: QualifierTypeRelateToOneForCreateInput
  NewQualifierID: Int
  WhenModified: DateTime
  qualifierGroups: QualifierGroupRelateToManyForCreateInput
  qualifierTranslations: QualifierTranslationRelateToManyForCreateInput
}

input QualifierTypeRelateToOneForCreateInput {
  create: QualifierTypeCreateInput
  connect: QualifierTypeWhereUniqueInput
}

type QualifierGroup {
  id: ID!
  QualifierGroupID: Int
  GroupNumberID: GroupNumber
  QualifierID: QQualifier
}

input QualifierGroupWhereUniqueInput {
  id: ID
  QualifierGroupID: Int
}

input QualifierGroupWhereInput {
  AND: [QualifierGroupWhereInput!]
  OR: [QualifierGroupWhereInput!]
  NOT: [QualifierGroupWhereInput!]
  id: IDFilter
  QualifierGroupID: IntFilter
  GroupNumberID: GroupNumberWhereInput
  QualifierID: QQualifierWhereInput
}

input QualifierGroupOrderByInput {
  id: OrderDirection
  QualifierGroupID: OrderDirection
}

input QualifierGroupUpdateInput {
  QualifierGroupID: Int
  GroupNumberID: GroupNumberRelateToOneForUpdateInput
  QualifierID: QQualifierRelateToOneForUpdateInput
}

input GroupNumberRelateToOneForUpdateInput {
  create: GroupNumberCreateInput
  connect: GroupNumberWhereUniqueInput
  disconnect: Boolean
}

input QQualifierRelateToOneForUpdateInput {
  create: QQualifierCreateInput
  connect: QQualifierWhereUniqueInput
  disconnect: Boolean
}

input QualifierGroupUpdateArgs {
  where: QualifierGroupWhereUniqueInput!
  data: QualifierGroupUpdateInput!
}

input QualifierGroupCreateInput {
  QualifierGroupID: Int
  GroupNumberID: GroupNumberRelateToOneForCreateInput
  QualifierID: QQualifierRelateToOneForCreateInput
}

input GroupNumberRelateToOneForCreateInput {
  create: GroupNumberCreateInput
  connect: GroupNumberWhereUniqueInput
}

input QQualifierRelateToOneForCreateInput {
  create: QQualifierCreateInput
  connect: QQualifierWhereUniqueInput
}

type QualifierTranslation {
  id: ID!
  QualifierTranslationID: Int
  QualifierID: QQualifier
  LanguageID: QLanguage
  TranslationText: String
}

input QualifierTranslationWhereUniqueInput {
  id: ID
  QualifierTranslationID: Int
}

input QualifierTranslationWhereInput {
  AND: [QualifierTranslationWhereInput!]
  OR: [QualifierTranslationWhereInput!]
  NOT: [QualifierTranslationWhereInput!]
  id: IDFilter
  QualifierTranslationID: IntFilter
  QualifierID: QQualifierWhereInput
  LanguageID: QLanguageWhereInput
  TranslationText: StringFilter
}

input QualifierTranslationOrderByInput {
  id: OrderDirection
  QualifierTranslationID: OrderDirection
  TranslationText: OrderDirection
}

input QualifierTranslationUpdateInput {
  QualifierTranslationID: Int
  QualifierID: QQualifierRelateToOneForUpdateInput
  LanguageID: QLanguageRelateToOneForUpdateInput
  TranslationText: String
}

input QLanguageRelateToOneForUpdateInput {
  create: QLanguageCreateInput
  connect: QLanguageWhereUniqueInput
  disconnect: Boolean
}

input QualifierTranslationUpdateArgs {
  where: QualifierTranslationWhereUniqueInput!
  data: QualifierTranslationUpdateInput!
}

input QualifierTranslationCreateInput {
  QualifierTranslationID: Int
  QualifierID: QQualifierRelateToOneForCreateInput
  LanguageID: QLanguageRelateToOneForCreateInput
  TranslationText: String
}

input QLanguageRelateToOneForCreateInput {
  create: QLanguageCreateInput
  connect: QLanguageWhereUniqueInput
}

type QualifierType {
  id: ID!
  QualifierTypeID: Int
  QualifierType: String
  qualifiers(where: QQualifierWhereInput! = {}, orderBy: [QQualifierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QQualifierWhereUniqueInput): [QQualifier!]
  qualifiersCount(where: QQualifierWhereInput! = {}): Int
}

input QualifierTypeWhereUniqueInput {
  id: ID
  QualifierTypeID: Int
}

input QualifierTypeWhereInput {
  AND: [QualifierTypeWhereInput!]
  OR: [QualifierTypeWhereInput!]
  NOT: [QualifierTypeWhereInput!]
  id: IDFilter
  QualifierTypeID: IntFilter
  QualifierType: StringFilter
  qualifiers: QQualifierManyRelationFilter
}

input QQualifierManyRelationFilter {
  every: QQualifierWhereInput
  some: QQualifierWhereInput
  none: QQualifierWhereInput
}

input QualifierTypeOrderByInput {
  id: OrderDirection
  QualifierTypeID: OrderDirection
  QualifierType: OrderDirection
}

input QualifierTypeUpdateInput {
  QualifierTypeID: Int
  QualifierType: String
  qualifiers: QQualifierRelateToManyForUpdateInput
}

input QQualifierRelateToManyForUpdateInput {
  disconnect: [QQualifierWhereUniqueInput!]
  set: [QQualifierWhereUniqueInput!]
  create: [QQualifierCreateInput!]
  connect: [QQualifierWhereUniqueInput!]
}

input QualifierTypeUpdateArgs {
  where: QualifierTypeWhereUniqueInput!
  data: QualifierTypeUpdateInput!
}

input QualifierTypeCreateInput {
  QualifierTypeID: Int
  QualifierType: String
  qualifiers: QQualifierRelateToManyForCreateInput
}

input QQualifierRelateToManyForCreateInput {
  create: [QQualifierCreateInput!]
  connect: [QQualifierWhereUniqueInput!]
}

type QVersion {
  id: ID!
  VersionDate: DateTime
}

input QVersionWhereUniqueInput {
  id: ID
}

input QVersionWhereInput {
  AND: [QVersionWhereInput!]
  OR: [QVersionWhereInput!]
  NOT: [QVersionWhereInput!]
  id: IDFilter
  VersionDate: DateTimeFilter
}

input QVersionOrderByInput {
  id: OrderDirection
  VersionDate: OrderDirection
}

input QVersionUpdateInput {
  VersionDate: DateTime
}

input QVersionUpdateArgs {
  where: QVersionWhereUniqueInput!
  data: QVersionUpdateInput!
}

input QVersionCreateInput {
  VersionDate: DateTime
}

type Abbreviation {
  id: ID!
  Abbreviation: String
  Description: String
  LongDescription: String
}

input AbbreviationWhereUniqueInput {
  id: ID
  Abbreviation: String
}

input AbbreviationWhereInput {
  AND: [AbbreviationWhereInput!]
  OR: [AbbreviationWhereInput!]
  NOT: [AbbreviationWhereInput!]
  id: IDFilter
  Abbreviation: StringFilter
  Description: StringFilter
  LongDescription: StringFilter
}

input AbbreviationOrderByInput {
  id: OrderDirection
  Abbreviation: OrderDirection
  Description: OrderDirection
  LongDescription: OrderDirection
}

input AbbreviationUpdateInput {
  Abbreviation: String
  Description: String
  LongDescription: String
}

input AbbreviationUpdateArgs {
  where: AbbreviationWhereUniqueInput!
  data: AbbreviationUpdateInput!
}

input AbbreviationCreateInput {
  Abbreviation: String
  Description: String
  LongDescription: String
}

type Aspiration {
  id: ID!
  AspirationID: Int
  AspirationName: String
}

input AspirationWhereUniqueInput {
  id: ID
  AspirationID: Int
}

input AspirationWhereInput {
  AND: [AspirationWhereInput!]
  OR: [AspirationWhereInput!]
  NOT: [AspirationWhereInput!]
  id: IDFilter
  AspirationID: IntFilter
  AspirationName: StringFilter
}

input AspirationOrderByInput {
  id: OrderDirection
  AspirationID: OrderDirection
  AspirationName: OrderDirection
}

input AspirationUpdateInput {
  AspirationID: Int
  AspirationName: String
}

input AspirationUpdateArgs {
  where: AspirationWhereUniqueInput!
  data: AspirationUpdateInput!
}

input AspirationCreateInput {
  AspirationID: Int
  AspirationName: String
}

type AttachmentType {
  id: ID!
  AttachmentTypeID: Int
  AttachmentTypeName: String
}

input AttachmentTypeWhereUniqueInput {
  id: ID
  AttachmentTypeID: Int
}

input AttachmentTypeWhereInput {
  AND: [AttachmentTypeWhereInput!]
  OR: [AttachmentTypeWhereInput!]
  NOT: [AttachmentTypeWhereInput!]
  id: IDFilter
  AttachmentTypeID: IntFilter
  AttachmentTypeName: StringFilter
}

input AttachmentTypeOrderByInput {
  id: OrderDirection
  AttachmentTypeID: OrderDirection
  AttachmentTypeName: OrderDirection
}

input AttachmentTypeUpdateInput {
  AttachmentTypeID: Int
  AttachmentTypeName: String
}

input AttachmentTypeUpdateArgs {
  where: AttachmentTypeWhereUniqueInput!
  data: AttachmentTypeUpdateInput!
}

input AttachmentTypeCreateInput {
  AttachmentTypeID: Int
  AttachmentTypeName: String
}

type BaseVehicle {
  id: ID!
  BaseVehicleID: Int
  YearID: Year
  MakeID: Make
  ModelID: Model
}

input BaseVehicleWhereUniqueInput {
  id: ID
  BaseVehicleID: Int
}

input BaseVehicleWhereInput {
  AND: [BaseVehicleWhereInput!]
  OR: [BaseVehicleWhereInput!]
  NOT: [BaseVehicleWhereInput!]
  id: IDFilter
  BaseVehicleID: IntFilter
  YearID: YearWhereInput
  MakeID: MakeWhereInput
  ModelID: ModelWhereInput
}

input BaseVehicleOrderByInput {
  id: OrderDirection
  BaseVehicleID: OrderDirection
}

input BaseVehicleUpdateInput {
  BaseVehicleID: Int
  YearID: YearRelateToOneForUpdateInput
  MakeID: MakeRelateToOneForUpdateInput
  ModelID: ModelRelateToOneForUpdateInput
}

input YearRelateToOneForUpdateInput {
  create: YearCreateInput
  connect: YearWhereUniqueInput
  disconnect: Boolean
}

input BaseVehicleUpdateArgs {
  where: BaseVehicleWhereUniqueInput!
  data: BaseVehicleUpdateInput!
}

input BaseVehicleCreateInput {
  BaseVehicleID: Int
  YearID: YearRelateToOneForCreateInput
  MakeID: MakeRelateToOneForCreateInput
  ModelID: ModelRelateToOneForCreateInput
}

input YearRelateToOneForCreateInput {
  create: YearCreateInput
  connect: YearWhereUniqueInput
}

type BedConfig {
  id: ID!
  BedConfigID: Int
  BedLengthID: BedLength
  BedTypeID: BedType
}

input BedConfigWhereUniqueInput {
  id: ID
  BedConfigID: Int
}

input BedConfigWhereInput {
  AND: [BedConfigWhereInput!]
  OR: [BedConfigWhereInput!]
  NOT: [BedConfigWhereInput!]
  id: IDFilter
  BedConfigID: IntFilter
  BedLengthID: BedLengthWhereInput
  BedTypeID: BedTypeWhereInput
}

input BedConfigOrderByInput {
  id: OrderDirection
  BedConfigID: OrderDirection
}

input BedConfigUpdateInput {
  BedConfigID: Int
  BedLengthID: BedLengthRelateToOneForUpdateInput
  BedTypeID: BedTypeRelateToOneForUpdateInput
}

input BedLengthRelateToOneForUpdateInput {
  create: BedLengthCreateInput
  connect: BedLengthWhereUniqueInput
  disconnect: Boolean
}

input BedTypeRelateToOneForUpdateInput {
  create: BedTypeCreateInput
  connect: BedTypeWhereUniqueInput
  disconnect: Boolean
}

input BedConfigUpdateArgs {
  where: BedConfigWhereUniqueInput!
  data: BedConfigUpdateInput!
}

input BedConfigCreateInput {
  BedConfigID: Int
  BedLengthID: BedLengthRelateToOneForCreateInput
  BedTypeID: BedTypeRelateToOneForCreateInput
}

input BedLengthRelateToOneForCreateInput {
  create: BedLengthCreateInput
  connect: BedLengthWhereUniqueInput
}

input BedTypeRelateToOneForCreateInput {
  create: BedTypeCreateInput
  connect: BedTypeWhereUniqueInput
}

type BodyType {
  id: ID!
  BodyTypeID: Int
  BodyTypeName: String
  bodyStyleConfigs(where: BodyStyleConfigWhereInput! = {}, orderBy: [BodyStyleConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BodyStyleConfigWhereUniqueInput): [BodyStyleConfig!]
  bodyStyleConfigsCount(where: BodyStyleConfigWhereInput! = {}): Int
}

input BodyTypeWhereUniqueInput {
  id: ID
  BodyTypeID: Int
}

input BodyTypeWhereInput {
  AND: [BodyTypeWhereInput!]
  OR: [BodyTypeWhereInput!]
  NOT: [BodyTypeWhereInput!]
  id: IDFilter
  BodyTypeID: IntFilter
  BodyTypeName: StringFilter
  bodyStyleConfigs: BodyStyleConfigManyRelationFilter
}

input BodyStyleConfigManyRelationFilter {
  every: BodyStyleConfigWhereInput
  some: BodyStyleConfigWhereInput
  none: BodyStyleConfigWhereInput
}

input BodyTypeOrderByInput {
  id: OrderDirection
  BodyTypeID: OrderDirection
  BodyTypeName: OrderDirection
}

input BodyTypeUpdateInput {
  BodyTypeID: Int
  BodyTypeName: String
  bodyStyleConfigs: BodyStyleConfigRelateToManyForUpdateInput
}

input BodyStyleConfigRelateToManyForUpdateInput {
  disconnect: [BodyStyleConfigWhereUniqueInput!]
  set: [BodyStyleConfigWhereUniqueInput!]
  create: [BodyStyleConfigCreateInput!]
  connect: [BodyStyleConfigWhereUniqueInput!]
}

input BodyTypeUpdateArgs {
  where: BodyTypeWhereUniqueInput!
  data: BodyTypeUpdateInput!
}

input BodyTypeCreateInput {
  BodyTypeID: Int
  BodyTypeName: String
  bodyStyleConfigs: BodyStyleConfigRelateToManyForCreateInput
}

input BodyStyleConfigRelateToManyForCreateInput {
  create: [BodyStyleConfigCreateInput!]
  connect: [BodyStyleConfigWhereUniqueInput!]
}

type BodyNumDoors {
  id: ID!
  BodyNumDoorsID: Int
  NumDoors: String
  bodyStyleConfigs(where: BodyStyleConfigWhereInput! = {}, orderBy: [BodyStyleConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BodyStyleConfigWhereUniqueInput): [BodyStyleConfig!]
  bodyStyleConfigsCount(where: BodyStyleConfigWhereInput! = {}): Int
}

input BodyNumDoorsWhereUniqueInput {
  id: ID
  BodyNumDoorsID: Int
}

input BodyNumDoorsWhereInput {
  AND: [BodyNumDoorsWhereInput!]
  OR: [BodyNumDoorsWhereInput!]
  NOT: [BodyNumDoorsWhereInput!]
  id: IDFilter
  BodyNumDoorsID: IntFilter
  NumDoors: StringFilter
  bodyStyleConfigs: BodyStyleConfigManyRelationFilter
}

input BodyNumDoorsOrderByInput {
  id: OrderDirection
  BodyNumDoorsID: OrderDirection
  NumDoors: OrderDirection
}

input BodyNumDoorsUpdateInput {
  BodyNumDoorsID: Int
  NumDoors: String
  bodyStyleConfigs: BodyStyleConfigRelateToManyForUpdateInput
}

input BodyNumDoorsUpdateArgs {
  where: BodyNumDoorsWhereUniqueInput!
  data: BodyNumDoorsUpdateInput!
}

input BodyNumDoorsCreateInput {
  BodyNumDoorsID: Int
  NumDoors: String
  bodyStyleConfigs: BodyStyleConfigRelateToManyForCreateInput
}

type BodyStyleConfig {
  id: ID!
  BodyStyleConfigID: Int
  BodyNumDoorsID: BodyNumDoors
  BodyTypeID: BodyType
}

input BodyStyleConfigWhereUniqueInput {
  id: ID
  BodyStyleConfigID: Int
}

input BodyStyleConfigWhereInput {
  AND: [BodyStyleConfigWhereInput!]
  OR: [BodyStyleConfigWhereInput!]
  NOT: [BodyStyleConfigWhereInput!]
  id: IDFilter
  BodyStyleConfigID: IntFilter
  BodyNumDoorsID: BodyNumDoorsWhereInput
  BodyTypeID: BodyTypeWhereInput
}

input BodyStyleConfigOrderByInput {
  id: OrderDirection
  BodyStyleConfigID: OrderDirection
}

input BodyStyleConfigUpdateInput {
  BodyStyleConfigID: Int
  BodyNumDoorsID: BodyNumDoorsRelateToOneForUpdateInput
  BodyTypeID: BodyTypeRelateToOneForUpdateInput
}

input BodyNumDoorsRelateToOneForUpdateInput {
  create: BodyNumDoorsCreateInput
  connect: BodyNumDoorsWhereUniqueInput
  disconnect: Boolean
}

input BodyTypeRelateToOneForUpdateInput {
  create: BodyTypeCreateInput
  connect: BodyTypeWhereUniqueInput
  disconnect: Boolean
}

input BodyStyleConfigUpdateArgs {
  where: BodyStyleConfigWhereUniqueInput!
  data: BodyStyleConfigUpdateInput!
}

input BodyStyleConfigCreateInput {
  BodyStyleConfigID: Int
  BodyNumDoorsID: BodyNumDoorsRelateToOneForCreateInput
  BodyTypeID: BodyTypeRelateToOneForCreateInput
}

input BodyNumDoorsRelateToOneForCreateInput {
  create: BodyNumDoorsCreateInput
  connect: BodyNumDoorsWhereUniqueInput
}

input BodyTypeRelateToOneForCreateInput {
  create: BodyTypeCreateInput
  connect: BodyTypeWhereUniqueInput
}

type BrakeABS {
  id: ID!
  BrakeABSID: Int
  BrakeABSName: String
}

input BrakeABSWhereUniqueInput {
  id: ID
  BrakeABSID: Int
}

input BrakeABSWhereInput {
  AND: [BrakeABSWhereInput!]
  OR: [BrakeABSWhereInput!]
  NOT: [BrakeABSWhereInput!]
  id: IDFilter
  BrakeABSID: IntFilter
  BrakeABSName: StringFilter
}

input BrakeABSOrderByInput {
  id: OrderDirection
  BrakeABSID: OrderDirection
  BrakeABSName: OrderDirection
}

input BrakeABSUpdateInput {
  BrakeABSID: Int
  BrakeABSName: String
}

input BrakeABSUpdateArgs {
  where: BrakeABSWhereUniqueInput!
  data: BrakeABSUpdateInput!
}

input BrakeABSCreateInput {
  BrakeABSID: Int
  BrakeABSName: String
}

type BrakeConfig {
  id: ID!
  BrakeConfigID: Int
  FrontBrakeTypeID: BrakeType
  RearBrakeTypeID: BrakeType
  BrakeABSID: BrakeABS
  BrakeSystemID: BrakeSystem
}

input BrakeConfigWhereUniqueInput {
  id: ID
  BrakeConfigID: Int
}

input BrakeConfigWhereInput {
  AND: [BrakeConfigWhereInput!]
  OR: [BrakeConfigWhereInput!]
  NOT: [BrakeConfigWhereInput!]
  id: IDFilter
  BrakeConfigID: IntFilter
  FrontBrakeTypeID: BrakeTypeWhereInput
  RearBrakeTypeID: BrakeTypeWhereInput
  BrakeABSID: BrakeABSWhereInput
  BrakeSystemID: BrakeSystemWhereInput
}

input BrakeConfigOrderByInput {
  id: OrderDirection
  BrakeConfigID: OrderDirection
}

input BrakeConfigUpdateInput {
  BrakeConfigID: Int
  FrontBrakeTypeID: BrakeTypeRelateToOneForUpdateInput
  RearBrakeTypeID: BrakeTypeRelateToOneForUpdateInput
  BrakeABSID: BrakeABSRelateToOneForUpdateInput
  BrakeSystemID: BrakeSystemRelateToOneForUpdateInput
}

input BrakeTypeRelateToOneForUpdateInput {
  create: BrakeTypeCreateInput
  connect: BrakeTypeWhereUniqueInput
  disconnect: Boolean
}

input BrakeABSRelateToOneForUpdateInput {
  create: BrakeABSCreateInput
  connect: BrakeABSWhereUniqueInput
  disconnect: Boolean
}

input BrakeSystemRelateToOneForUpdateInput {
  create: BrakeSystemCreateInput
  connect: BrakeSystemWhereUniqueInput
  disconnect: Boolean
}

input BrakeConfigUpdateArgs {
  where: BrakeConfigWhereUniqueInput!
  data: BrakeConfigUpdateInput!
}

input BrakeConfigCreateInput {
  BrakeConfigID: Int
  FrontBrakeTypeID: BrakeTypeRelateToOneForCreateInput
  RearBrakeTypeID: BrakeTypeRelateToOneForCreateInput
  BrakeABSID: BrakeABSRelateToOneForCreateInput
  BrakeSystemID: BrakeSystemRelateToOneForCreateInput
}

input BrakeTypeRelateToOneForCreateInput {
  create: BrakeTypeCreateInput
  connect: BrakeTypeWhereUniqueInput
}

input BrakeABSRelateToOneForCreateInput {
  create: BrakeABSCreateInput
  connect: BrakeABSWhereUniqueInput
}

input BrakeSystemRelateToOneForCreateInput {
  create: BrakeSystemCreateInput
  connect: BrakeSystemWhereUniqueInput
}

type BrakeSystem {
  id: ID!
  BrakeSystemID: Int
  BrakeSystemName: String
}

input BrakeSystemWhereUniqueInput {
  id: ID
  BrakeSystemID: Int
}

input BrakeSystemWhereInput {
  AND: [BrakeSystemWhereInput!]
  OR: [BrakeSystemWhereInput!]
  NOT: [BrakeSystemWhereInput!]
  id: IDFilter
  BrakeSystemID: IntFilter
  BrakeSystemName: StringFilter
}

input BrakeSystemOrderByInput {
  id: OrderDirection
  BrakeSystemID: OrderDirection
  BrakeSystemName: OrderDirection
}

input BrakeSystemUpdateInput {
  BrakeSystemID: Int
  BrakeSystemName: String
}

input BrakeSystemUpdateArgs {
  where: BrakeSystemWhereUniqueInput!
  data: BrakeSystemUpdateInput!
}

input BrakeSystemCreateInput {
  BrakeSystemID: Int
  BrakeSystemName: String
}

type BrakeType {
  id: ID!
  BrakeTypeID: Int
  BrakeTypeName: String
}

input BrakeTypeWhereUniqueInput {
  id: ID
  BrakeTypeID: Int
}

input BrakeTypeWhereInput {
  AND: [BrakeTypeWhereInput!]
  OR: [BrakeTypeWhereInput!]
  NOT: [BrakeTypeWhereInput!]
  id: IDFilter
  BrakeTypeID: IntFilter
  BrakeTypeName: StringFilter
}

input BrakeTypeOrderByInput {
  id: OrderDirection
  BrakeTypeID: OrderDirection
  BrakeTypeName: OrderDirection
}

input BrakeTypeUpdateInput {
  BrakeTypeID: Int
  BrakeTypeName: String
}

input BrakeTypeUpdateArgs {
  where: BrakeTypeWhereUniqueInput!
  data: BrakeTypeUpdateInput!
}

input BrakeTypeCreateInput {
  BrakeTypeID: Int
  BrakeTypeName: String
}

type ChangeAttributeState {
  id: ID!
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails(where: VCChangeDetailWhereInput! = {}, orderBy: [VCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeDetailWhereUniqueInput): [VCChangeDetail!]
  changeDetailsCount(where: VCChangeDetailWhereInput! = {}): Int
}

input ChangeAttributeStateWhereUniqueInput {
  id: ID
  ChangeAttributeStateID: Int
}

input ChangeAttributeStateWhereInput {
  AND: [ChangeAttributeStateWhereInput!]
  OR: [ChangeAttributeStateWhereInput!]
  NOT: [ChangeAttributeStateWhereInput!]
  id: IDFilter
  ChangeAttributeStateID: IntFilter
  ChangeAttributeState: StringFilter
  changeDetails: VCChangeDetailManyRelationFilter
}

input VCChangeDetailManyRelationFilter {
  every: VCChangeDetailWhereInput
  some: VCChangeDetailWhereInput
  none: VCChangeDetailWhereInput
}

input ChangeAttributeStateOrderByInput {
  id: OrderDirection
  ChangeAttributeStateID: OrderDirection
  ChangeAttributeState: OrderDirection
}

input ChangeAttributeStateUpdateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: VCChangeDetailRelateToManyForUpdateInput
}

input VCChangeDetailRelateToManyForUpdateInput {
  disconnect: [VCChangeDetailWhereUniqueInput!]
  set: [VCChangeDetailWhereUniqueInput!]
  create: [VCChangeDetailCreateInput!]
  connect: [VCChangeDetailWhereUniqueInput!]
}

input ChangeAttributeStateUpdateArgs {
  where: ChangeAttributeStateWhereUniqueInput!
  data: ChangeAttributeStateUpdateInput!
}

input ChangeAttributeStateCreateInput {
  ChangeAttributeStateID: Int
  ChangeAttributeState: String
  changeDetails: VCChangeDetailRelateToManyForCreateInput
}

input VCChangeDetailRelateToManyForCreateInput {
  create: [VCChangeDetailCreateInput!]
  connect: [VCChangeDetailWhereUniqueInput!]
}

type VCChangeDetail {
  id: ID!
  ChangeDetailID: Int
  ChangeID: VCChange
  ChangeAttributeStateID: ChangeAttributeState
  TableNameID: VCChangeTableName
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input VCChangeDetailWhereUniqueInput {
  id: ID
  ChangeDetailID: Int
}

input VCChangeDetailWhereInput {
  AND: [VCChangeDetailWhereInput!]
  OR: [VCChangeDetailWhereInput!]
  NOT: [VCChangeDetailWhereInput!]
  id: IDFilter
  ChangeDetailID: IntFilter
  ChangeID: VCChangeWhereInput
  ChangeAttributeStateID: ChangeAttributeStateWhereInput
  TableNameID: VCChangeTableNameWhereInput
  PrimaryKeyColumnName: StringFilter
  PrimaryKeyBefore: IntNullableFilter
  PrimaryKeyAfter: IntNullableFilter
  ColumnName: StringFilter
  ColumnValueBefore: StringFilter
  ColumnValueAfter: StringFilter
}

input VCChangeDetailOrderByInput {
  id: OrderDirection
  ChangeDetailID: OrderDirection
  PrimaryKeyColumnName: OrderDirection
  PrimaryKeyBefore: OrderDirection
  PrimaryKeyAfter: OrderDirection
  ColumnName: OrderDirection
  ColumnValueBefore: OrderDirection
  ColumnValueAfter: OrderDirection
}

input VCChangeDetailUpdateInput {
  ChangeDetailID: Int
  ChangeID: VCChangeRelateToOneForUpdateInput
  ChangeAttributeStateID: ChangeAttributeStateRelateToOneForUpdateInput
  TableNameID: VCChangeTableNameRelateToOneForUpdateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input VCChangeRelateToOneForUpdateInput {
  create: VCChangeCreateInput
  connect: VCChangeWhereUniqueInput
  disconnect: Boolean
}

input ChangeAttributeStateRelateToOneForUpdateInput {
  create: ChangeAttributeStateCreateInput
  connect: ChangeAttributeStateWhereUniqueInput
  disconnect: Boolean
}

input VCChangeTableNameRelateToOneForUpdateInput {
  create: VCChangeTableNameCreateInput
  connect: VCChangeTableNameWhereUniqueInput
  disconnect: Boolean
}

input VCChangeDetailUpdateArgs {
  where: VCChangeDetailWhereUniqueInput!
  data: VCChangeDetailUpdateInput!
}

input VCChangeDetailCreateInput {
  ChangeDetailID: Int
  ChangeID: VCChangeRelateToOneForCreateInput
  ChangeAttributeStateID: ChangeAttributeStateRelateToOneForCreateInput
  TableNameID: VCChangeTableNameRelateToOneForCreateInput
  PrimaryKeyColumnName: String
  PrimaryKeyBefore: Int
  PrimaryKeyAfter: Int
  ColumnName: String
  ColumnValueBefore: String
  ColumnValueAfter: String
}

input VCChangeRelateToOneForCreateInput {
  create: VCChangeCreateInput
  connect: VCChangeWhereUniqueInput
}

input ChangeAttributeStateRelateToOneForCreateInput {
  create: ChangeAttributeStateCreateInput
  connect: ChangeAttributeStateWhereUniqueInput
}

input VCChangeTableNameRelateToOneForCreateInput {
  create: VCChangeTableNameCreateInput
  connect: VCChangeTableNameWhereUniqueInput
}

type VCChangeReason {
  id: ID!
  ChangeReasonID: Int
  ChangeReason: String
  vcChanges(where: VCChangeWhereInput! = {}, orderBy: [VCChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeWhereUniqueInput): [VCChange!]
  vcChangesCount(where: VCChangeWhereInput! = {}): Int
}

input VCChangeReasonWhereUniqueInput {
  id: ID
  ChangeReasonID: Int
}

input VCChangeReasonWhereInput {
  AND: [VCChangeReasonWhereInput!]
  OR: [VCChangeReasonWhereInput!]
  NOT: [VCChangeReasonWhereInput!]
  id: IDFilter
  ChangeReasonID: IntFilter
  ChangeReason: StringFilter
  vcChanges: VCChangeManyRelationFilter
}

input VCChangeManyRelationFilter {
  every: VCChangeWhereInput
  some: VCChangeWhereInput
  none: VCChangeWhereInput
}

input VCChangeReasonOrderByInput {
  id: OrderDirection
  ChangeReasonID: OrderDirection
  ChangeReason: OrderDirection
}

input VCChangeReasonUpdateInput {
  ChangeReasonID: Int
  ChangeReason: String
  vcChanges: VCChangeRelateToManyForUpdateInput
}

input VCChangeRelateToManyForUpdateInput {
  disconnect: [VCChangeWhereUniqueInput!]
  set: [VCChangeWhereUniqueInput!]
  create: [VCChangeCreateInput!]
  connect: [VCChangeWhereUniqueInput!]
}

input VCChangeReasonUpdateArgs {
  where: VCChangeReasonWhereUniqueInput!
  data: VCChangeReasonUpdateInput!
}

input VCChangeReasonCreateInput {
  ChangeReasonID: Int
  ChangeReason: String
  vcChanges: VCChangeRelateToManyForCreateInput
}

input VCChangeRelateToManyForCreateInput {
  create: [VCChangeCreateInput!]
  connect: [VCChangeWhereUniqueInput!]
}

type VCChange {
  id: ID!
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: VCChangeReason
  RevDate: DateTime
  changeDetails(where: VCChangeDetailWhereInput! = {}, orderBy: [VCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeDetailWhereUniqueInput): [VCChangeDetail!]
  changeDetailsCount(where: VCChangeDetailWhereInput! = {}): Int
}

input VCChangeWhereUniqueInput {
  id: ID
  ChangeID: Int
}

input VCChangeWhereInput {
  AND: [VCChangeWhereInput!]
  OR: [VCChangeWhereInput!]
  NOT: [VCChangeWhereInput!]
  id: IDFilter
  ChangeID: IntFilter
  RequestID: IntFilter
  ChangeReasonID: VCChangeReasonWhereInput
  RevDate: DateTimeNullableFilter
  changeDetails: VCChangeDetailManyRelationFilter
}

input VCChangeOrderByInput {
  id: OrderDirection
  ChangeID: OrderDirection
  RequestID: OrderDirection
  RevDate: OrderDirection
}

input VCChangeUpdateInput {
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: VCChangeReasonRelateToOneForUpdateInput
  RevDate: DateTime
  changeDetails: VCChangeDetailRelateToManyForUpdateInput
}

input VCChangeReasonRelateToOneForUpdateInput {
  create: VCChangeReasonCreateInput
  connect: VCChangeReasonWhereUniqueInput
  disconnect: Boolean
}

input VCChangeUpdateArgs {
  where: VCChangeWhereUniqueInput!
  data: VCChangeUpdateInput!
}

input VCChangeCreateInput {
  ChangeID: Int
  RequestID: Int
  ChangeReasonID: VCChangeReasonRelateToOneForCreateInput
  RevDate: DateTime
  changeDetails: VCChangeDetailRelateToManyForCreateInput
}

input VCChangeReasonRelateToOneForCreateInput {
  create: VCChangeReasonCreateInput
  connect: VCChangeReasonWhereUniqueInput
}

type VCChangeTableName {
  id: ID!
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails(where: VCChangeDetailWhereInput! = {}, orderBy: [VCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeDetailWhereUniqueInput): [VCChangeDetail!]
  changeDetailsCount(where: VCChangeDetailWhereInput! = {}): Int
}

input VCChangeTableNameWhereUniqueInput {
  id: ID
  TableNameID: Int
}

input VCChangeTableNameWhereInput {
  AND: [VCChangeTableNameWhereInput!]
  OR: [VCChangeTableNameWhereInput!]
  NOT: [VCChangeTableNameWhereInput!]
  id: IDFilter
  TableNameID: IntFilter
  TableName: StringFilter
  TableDescription: StringFilter
  changeDetails: VCChangeDetailManyRelationFilter
}

input VCChangeTableNameOrderByInput {
  id: OrderDirection
  TableNameID: OrderDirection
  TableName: OrderDirection
  TableDescription: OrderDirection
}

input VCChangeTableNameUpdateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: VCChangeDetailRelateToManyForUpdateInput
}

input VCChangeTableNameUpdateArgs {
  where: VCChangeTableNameWhereUniqueInput!
  data: VCChangeTableNameUpdateInput!
}

input VCChangeTableNameCreateInput {
  TableNameID: Int
  TableName: String
  TableDescription: String
  changeDetails: VCChangeDetailRelateToManyForCreateInput
}

type Class {
  id: ID!
  ClassID: Int
  ClassName: String
}

input ClassWhereUniqueInput {
  id: ID
  ClassID: Int
}

input ClassWhereInput {
  AND: [ClassWhereInput!]
  OR: [ClassWhereInput!]
  NOT: [ClassWhereInput!]
  id: IDFilter
  ClassID: IntFilter
  ClassName: StringFilter
}

input ClassOrderByInput {
  id: OrderDirection
  ClassID: OrderDirection
  ClassName: OrderDirection
}

input ClassUpdateInput {
  ClassID: Int
  ClassName: String
}

input ClassUpdateArgs {
  where: ClassWhereUniqueInput!
  data: ClassUpdateInput!
}

input ClassCreateInput {
  ClassID: Int
  ClassName: String
}

type CylinderHeadType {
  id: ID!
  CylinderHeadTypeID: Int
  CylinderHeadTypeName: String
}

input CylinderHeadTypeWhereUniqueInput {
  id: ID
  CylinderHeadTypeID: Int
}

input CylinderHeadTypeWhereInput {
  AND: [CylinderHeadTypeWhereInput!]
  OR: [CylinderHeadTypeWhereInput!]
  NOT: [CylinderHeadTypeWhereInput!]
  id: IDFilter
  CylinderHeadTypeID: IntFilter
  CylinderHeadTypeName: StringFilter
}

input CylinderHeadTypeOrderByInput {
  id: OrderDirection
  CylinderHeadTypeID: OrderDirection
  CylinderHeadTypeName: OrderDirection
}

input CylinderHeadTypeUpdateInput {
  CylinderHeadTypeID: Int
  CylinderHeadTypeName: String
}

input CylinderHeadTypeUpdateArgs {
  where: CylinderHeadTypeWhereUniqueInput!
  data: CylinderHeadTypeUpdateInput!
}

input CylinderHeadTypeCreateInput {
  CylinderHeadTypeID: Int
  CylinderHeadTypeName: String
}

type DriveType {
  id: ID!
  DriveTypeID: Int
  DriveTypeName: String
}

input DriveTypeWhereUniqueInput {
  id: ID
  DriveTypeID: Int
}

input DriveTypeWhereInput {
  AND: [DriveTypeWhereInput!]
  OR: [DriveTypeWhereInput!]
  NOT: [DriveTypeWhereInput!]
  id: IDFilter
  DriveTypeID: IntFilter
  DriveTypeName: StringFilter
}

input DriveTypeOrderByInput {
  id: OrderDirection
  DriveTypeID: OrderDirection
  DriveTypeName: OrderDirection
}

input DriveTypeUpdateInput {
  DriveTypeID: Int
  DriveTypeName: String
}

input DriveTypeUpdateArgs {
  where: DriveTypeWhereUniqueInput!
  data: DriveTypeUpdateInput!
}

input DriveTypeCreateInput {
  DriveTypeID: Int
  DriveTypeName: String
}

type ElecControlled {
  id: ID!
  ElecControlledID: Int
  ElecControlledName: String
  transmissions(where: TransmissionWhereInput! = {}, orderBy: [TransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionWhereUniqueInput): [Transmission!]
  transmissionsCount(where: TransmissionWhereInput! = {}): Int
}

input ElecControlledWhereUniqueInput {
  id: ID
  ElecControlledID: Int
}

input ElecControlledWhereInput {
  AND: [ElecControlledWhereInput!]
  OR: [ElecControlledWhereInput!]
  NOT: [ElecControlledWhereInput!]
  id: IDFilter
  ElecControlledID: IntFilter
  ElecControlledName: StringFilter
  transmissions: TransmissionManyRelationFilter
}

input TransmissionManyRelationFilter {
  every: TransmissionWhereInput
  some: TransmissionWhereInput
  none: TransmissionWhereInput
}

input ElecControlledOrderByInput {
  id: OrderDirection
  ElecControlledID: OrderDirection
  ElecControlledName: OrderDirection
}

input ElecControlledUpdateInput {
  ElecControlledID: Int
  ElecControlledName: String
  transmissions: TransmissionRelateToManyForUpdateInput
}

input TransmissionRelateToManyForUpdateInput {
  disconnect: [TransmissionWhereUniqueInput!]
  set: [TransmissionWhereUniqueInput!]
  create: [TransmissionCreateInput!]
  connect: [TransmissionWhereUniqueInput!]
}

input ElecControlledUpdateArgs {
  where: ElecControlledWhereUniqueInput!
  data: ElecControlledUpdateInput!
}

input ElecControlledCreateInput {
  ElecControlledID: Int
  ElecControlledName: String
  transmissions: TransmissionRelateToManyForCreateInput
}

input TransmissionRelateToManyForCreateInput {
  create: [TransmissionCreateInput!]
  connect: [TransmissionWhereUniqueInput!]
}

type EngineBase {
  id: ID!
  EngineBaseID: Int
  MfrEngineCode: String
  EngineDesignation: String
}

input EngineBaseWhereUniqueInput {
  id: ID
  EngineBaseID: Int
}

input EngineBaseWhereInput {
  AND: [EngineBaseWhereInput!]
  OR: [EngineBaseWhereInput!]
  NOT: [EngineBaseWhereInput!]
  id: IDFilter
  EngineBaseID: IntFilter
  MfrEngineCode: StringFilter
  EngineDesignation: StringFilter
}

input EngineBaseOrderByInput {
  id: OrderDirection
  EngineBaseID: OrderDirection
  MfrEngineCode: OrderDirection
  EngineDesignation: OrderDirection
}

input EngineBaseUpdateInput {
  EngineBaseID: Int
  MfrEngineCode: String
  EngineDesignation: String
}

input EngineBaseUpdateArgs {
  where: EngineBaseWhereUniqueInput!
  data: EngineBaseUpdateInput!
}

input EngineBaseCreateInput {
  EngineBaseID: Int
  MfrEngineCode: String
  EngineDesignation: String
}

type EngineBase2 {
  id: ID!
  EngineBaseID: Int
  Cylinders: Int
  DisplacementLiters: Float
  DisplacementCC: Int
  DisplacementCI: Int
}

input EngineBase2WhereUniqueInput {
  id: ID
  EngineBaseID: Int
}

input EngineBase2WhereInput {
  AND: [EngineBase2WhereInput!]
  OR: [EngineBase2WhereInput!]
  NOT: [EngineBase2WhereInput!]
  id: IDFilter
  EngineBaseID: IntFilter
  Cylinders: IntNullableFilter
  DisplacementLiters: FloatNullableFilter
  DisplacementCC: IntNullableFilter
  DisplacementCI: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input EngineBase2OrderByInput {
  id: OrderDirection
  EngineBaseID: OrderDirection
  Cylinders: OrderDirection
  DisplacementLiters: OrderDirection
  DisplacementCC: OrderDirection
  DisplacementCI: OrderDirection
}

input EngineBase2UpdateInput {
  EngineBaseID: Int
  Cylinders: Int
  DisplacementLiters: Float
  DisplacementCC: Int
  DisplacementCI: Int
}

input EngineBase2UpdateArgs {
  where: EngineBase2WhereUniqueInput!
  data: EngineBase2UpdateInput!
}

input EngineBase2CreateInput {
  EngineBaseID: Int
  Cylinders: Int
  DisplacementLiters: Float
  DisplacementCC: Int
  DisplacementCI: Int
}

type EngineBlock {
  id: ID!
  EngineBlockConfigID: Int
  EngineBlockConfigName: String
}

input EngineBlockWhereUniqueInput {
  id: ID
  EngineBlockConfigID: Int
}

input EngineBlockWhereInput {
  AND: [EngineBlockWhereInput!]
  OR: [EngineBlockWhereInput!]
  NOT: [EngineBlockWhereInput!]
  id: IDFilter
  EngineBlockConfigID: IntFilter
  EngineBlockConfigName: StringFilter
}

input EngineBlockOrderByInput {
  id: OrderDirection
  EngineBlockConfigID: OrderDirection
  EngineBlockConfigName: OrderDirection
}

input EngineBlockUpdateInput {
  EngineBlockConfigID: Int
  EngineBlockConfigName: String
}

input EngineBlockUpdateArgs {
  where: EngineBlockWhereUniqueInput!
  data: EngineBlockUpdateInput!
}

input EngineBlockCreateInput {
  EngineBlockConfigID: Int
  EngineBlockConfigName: String
}

type EngineBoreStroke {
  id: ID!
  EngineBaseID: Int
  BoreInches: Float
  StrokeInches: Float
}

input EngineBoreStrokeWhereUniqueInput {
  id: ID
}

input EngineBoreStrokeWhereInput {
  AND: [EngineBoreStrokeWhereInput!]
  OR: [EngineBoreStrokeWhereInput!]
  NOT: [EngineBoreStrokeWhereInput!]
  id: IDFilter
  EngineBaseID: IntFilter
  BoreInches: FloatNullableFilter
  StrokeInches: FloatNullableFilter
}

input EngineBoreStrokeOrderByInput {
  id: OrderDirection
  EngineBaseID: OrderDirection
  BoreInches: OrderDirection
  StrokeInches: OrderDirection
}

input EngineBoreStrokeUpdateInput {
  EngineBaseID: Int
  BoreInches: Float
  StrokeInches: Float
}

input EngineBoreStrokeUpdateArgs {
  where: EngineBoreStrokeWhereUniqueInput!
  data: EngineBoreStrokeUpdateInput!
}

input EngineBoreStrokeCreateInput {
  EngineBaseID: Int
  BoreInches: Float
  StrokeInches: Float
}

type EngineConfig {
  id: ID!
  EngineConfigID: Int
  EngineConfigName: String
}

input EngineConfigWhereUniqueInput {
  id: ID
  EngineConfigID: Int
}

input EngineConfigWhereInput {
  AND: [EngineConfigWhereInput!]
  OR: [EngineConfigWhereInput!]
  NOT: [EngineConfigWhereInput!]
  id: IDFilter
  EngineConfigID: IntFilter
  EngineConfigName: StringFilter
}

input EngineConfigOrderByInput {
  id: OrderDirection
  EngineConfigID: OrderDirection
  EngineConfigName: OrderDirection
}

input EngineConfigUpdateInput {
  EngineConfigID: Int
  EngineConfigName: String
}

input EngineConfigUpdateArgs {
  where: EngineConfigWhereUniqueInput!
  data: EngineConfigUpdateInput!
}

input EngineConfigCreateInput {
  EngineConfigID: Int
  EngineConfigName: String
}

type EngineConfig2 {
  id: ID!
  EngineConfigID: Int
  EngineBaseID: Int
  EngineBlockConfigID: Int
  BoreInches: Int
  StrokeInches: Int
}

input EngineConfig2WhereUniqueInput {
  id: ID
  EngineConfigID: Int
}

input EngineConfig2WhereInput {
  AND: [EngineConfig2WhereInput!]
  OR: [EngineConfig2WhereInput!]
  NOT: [EngineConfig2WhereInput!]
  id: IDFilter
  EngineConfigID: IntFilter
  EngineBaseID: IntNullableFilter
  EngineBlockConfigID: IntNullableFilter
  BoreInches: IntNullableFilter
  StrokeInches: IntNullableFilter
}

input EngineConfig2OrderByInput {
  id: OrderDirection
  EngineConfigID: OrderDirection
  EngineBaseID: OrderDirection
  EngineBlockConfigID: OrderDirection
  BoreInches: OrderDirection
  StrokeInches: OrderDirection
}

input EngineConfig2UpdateInput {
  EngineConfigID: Int
  EngineBaseID: Int
  EngineBlockConfigID: Int
  BoreInches: Int
  StrokeInches: Int
}

input EngineConfig2UpdateArgs {
  where: EngineConfig2WhereUniqueInput!
  data: EngineConfig2UpdateInput!
}

input EngineConfig2CreateInput {
  EngineConfigID: Int
  EngineBaseID: Int
  EngineBlockConfigID: Int
  BoreInches: Int
  StrokeInches: Int
}

type EngineDesignation {
  id: ID!
  EngineDesignationID: Int
  EngineDesignationName: String
}

input EngineDesignationWhereUniqueInput {
  id: ID
  EngineDesignationID: Int
}

input EngineDesignationWhereInput {
  AND: [EngineDesignationWhereInput!]
  OR: [EngineDesignationWhereInput!]
  NOT: [EngineDesignationWhereInput!]
  id: IDFilter
  EngineDesignationID: IntFilter
  EngineDesignationName: StringFilter
}

input EngineDesignationOrderByInput {
  id: OrderDirection
  EngineDesignationID: OrderDirection
  EngineDesignationName: OrderDirection
}

input EngineDesignationUpdateInput {
  EngineDesignationID: Int
  EngineDesignationName: String
}

input EngineDesignationUpdateArgs {
  where: EngineDesignationWhereUniqueInput!
  data: EngineDesignationUpdateInput!
}

input EngineDesignationCreateInput {
  EngineDesignationID: Int
  EngineDesignationName: String
}

type EngineVersion {
  id: ID!
  EngineVersionID: Int
  EngineVersion: String
}

input EngineVersionWhereUniqueInput {
  id: ID
  EngineVersionID: Int
}

input EngineVersionWhereInput {
  AND: [EngineVersionWhereInput!]
  OR: [EngineVersionWhereInput!]
  NOT: [EngineVersionWhereInput!]
  id: IDFilter
  EngineVersionID: IntFilter
  EngineVersion: StringFilter
}

input EngineVersionOrderByInput {
  id: OrderDirection
  EngineVersionID: OrderDirection
  EngineVersion: OrderDirection
}

input EngineVersionUpdateInput {
  EngineVersionID: Int
  EngineVersion: String
}

input EngineVersionUpdateArgs {
  where: EngineVersionWhereUniqueInput!
  data: EngineVersionUpdateInput!
}

input EngineVersionCreateInput {
  EngineVersionID: Int
  EngineVersion: String
}

type EngineVIN {
  id: ID!
  EngineVINID: Int
  EngineVIN: String
}

input EngineVINWhereUniqueInput {
  id: ID
  EngineVINID: Int
}

input EngineVINWhereInput {
  AND: [EngineVINWhereInput!]
  OR: [EngineVINWhereInput!]
  NOT: [EngineVINWhereInput!]
  id: IDFilter
  EngineVINID: IntFilter
  EngineVIN: StringFilter
}

input EngineVINOrderByInput {
  id: OrderDirection
  EngineVINID: OrderDirection
  EngineVIN: OrderDirection
}

input EngineVINUpdateInput {
  EngineVINID: Int
  EngineVIN: String
}

input EngineVINUpdateArgs {
  where: EngineVINWhereUniqueInput!
  data: EngineVINUpdateInput!
}

input EngineVINCreateInput {
  EngineVINID: Int
  EngineVIN: String
}

type EnglishPhrase {
  id: ID!
  EnglishPhraseID: Int
  EnglishPhrase: String
  englishTranslations(where: LanguageTranslationWhereInput! = {}, orderBy: [LanguageTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageTranslationWhereUniqueInput): [LanguageTranslation!]
  englishTranslationsCount(where: LanguageTranslationWhereInput! = {}): Int
}

input EnglishPhraseWhereUniqueInput {
  id: ID
  EnglishPhraseID: Int
}

input EnglishPhraseWhereInput {
  AND: [EnglishPhraseWhereInput!]
  OR: [EnglishPhraseWhereInput!]
  NOT: [EnglishPhraseWhereInput!]
  id: IDFilter
  EnglishPhraseID: IntFilter
  EnglishPhrase: StringFilter
  englishTranslations: LanguageTranslationManyRelationFilter
}

input LanguageTranslationManyRelationFilter {
  every: LanguageTranslationWhereInput
  some: LanguageTranslationWhereInput
  none: LanguageTranslationWhereInput
}

input EnglishPhraseOrderByInput {
  id: OrderDirection
  EnglishPhraseID: OrderDirection
  EnglishPhrase: OrderDirection
}

input EnglishPhraseUpdateInput {
  EnglishPhraseID: Int
  EnglishPhrase: String
  englishTranslations: LanguageTranslationRelateToManyForUpdateInput
}

input LanguageTranslationRelateToManyForUpdateInput {
  disconnect: [LanguageTranslationWhereUniqueInput!]
  set: [LanguageTranslationWhereUniqueInput!]
  create: [LanguageTranslationCreateInput!]
  connect: [LanguageTranslationWhereUniqueInput!]
}

input EnglishPhraseUpdateArgs {
  where: EnglishPhraseWhereUniqueInput!
  data: EnglishPhraseUpdateInput!
}

input EnglishPhraseCreateInput {
  EnglishPhraseID: Int
  EnglishPhrase: String
  englishTranslations: LanguageTranslationRelateToManyForCreateInput
}

input LanguageTranslationRelateToManyForCreateInput {
  create: [LanguageTranslationCreateInput!]
  connect: [LanguageTranslationWhereUniqueInput!]
}

type Equipment {
  id: ID!
  EquipmentID: Int
  EquipmentBaseID: EquipmentBase
  RegionID: Region
  ProductionStart: String
  ProductionEnd: String
}

input EquipmentWhereUniqueInput {
  id: ID
  EquipmentID: Int
}

input EquipmentWhereInput {
  AND: [EquipmentWhereInput!]
  OR: [EquipmentWhereInput!]
  NOT: [EquipmentWhereInput!]
  id: IDFilter
  EquipmentID: IntFilter
  EquipmentBaseID: EquipmentBaseWhereInput
  RegionID: RegionWhereInput
  ProductionStart: StringFilter
  ProductionEnd: StringFilter
}

input EquipmentOrderByInput {
  id: OrderDirection
  EquipmentID: OrderDirection
  ProductionStart: OrderDirection
  ProductionEnd: OrderDirection
}

input EquipmentUpdateInput {
  EquipmentID: Int
  EquipmentBaseID: EquipmentBaseRelateToOneForUpdateInput
  RegionID: RegionRelateToOneForUpdateInput
  ProductionStart: String
  ProductionEnd: String
}

input EquipmentBaseRelateToOneForUpdateInput {
  create: EquipmentBaseCreateInput
  connect: EquipmentBaseWhereUniqueInput
  disconnect: Boolean
}

input RegionRelateToOneForUpdateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
  disconnect: Boolean
}

input EquipmentUpdateArgs {
  where: EquipmentWhereUniqueInput!
  data: EquipmentUpdateInput!
}

input EquipmentCreateInput {
  EquipmentID: Int
  EquipmentBaseID: EquipmentBaseRelateToOneForCreateInput
  RegionID: RegionRelateToOneForCreateInput
  ProductionStart: String
  ProductionEnd: String
}

input EquipmentBaseRelateToOneForCreateInput {
  create: EquipmentBaseCreateInput
  connect: EquipmentBaseWhereUniqueInput
}

input RegionRelateToOneForCreateInput {
  create: RegionCreateInput
  connect: RegionWhereUniqueInput
}

type EquipmentBase {
  id: ID!
  EquipmentBaseID: Int
  MfrID: Mfr
  EquipmentModelID: EquipmentModel
  VehicleTypeId: VehicleType
}

input EquipmentBaseWhereUniqueInput {
  id: ID
  EquipmentBaseID: Int
}

input EquipmentBaseWhereInput {
  AND: [EquipmentBaseWhereInput!]
  OR: [EquipmentBaseWhereInput!]
  NOT: [EquipmentBaseWhereInput!]
  id: IDFilter
  EquipmentBaseID: IntFilter
  MfrID: MfrWhereInput
  EquipmentModelID: EquipmentModelWhereInput
  VehicleTypeId: VehicleTypeWhereInput
}

input EquipmentBaseOrderByInput {
  id: OrderDirection
  EquipmentBaseID: OrderDirection
}

input EquipmentBaseUpdateInput {
  EquipmentBaseID: Int
  MfrID: MfrRelateToOneForUpdateInput
  EquipmentModelID: EquipmentModelRelateToOneForUpdateInput
  VehicleTypeId: VehicleTypeRelateToOneForUpdateInput
}

input MfrRelateToOneForUpdateInput {
  create: MfrCreateInput
  connect: MfrWhereUniqueInput
  disconnect: Boolean
}

input EquipmentModelRelateToOneForUpdateInput {
  create: EquipmentModelCreateInput
  connect: EquipmentModelWhereUniqueInput
  disconnect: Boolean
}

input VehicleTypeRelateToOneForUpdateInput {
  create: VehicleTypeCreateInput
  connect: VehicleTypeWhereUniqueInput
  disconnect: Boolean
}

input EquipmentBaseUpdateArgs {
  where: EquipmentBaseWhereUniqueInput!
  data: EquipmentBaseUpdateInput!
}

input EquipmentBaseCreateInput {
  EquipmentBaseID: Int
  MfrID: MfrRelateToOneForCreateInput
  EquipmentModelID: EquipmentModelRelateToOneForCreateInput
  VehicleTypeId: VehicleTypeRelateToOneForCreateInput
}

input MfrRelateToOneForCreateInput {
  create: MfrCreateInput
  connect: MfrWhereUniqueInput
}

input EquipmentModelRelateToOneForCreateInput {
  create: EquipmentModelCreateInput
  connect: EquipmentModelWhereUniqueInput
}

input VehicleTypeRelateToOneForCreateInput {
  create: VehicleTypeCreateInput
  connect: VehicleTypeWhereUniqueInput
}

type EquipmentModel {
  id: ID!
  EquipmentModelID: Int
  EquipmentModelName: String
}

input EquipmentModelWhereUniqueInput {
  id: ID
  EquipmentModelID: Int
}

input EquipmentModelWhereInput {
  AND: [EquipmentModelWhereInput!]
  OR: [EquipmentModelWhereInput!]
  NOT: [EquipmentModelWhereInput!]
  id: IDFilter
  EquipmentModelID: IntFilter
  EquipmentModelName: StringFilter
}

input EquipmentModelOrderByInput {
  id: OrderDirection
  EquipmentModelID: OrderDirection
  EquipmentModelName: OrderDirection
}

input EquipmentModelUpdateInput {
  EquipmentModelID: Int
  EquipmentModelName: String
}

input EquipmentModelUpdateArgs {
  where: EquipmentModelWhereUniqueInput!
  data: EquipmentModelUpdateInput!
}

input EquipmentModelCreateInput {
  EquipmentModelID: Int
  EquipmentModelName: String
}

type EquipmentToEngineConfig {
  id: ID!
  EquipmentToEngineConfigID: Int
  EquipmentID: Equipment
  EngineConfigID: EngineConfig2
}

input EquipmentToEngineConfigWhereUniqueInput {
  id: ID
  EquipmentToEngineConfigID: Int
}

input EquipmentToEngineConfigWhereInput {
  AND: [EquipmentToEngineConfigWhereInput!]
  OR: [EquipmentToEngineConfigWhereInput!]
  NOT: [EquipmentToEngineConfigWhereInput!]
  id: IDFilter
  EquipmentToEngineConfigID: IntFilter
  EquipmentID: EquipmentWhereInput
  EngineConfigID: EngineConfig2WhereInput
}

input EquipmentToEngineConfigOrderByInput {
  id: OrderDirection
  EquipmentToEngineConfigID: OrderDirection
}

input EquipmentToEngineConfigUpdateInput {
  EquipmentToEngineConfigID: Int
  EquipmentID: EquipmentRelateToOneForUpdateInput
  EngineConfigID: EngineConfig2RelateToOneForUpdateInput
}

input EquipmentRelateToOneForUpdateInput {
  create: EquipmentCreateInput
  connect: EquipmentWhereUniqueInput
  disconnect: Boolean
}

input EngineConfig2RelateToOneForUpdateInput {
  create: EngineConfig2CreateInput
  connect: EngineConfig2WhereUniqueInput
  disconnect: Boolean
}

input EquipmentToEngineConfigUpdateArgs {
  where: EquipmentToEngineConfigWhereUniqueInput!
  data: EquipmentToEngineConfigUpdateInput!
}

input EquipmentToEngineConfigCreateInput {
  EquipmentToEngineConfigID: Int
  EquipmentID: EquipmentRelateToOneForCreateInput
  EngineConfigID: EngineConfig2RelateToOneForCreateInput
}

input EquipmentRelateToOneForCreateInput {
  create: EquipmentCreateInput
  connect: EquipmentWhereUniqueInput
}

input EngineConfig2RelateToOneForCreateInput {
  create: EngineConfig2CreateInput
  connect: EngineConfig2WhereUniqueInput
}

type FuelDeliveryConfig {
  id: ID!
  FuelDeliveryConfigID: Int
  FuelDeliveryTypeID: FuelDeliveryType
  FuelDeliverySubTypeID: FuelDeliverySubType
  FuelSystemControlTypeID: FuelSystemControlType
  FuelSystemDesignID: FuelSystemDesign
}

input FuelDeliveryConfigWhereUniqueInput {
  id: ID
  FuelDeliveryConfigID: Int
}

input FuelDeliveryConfigWhereInput {
  AND: [FuelDeliveryConfigWhereInput!]
  OR: [FuelDeliveryConfigWhereInput!]
  NOT: [FuelDeliveryConfigWhereInput!]
  id: IDFilter
  FuelDeliveryConfigID: IntFilter
  FuelDeliveryTypeID: FuelDeliveryTypeWhereInput
  FuelDeliverySubTypeID: FuelDeliverySubTypeWhereInput
  FuelSystemControlTypeID: FuelSystemControlTypeWhereInput
  FuelSystemDesignID: FuelSystemDesignWhereInput
}

input FuelDeliveryConfigOrderByInput {
  id: OrderDirection
  FuelDeliveryConfigID: OrderDirection
}

input FuelDeliveryConfigUpdateInput {
  FuelDeliveryConfigID: Int
  FuelDeliveryTypeID: FuelDeliveryTypeRelateToOneForUpdateInput
  FuelDeliverySubTypeID: FuelDeliverySubTypeRelateToOneForUpdateInput
  FuelSystemControlTypeID: FuelSystemControlTypeRelateToOneForUpdateInput
  FuelSystemDesignID: FuelSystemDesignRelateToOneForUpdateInput
}

input FuelDeliveryTypeRelateToOneForUpdateInput {
  create: FuelDeliveryTypeCreateInput
  connect: FuelDeliveryTypeWhereUniqueInput
  disconnect: Boolean
}

input FuelDeliverySubTypeRelateToOneForUpdateInput {
  create: FuelDeliverySubTypeCreateInput
  connect: FuelDeliverySubTypeWhereUniqueInput
  disconnect: Boolean
}

input FuelSystemControlTypeRelateToOneForUpdateInput {
  create: FuelSystemControlTypeCreateInput
  connect: FuelSystemControlTypeWhereUniqueInput
  disconnect: Boolean
}

input FuelSystemDesignRelateToOneForUpdateInput {
  create: FuelSystemDesignCreateInput
  connect: FuelSystemDesignWhereUniqueInput
  disconnect: Boolean
}

input FuelDeliveryConfigUpdateArgs {
  where: FuelDeliveryConfigWhereUniqueInput!
  data: FuelDeliveryConfigUpdateInput!
}

input FuelDeliveryConfigCreateInput {
  FuelDeliveryConfigID: Int
  FuelDeliveryTypeID: FuelDeliveryTypeRelateToOneForCreateInput
  FuelDeliverySubTypeID: FuelDeliverySubTypeRelateToOneForCreateInput
  FuelSystemControlTypeID: FuelSystemControlTypeRelateToOneForCreateInput
  FuelSystemDesignID: FuelSystemDesignRelateToOneForCreateInput
}

input FuelDeliveryTypeRelateToOneForCreateInput {
  create: FuelDeliveryTypeCreateInput
  connect: FuelDeliveryTypeWhereUniqueInput
}

input FuelDeliverySubTypeRelateToOneForCreateInput {
  create: FuelDeliverySubTypeCreateInput
  connect: FuelDeliverySubTypeWhereUniqueInput
}

input FuelSystemControlTypeRelateToOneForCreateInput {
  create: FuelSystemControlTypeCreateInput
  connect: FuelSystemControlTypeWhereUniqueInput
}

input FuelSystemDesignRelateToOneForCreateInput {
  create: FuelSystemDesignCreateInput
  connect: FuelSystemDesignWhereUniqueInput
}

type FuelDeliverySubType {
  id: ID!
  FuelDeliverySubTypeID: Int
  FuelDeliverySubTypeName: String
}

input FuelDeliverySubTypeWhereUniqueInput {
  id: ID
  FuelDeliverySubTypeID: Int
}

input FuelDeliverySubTypeWhereInput {
  AND: [FuelDeliverySubTypeWhereInput!]
  OR: [FuelDeliverySubTypeWhereInput!]
  NOT: [FuelDeliverySubTypeWhereInput!]
  id: IDFilter
  FuelDeliverySubTypeID: IntFilter
  FuelDeliverySubTypeName: StringFilter
}

input FuelDeliverySubTypeOrderByInput {
  id: OrderDirection
  FuelDeliverySubTypeID: OrderDirection
  FuelDeliverySubTypeName: OrderDirection
}

input FuelDeliverySubTypeUpdateInput {
  FuelDeliverySubTypeID: Int
  FuelDeliverySubTypeName: String
}

input FuelDeliverySubTypeUpdateArgs {
  where: FuelDeliverySubTypeWhereUniqueInput!
  data: FuelDeliverySubTypeUpdateInput!
}

input FuelDeliverySubTypeCreateInput {
  FuelDeliverySubTypeID: Int
  FuelDeliverySubTypeName: String
}

type FuelDeliveryType {
  id: ID!
  FuelDeliveryTypeID: Int
  FuelDeliveryTypeName: String
}

input FuelDeliveryTypeWhereUniqueInput {
  id: ID
  FuelDeliveryTypeID: Int
}

input FuelDeliveryTypeWhereInput {
  AND: [FuelDeliveryTypeWhereInput!]
  OR: [FuelDeliveryTypeWhereInput!]
  NOT: [FuelDeliveryTypeWhereInput!]
  id: IDFilter
  FuelDeliveryTypeID: IntFilter
  FuelDeliveryTypeName: StringFilter
}

input FuelDeliveryTypeOrderByInput {
  id: OrderDirection
  FuelDeliveryTypeID: OrderDirection
  FuelDeliveryTypeName: OrderDirection
}

input FuelDeliveryTypeUpdateInput {
  FuelDeliveryTypeID: Int
  FuelDeliveryTypeName: String
}

input FuelDeliveryTypeUpdateArgs {
  where: FuelDeliveryTypeWhereUniqueInput!
  data: FuelDeliveryTypeUpdateInput!
}

input FuelDeliveryTypeCreateInput {
  FuelDeliveryTypeID: Int
  FuelDeliveryTypeName: String
}

type FuelSystemControlType {
  id: ID!
  FuelSystemControlTypeID: Int
  FuelSystemControlTypeName: String
}

input FuelSystemControlTypeWhereUniqueInput {
  id: ID
  FuelSystemControlTypeID: Int
}

input FuelSystemControlTypeWhereInput {
  AND: [FuelSystemControlTypeWhereInput!]
  OR: [FuelSystemControlTypeWhereInput!]
  NOT: [FuelSystemControlTypeWhereInput!]
  id: IDFilter
  FuelSystemControlTypeID: IntFilter
  FuelSystemControlTypeName: StringFilter
}

input FuelSystemControlTypeOrderByInput {
  id: OrderDirection
  FuelSystemControlTypeID: OrderDirection
  FuelSystemControlTypeName: OrderDirection
}

input FuelSystemControlTypeUpdateInput {
  FuelSystemControlTypeID: Int
  FuelSystemControlTypeName: String
}

input FuelSystemControlTypeUpdateArgs {
  where: FuelSystemControlTypeWhereUniqueInput!
  data: FuelSystemControlTypeUpdateInput!
}

input FuelSystemControlTypeCreateInput {
  FuelSystemControlTypeID: Int
  FuelSystemControlTypeName: String
}

type FuelSystemDesign {
  id: ID!
  FuelSystemDesignID: Int
  FuelSystemDesignName: String
}

input FuelSystemDesignWhereUniqueInput {
  id: ID
  FuelSystemDesignID: Int
}

input FuelSystemDesignWhereInput {
  AND: [FuelSystemDesignWhereInput!]
  OR: [FuelSystemDesignWhereInput!]
  NOT: [FuelSystemDesignWhereInput!]
  id: IDFilter
  FuelSystemDesignID: IntFilter
  FuelSystemDesignName: StringFilter
}

input FuelSystemDesignOrderByInput {
  id: OrderDirection
  FuelSystemDesignID: OrderDirection
  FuelSystemDesignName: OrderDirection
}

input FuelSystemDesignUpdateInput {
  FuelSystemDesignID: Int
  FuelSystemDesignName: String
}

input FuelSystemDesignUpdateArgs {
  where: FuelSystemDesignWhereUniqueInput!
  data: FuelSystemDesignUpdateInput!
}

input FuelSystemDesignCreateInput {
  FuelSystemDesignID: Int
  FuelSystemDesignName: String
}

type FuelType {
  id: ID!
  FuelTypeID: Int
  FuelTypeName: String
}

input FuelTypeWhereUniqueInput {
  id: ID
  FuelTypeID: Int
}

input FuelTypeWhereInput {
  AND: [FuelTypeWhereInput!]
  OR: [FuelTypeWhereInput!]
  NOT: [FuelTypeWhereInput!]
  id: IDFilter
  FuelTypeID: IntFilter
  FuelTypeName: StringFilter
}

input FuelTypeOrderByInput {
  id: OrderDirection
  FuelTypeID: OrderDirection
  FuelTypeName: OrderDirection
}

input FuelTypeUpdateInput {
  FuelTypeID: Int
  FuelTypeName: String
}

input FuelTypeUpdateArgs {
  where: FuelTypeWhereUniqueInput!
  data: FuelTypeUpdateInput!
}

input FuelTypeCreateInput {
  FuelTypeID: Int
  FuelTypeName: String
}

type IgnitionSystemType {
  id: ID!
  IgnitionSystemTypeID: Int
  IgnitionSystemTypeName: String
}

input IgnitionSystemTypeWhereUniqueInput {
  id: ID
  IgnitionSystemTypeID: Int
}

input IgnitionSystemTypeWhereInput {
  AND: [IgnitionSystemTypeWhereInput!]
  OR: [IgnitionSystemTypeWhereInput!]
  NOT: [IgnitionSystemTypeWhereInput!]
  id: IDFilter
  IgnitionSystemTypeID: IntFilter
  IgnitionSystemTypeName: StringFilter
}

input IgnitionSystemTypeOrderByInput {
  id: OrderDirection
  IgnitionSystemTypeID: OrderDirection
  IgnitionSystemTypeName: OrderDirection
}

input IgnitionSystemTypeUpdateInput {
  IgnitionSystemTypeID: Int
  IgnitionSystemTypeName: String
}

input IgnitionSystemTypeUpdateArgs {
  where: IgnitionSystemTypeWhereUniqueInput!
  data: IgnitionSystemTypeUpdateInput!
}

input IgnitionSystemTypeCreateInput {
  IgnitionSystemTypeID: Int
  IgnitionSystemTypeName: String
}

type VCLanguage {
  id: ID!
  LanguageID: Int
  LanguageName: String
  DialectName: String
  languageTranslations(where: LanguageTranslationWhereInput! = {}, orderBy: [LanguageTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageTranslationWhereUniqueInput): [LanguageTranslation!]
  languageTranslationsCount(where: LanguageTranslationWhereInput! = {}): Int
}

input VCLanguageWhereUniqueInput {
  id: ID
  LanguageID: Int
}

input VCLanguageWhereInput {
  AND: [VCLanguageWhereInput!]
  OR: [VCLanguageWhereInput!]
  NOT: [VCLanguageWhereInput!]
  id: IDFilter
  LanguageID: IntFilter
  LanguageName: StringFilter
  DialectName: StringFilter
  languageTranslations: LanguageTranslationManyRelationFilter
}

input VCLanguageOrderByInput {
  id: OrderDirection
  LanguageID: OrderDirection
  LanguageName: OrderDirection
  DialectName: OrderDirection
}

input VCLanguageUpdateInput {
  LanguageID: Int
  LanguageName: String
  DialectName: String
  languageTranslations: LanguageTranslationRelateToManyForUpdateInput
}

input VCLanguageUpdateArgs {
  where: VCLanguageWhereUniqueInput!
  data: VCLanguageUpdateInput!
}

input VCLanguageCreateInput {
  LanguageID: Int
  LanguageName: String
  DialectName: String
  languageTranslations: LanguageTranslationRelateToManyForCreateInput
}

type LanguageTranslation {
  id: ID!
  LanguageTranslationID: Int
  EnglishPhraseID: EnglishPhrase
  LanguageID: VCLanguage
  Translation: String
  attachments(where: LanguageTranslationAttachmentWhereInput! = {}, orderBy: [LanguageTranslationAttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageTranslationAttachmentWhereUniqueInput): [LanguageTranslationAttachment!]
  attachmentsCount(where: LanguageTranslationAttachmentWhereInput! = {}): Int
}

input LanguageTranslationWhereUniqueInput {
  id: ID
  LanguageTranslationID: Int
}

input LanguageTranslationWhereInput {
  AND: [LanguageTranslationWhereInput!]
  OR: [LanguageTranslationWhereInput!]
  NOT: [LanguageTranslationWhereInput!]
  id: IDFilter
  LanguageTranslationID: IntFilter
  EnglishPhraseID: EnglishPhraseWhereInput
  LanguageID: VCLanguageWhereInput
  Translation: StringFilter
  attachments: LanguageTranslationAttachmentManyRelationFilter
}

input LanguageTranslationAttachmentManyRelationFilter {
  every: LanguageTranslationAttachmentWhereInput
  some: LanguageTranslationAttachmentWhereInput
  none: LanguageTranslationAttachmentWhereInput
}

input LanguageTranslationOrderByInput {
  id: OrderDirection
  LanguageTranslationID: OrderDirection
  Translation: OrderDirection
}

input LanguageTranslationUpdateInput {
  LanguageTranslationID: Int
  EnglishPhraseID: EnglishPhraseRelateToOneForUpdateInput
  LanguageID: VCLanguageRelateToOneForUpdateInput
  Translation: String
  attachments: LanguageTranslationAttachmentRelateToManyForUpdateInput
}

input EnglishPhraseRelateToOneForUpdateInput {
  create: EnglishPhraseCreateInput
  connect: EnglishPhraseWhereUniqueInput
  disconnect: Boolean
}

input VCLanguageRelateToOneForUpdateInput {
  create: VCLanguageCreateInput
  connect: VCLanguageWhereUniqueInput
  disconnect: Boolean
}

input LanguageTranslationAttachmentRelateToManyForUpdateInput {
  disconnect: [LanguageTranslationAttachmentWhereUniqueInput!]
  set: [LanguageTranslationAttachmentWhereUniqueInput!]
  create: [LanguageTranslationAttachmentCreateInput!]
  connect: [LanguageTranslationAttachmentWhereUniqueInput!]
}

input LanguageTranslationUpdateArgs {
  where: LanguageTranslationWhereUniqueInput!
  data: LanguageTranslationUpdateInput!
}

input LanguageTranslationCreateInput {
  LanguageTranslationID: Int
  EnglishPhraseID: EnglishPhraseRelateToOneForCreateInput
  LanguageID: VCLanguageRelateToOneForCreateInput
  Translation: String
  attachments: LanguageTranslationAttachmentRelateToManyForCreateInput
}

input EnglishPhraseRelateToOneForCreateInput {
  create: EnglishPhraseCreateInput
  connect: EnglishPhraseWhereUniqueInput
}

input VCLanguageRelateToOneForCreateInput {
  create: VCLanguageCreateInput
  connect: VCLanguageWhereUniqueInput
}

input LanguageTranslationAttachmentRelateToManyForCreateInput {
  create: [LanguageTranslationAttachmentCreateInput!]
  connect: [LanguageTranslationAttachmentWhereUniqueInput!]
}

type LanguageTranslationAttachment {
  id: ID!
  LanguageTranslationAttachmentID: Int
  LanguageTranslationID: LanguageTranslation
  AttachmentID: Int
}

input LanguageTranslationAttachmentWhereUniqueInput {
  id: ID
  LanguageTranslationAttachmentID: Int
}

input LanguageTranslationAttachmentWhereInput {
  AND: [LanguageTranslationAttachmentWhereInput!]
  OR: [LanguageTranslationAttachmentWhereInput!]
  NOT: [LanguageTranslationAttachmentWhereInput!]
  id: IDFilter
  LanguageTranslationAttachmentID: IntFilter
  LanguageTranslationID: LanguageTranslationWhereInput
  AttachmentID: IntFilter
}

input LanguageTranslationAttachmentOrderByInput {
  id: OrderDirection
  LanguageTranslationAttachmentID: OrderDirection
  AttachmentID: OrderDirection
}

input LanguageTranslationAttachmentUpdateInput {
  LanguageTranslationAttachmentID: Int
  LanguageTranslationID: LanguageTranslationRelateToOneForUpdateInput
  AttachmentID: Int
}

input LanguageTranslationRelateToOneForUpdateInput {
  create: LanguageTranslationCreateInput
  connect: LanguageTranslationWhereUniqueInput
  disconnect: Boolean
}

input LanguageTranslationAttachmentUpdateArgs {
  where: LanguageTranslationAttachmentWhereUniqueInput!
  data: LanguageTranslationAttachmentUpdateInput!
}

input LanguageTranslationAttachmentCreateInput {
  LanguageTranslationAttachmentID: Int
  LanguageTranslationID: LanguageTranslationRelateToOneForCreateInput
  AttachmentID: Int
}

input LanguageTranslationRelateToOneForCreateInput {
  create: LanguageTranslationCreateInput
  connect: LanguageTranslationWhereUniqueInput
}

type Make {
  id: ID!
  MakeID: Int
  MakeName: String
}

input MakeWhereUniqueInput {
  id: ID
  MakeID: Int
}

input MakeWhereInput {
  AND: [MakeWhereInput!]
  OR: [MakeWhereInput!]
  NOT: [MakeWhereInput!]
  id: IDFilter
  MakeID: IntFilter
  MakeName: StringFilter
}

input MakeOrderByInput {
  id: OrderDirection
  MakeID: OrderDirection
  MakeName: OrderDirection
}

input MakeUpdateInput {
  MakeID: Int
  MakeName: String
}

input MakeUpdateArgs {
  where: MakeWhereUniqueInput!
  data: MakeUpdateInput!
}

input MakeCreateInput {
  MakeID: Int
  MakeName: String
}

type Mfr {
  id: ID!
  MfrID: Int
  MfrName: String
  transmissions(where: TransmissionWhereInput! = {}, orderBy: [TransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionWhereUniqueInput): [Transmission!]
  transmissionsCount(where: TransmissionWhereInput! = {}): Int
}

input MfrWhereUniqueInput {
  id: ID
  MfrID: Int
}

input MfrWhereInput {
  AND: [MfrWhereInput!]
  OR: [MfrWhereInput!]
  NOT: [MfrWhereInput!]
  id: IDFilter
  MfrID: IntFilter
  MfrName: StringFilter
  transmissions: TransmissionManyRelationFilter
}

input MfrOrderByInput {
  id: OrderDirection
  MfrID: OrderDirection
  MfrName: OrderDirection
}

input MfrUpdateInput {
  MfrID: Int
  MfrName: String
  transmissions: TransmissionRelateToManyForUpdateInput
}

input MfrUpdateArgs {
  where: MfrWhereUniqueInput!
  data: MfrUpdateInput!
}

input MfrCreateInput {
  MfrID: Int
  MfrName: String
  transmissions: TransmissionRelateToManyForCreateInput
}

type MfrBodyCode {
  id: ID!
  MfrBodyCodeID: Int
  MfrBodyCodeName: String
}

input MfrBodyCodeWhereUniqueInput {
  id: ID
  MfrBodyCodeID: Int
}

input MfrBodyCodeWhereInput {
  AND: [MfrBodyCodeWhereInput!]
  OR: [MfrBodyCodeWhereInput!]
  NOT: [MfrBodyCodeWhereInput!]
  id: IDFilter
  MfrBodyCodeID: IntFilter
  MfrBodyCodeName: StringFilter
}

input MfrBodyCodeOrderByInput {
  id: OrderDirection
  MfrBodyCodeID: OrderDirection
  MfrBodyCodeName: OrderDirection
}

input MfrBodyCodeUpdateInput {
  MfrBodyCodeID: Int
  MfrBodyCodeName: String
}

input MfrBodyCodeUpdateArgs {
  where: MfrBodyCodeWhereUniqueInput!
  data: MfrBodyCodeUpdateInput!
}

input MfrBodyCodeCreateInput {
  MfrBodyCodeID: Int
  MfrBodyCodeName: String
}

type Model {
  id: ID!
  ModelID: Int
  ModelName: String
  VehicleTypeID: VehicleType
}

input ModelWhereUniqueInput {
  id: ID
  ModelID: Int
}

input ModelWhereInput {
  AND: [ModelWhereInput!]
  OR: [ModelWhereInput!]
  NOT: [ModelWhereInput!]
  id: IDFilter
  ModelID: IntFilter
  ModelName: StringFilter
  VehicleTypeID: VehicleTypeWhereInput
}

input ModelOrderByInput {
  id: OrderDirection
  ModelID: OrderDirection
  ModelName: OrderDirection
}

input ModelUpdateInput {
  ModelID: Int
  ModelName: String
  VehicleTypeID: VehicleTypeRelateToOneForUpdateInput
}

input ModelUpdateArgs {
  where: ModelWhereUniqueInput!
  data: ModelUpdateInput!
}

input ModelCreateInput {
  ModelID: Int
  ModelName: String
  VehicleTypeID: VehicleTypeRelateToOneForCreateInput
}

type PowerOutput {
  id: ID!
  PowerOutputID: Int
  HorsePower: String
  KilowattPower: String
}

input PowerOutputWhereUniqueInput {
  id: ID
  PowerOutputID: Int
}

input PowerOutputWhereInput {
  AND: [PowerOutputWhereInput!]
  OR: [PowerOutputWhereInput!]
  NOT: [PowerOutputWhereInput!]
  id: IDFilter
  PowerOutputID: IntFilter
  HorsePower: StringFilter
  KilowattPower: StringFilter
}

input PowerOutputOrderByInput {
  id: OrderDirection
  PowerOutputID: OrderDirection
  HorsePower: OrderDirection
  KilowattPower: OrderDirection
}

input PowerOutputUpdateInput {
  PowerOutputID: Int
  HorsePower: String
  KilowattPower: String
}

input PowerOutputUpdateArgs {
  where: PowerOutputWhereUniqueInput!
  data: PowerOutputUpdateInput!
}

input PowerOutputCreateInput {
  PowerOutputID: Int
  HorsePower: String
  KilowattPower: String
}

type PublicationStage {
  id: ID!
  PublicationStageID: Int
  PublicationStageName: String
}

input PublicationStageWhereUniqueInput {
  id: ID
  PublicationStageID: Int
}

input PublicationStageWhereInput {
  AND: [PublicationStageWhereInput!]
  OR: [PublicationStageWhereInput!]
  NOT: [PublicationStageWhereInput!]
  id: IDFilter
  PublicationStageID: IntFilter
  PublicationStageName: StringFilter
}

input PublicationStageOrderByInput {
  id: OrderDirection
  PublicationStageID: OrderDirection
  PublicationStageName: OrderDirection
}

input PublicationStageUpdateInput {
  PublicationStageID: Int
  PublicationStageName: String
}

input PublicationStageUpdateArgs {
  where: PublicationStageWhereUniqueInput!
  data: PublicationStageUpdateInput!
}

input PublicationStageCreateInput {
  PublicationStageID: Int
  PublicationStageName: String
}

type Region {
  id: ID!
  RegionID: Int
  ParentID: Region
  RegionAbbr: String
  RegionName: String
}

input RegionWhereUniqueInput {
  id: ID
  RegionID: Int
}

input RegionWhereInput {
  AND: [RegionWhereInput!]
  OR: [RegionWhereInput!]
  NOT: [RegionWhereInput!]
  id: IDFilter
  RegionID: IntFilter
  ParentID: RegionWhereInput
  RegionAbbr: StringFilter
  RegionName: StringFilter
}

input RegionOrderByInput {
  id: OrderDirection
  RegionID: OrderDirection
  RegionAbbr: OrderDirection
  RegionName: OrderDirection
}

input RegionUpdateInput {
  RegionID: Int
  ParentID: RegionRelateToOneForUpdateInput
  RegionAbbr: String
  RegionName: String
}

input RegionUpdateArgs {
  where: RegionWhereUniqueInput!
  data: RegionUpdateInput!
}

input RegionCreateInput {
  RegionID: Int
  ParentID: RegionRelateToOneForCreateInput
  RegionAbbr: String
  RegionName: String
}

type SpringType {
  id: ID!
  SpringTypeID: Int
  SpringTypeName: String
  frontConfigs: SpringTypeConfig
  rearConfigs: SpringTypeConfig
}

input SpringTypeWhereUniqueInput {
  id: ID
  SpringTypeID: Int
  frontConfigs: SpringTypeConfigWhereUniqueInput
  rearConfigs: SpringTypeConfigWhereUniqueInput
}

input SpringTypeWhereInput {
  AND: [SpringTypeWhereInput!]
  OR: [SpringTypeWhereInput!]
  NOT: [SpringTypeWhereInput!]
  id: IDFilter
  SpringTypeID: IntFilter
  SpringTypeName: StringFilter
  frontConfigs: SpringTypeConfigWhereInput
  rearConfigs: SpringTypeConfigWhereInput
}

input SpringTypeOrderByInput {
  id: OrderDirection
  SpringTypeID: OrderDirection
  SpringTypeName: OrderDirection
}

input SpringTypeUpdateInput {
  SpringTypeID: Int
  SpringTypeName: String
  frontConfigs: SpringTypeConfigRelateToOneForUpdateInput
  rearConfigs: SpringTypeConfigRelateToOneForUpdateInput
}

input SpringTypeConfigRelateToOneForUpdateInput {
  create: SpringTypeConfigCreateInput
  connect: SpringTypeConfigWhereUniqueInput
  disconnect: Boolean
}

input SpringTypeUpdateArgs {
  where: SpringTypeWhereUniqueInput!
  data: SpringTypeUpdateInput!
}

input SpringTypeCreateInput {
  SpringTypeID: Int
  SpringTypeName: String
  frontConfigs: SpringTypeConfigRelateToOneForCreateInput
  rearConfigs: SpringTypeConfigRelateToOneForCreateInput
}

input SpringTypeConfigRelateToOneForCreateInput {
  create: SpringTypeConfigCreateInput
  connect: SpringTypeConfigWhereUniqueInput
}

type SpringTypeConfig {
  id: ID!
  SpringTypeConfigID: Int
  FrontSpringTypeID: SpringType
  RearSpringTypeID: SpringType
}

input SpringTypeConfigWhereUniqueInput {
  id: ID
  SpringTypeConfigID: Int
  FrontSpringTypeID: SpringTypeWhereUniqueInput
  RearSpringTypeID: SpringTypeWhereUniqueInput
}

input SpringTypeConfigWhereInput {
  AND: [SpringTypeConfigWhereInput!]
  OR: [SpringTypeConfigWhereInput!]
  NOT: [SpringTypeConfigWhereInput!]
  id: IDFilter
  SpringTypeConfigID: IntFilter
  FrontSpringTypeID: SpringTypeWhereInput
  RearSpringTypeID: SpringTypeWhereInput
}

input SpringTypeConfigOrderByInput {
  id: OrderDirection
  SpringTypeConfigID: OrderDirection
}

input SpringTypeConfigUpdateInput {
  SpringTypeConfigID: Int
  FrontSpringTypeID: SpringTypeRelateToOneForUpdateInput
  RearSpringTypeID: SpringTypeRelateToOneForUpdateInput
}

input SpringTypeRelateToOneForUpdateInput {
  create: SpringTypeCreateInput
  connect: SpringTypeWhereUniqueInput
  disconnect: Boolean
}

input SpringTypeConfigUpdateArgs {
  where: SpringTypeConfigWhereUniqueInput!
  data: SpringTypeConfigUpdateInput!
}

input SpringTypeConfigCreateInput {
  SpringTypeConfigID: Int
  FrontSpringTypeID: SpringTypeRelateToOneForCreateInput
  RearSpringTypeID: SpringTypeRelateToOneForCreateInput
}

input SpringTypeRelateToOneForCreateInput {
  create: SpringTypeCreateInput
  connect: SpringTypeWhereUniqueInput
}

type SteeringConfig {
  id: ID!
  SteeringConfigID: Int
  SteeringType: SteeringType
  SteeringSystem: SteeringSystem
}

input SteeringConfigWhereUniqueInput {
  id: ID
  SteeringConfigID: Int
}

input SteeringConfigWhereInput {
  AND: [SteeringConfigWhereInput!]
  OR: [SteeringConfigWhereInput!]
  NOT: [SteeringConfigWhereInput!]
  id: IDFilter
  SteeringConfigID: IntFilter
  SteeringType: SteeringTypeWhereInput
  SteeringSystem: SteeringSystemWhereInput
}

input SteeringConfigOrderByInput {
  id: OrderDirection
  SteeringConfigID: OrderDirection
}

input SteeringConfigUpdateInput {
  SteeringConfigID: Int
  SteeringType: SteeringTypeRelateToOneForUpdateInput
  SteeringSystem: SteeringSystemRelateToOneForUpdateInput
}

input SteeringTypeRelateToOneForUpdateInput {
  create: SteeringTypeCreateInput
  connect: SteeringTypeWhereUniqueInput
  disconnect: Boolean
}

input SteeringSystemRelateToOneForUpdateInput {
  create: SteeringSystemCreateInput
  connect: SteeringSystemWhereUniqueInput
  disconnect: Boolean
}

input SteeringConfigUpdateArgs {
  where: SteeringConfigWhereUniqueInput!
  data: SteeringConfigUpdateInput!
}

input SteeringConfigCreateInput {
  SteeringConfigID: Int
  SteeringType: SteeringTypeRelateToOneForCreateInput
  SteeringSystem: SteeringSystemRelateToOneForCreateInput
}

input SteeringTypeRelateToOneForCreateInput {
  create: SteeringTypeCreateInput
  connect: SteeringTypeWhereUniqueInput
}

input SteeringSystemRelateToOneForCreateInput {
  create: SteeringSystemCreateInput
  connect: SteeringSystemWhereUniqueInput
}

type SteeringSystem {
  id: ID!
  SteeringSystemID: Int
  SteeringSystemName: String
  steeringConfigs(where: SteeringConfigWhereInput! = {}, orderBy: [SteeringConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringConfigWhereUniqueInput): [SteeringConfig!]
  steeringConfigsCount(where: SteeringConfigWhereInput! = {}): Int
}

input SteeringSystemWhereUniqueInput {
  id: ID
  SteeringSystemID: Int
}

input SteeringSystemWhereInput {
  AND: [SteeringSystemWhereInput!]
  OR: [SteeringSystemWhereInput!]
  NOT: [SteeringSystemWhereInput!]
  id: IDFilter
  SteeringSystemID: IntFilter
  SteeringSystemName: StringFilter
  steeringConfigs: SteeringConfigManyRelationFilter
}

input SteeringConfigManyRelationFilter {
  every: SteeringConfigWhereInput
  some: SteeringConfigWhereInput
  none: SteeringConfigWhereInput
}

input SteeringSystemOrderByInput {
  id: OrderDirection
  SteeringSystemID: OrderDirection
  SteeringSystemName: OrderDirection
}

input SteeringSystemUpdateInput {
  SteeringSystemID: Int
  SteeringSystemName: String
  steeringConfigs: SteeringConfigRelateToManyForUpdateInput
}

input SteeringConfigRelateToManyForUpdateInput {
  disconnect: [SteeringConfigWhereUniqueInput!]
  set: [SteeringConfigWhereUniqueInput!]
  create: [SteeringConfigCreateInput!]
  connect: [SteeringConfigWhereUniqueInput!]
}

input SteeringSystemUpdateArgs {
  where: SteeringSystemWhereUniqueInput!
  data: SteeringSystemUpdateInput!
}

input SteeringSystemCreateInput {
  SteeringSystemID: Int
  SteeringSystemName: String
  steeringConfigs: SteeringConfigRelateToManyForCreateInput
}

input SteeringConfigRelateToManyForCreateInput {
  create: [SteeringConfigCreateInput!]
  connect: [SteeringConfigWhereUniqueInput!]
}

type SteeringType {
  id: ID!
  SteeringTypeID: Int
  SteeringTypeName: String
  steeringConfigs(where: SteeringConfigWhereInput! = {}, orderBy: [SteeringConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringConfigWhereUniqueInput): [SteeringConfig!]
  steeringConfigsCount(where: SteeringConfigWhereInput! = {}): Int
}

input SteeringTypeWhereUniqueInput {
  id: ID
  SteeringTypeID: Int
}

input SteeringTypeWhereInput {
  AND: [SteeringTypeWhereInput!]
  OR: [SteeringTypeWhereInput!]
  NOT: [SteeringTypeWhereInput!]
  id: IDFilter
  SteeringTypeID: IntFilter
  SteeringTypeName: StringFilter
  steeringConfigs: SteeringConfigManyRelationFilter
}

input SteeringTypeOrderByInput {
  id: OrderDirection
  SteeringTypeID: OrderDirection
  SteeringTypeName: OrderDirection
}

input SteeringTypeUpdateInput {
  SteeringTypeID: Int
  SteeringTypeName: String
  steeringConfigs: SteeringConfigRelateToManyForUpdateInput
}

input SteeringTypeUpdateArgs {
  where: SteeringTypeWhereUniqueInput!
  data: SteeringTypeUpdateInput!
}

input SteeringTypeCreateInput {
  SteeringTypeID: Int
  SteeringTypeName: String
  steeringConfigs: SteeringConfigRelateToManyForCreateInput
}

type SubModel {
  id: ID!
  SubModelID: Int
  SubModelName: String
}

input SubModelWhereUniqueInput {
  id: ID
  SubModelID: Int
}

input SubModelWhereInput {
  AND: [SubModelWhereInput!]
  OR: [SubModelWhereInput!]
  NOT: [SubModelWhereInput!]
  id: IDFilter
  SubModelID: IntFilter
  SubModelName: StringFilter
}

input SubModelOrderByInput {
  id: OrderDirection
  SubModelID: OrderDirection
  SubModelName: OrderDirection
}

input SubModelUpdateInput {
  SubModelID: Int
  SubModelName: String
}

input SubModelUpdateArgs {
  where: SubModelWhereUniqueInput!
  data: SubModelUpdateInput!
}

input SubModelCreateInput {
  SubModelID: Int
  SubModelName: String
}

type Transmission {
  id: ID!
  TransmissionID: Int
  TransmissionBaseID: Int
  TransmissionBase: TransmissionBase
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: TransmissionMfrCode
  TransmissionElecControlledID: Int
  TransmissionElecControlled: ElecControlled
  TransmissionMfrID: Int
  TransmissionMfr: Mfr
}

input TransmissionWhereUniqueInput {
  id: ID
  TransmissionID: Int
}

input TransmissionWhereInput {
  AND: [TransmissionWhereInput!]
  OR: [TransmissionWhereInput!]
  NOT: [TransmissionWhereInput!]
  id: IDFilter
  TransmissionID: IntFilter
  TransmissionBaseID: IntNullableFilter
  TransmissionBase: TransmissionBaseWhereInput
  TransmissionMfrCodeID: IntNullableFilter
  TransmissionMfrCode: TransmissionMfrCodeWhereInput
  TransmissionElecControlledID: IntNullableFilter
  TransmissionElecControlled: ElecControlledWhereInput
  TransmissionMfrID: IntNullableFilter
  TransmissionMfr: MfrWhereInput
}

input TransmissionOrderByInput {
  id: OrderDirection
  TransmissionID: OrderDirection
  TransmissionBaseID: OrderDirection
  TransmissionMfrCodeID: OrderDirection
  TransmissionElecControlledID: OrderDirection
  TransmissionMfrID: OrderDirection
}

input TransmissionUpdateInput {
  TransmissionID: Int
  TransmissionBaseID: Int
  TransmissionBase: TransmissionBaseRelateToOneForUpdateInput
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: TransmissionMfrCodeRelateToOneForUpdateInput
  TransmissionElecControlledID: Int
  TransmissionElecControlled: ElecControlledRelateToOneForUpdateInput
  TransmissionMfrID: Int
  TransmissionMfr: MfrRelateToOneForUpdateInput
}

input TransmissionBaseRelateToOneForUpdateInput {
  create: TransmissionBaseCreateInput
  connect: TransmissionBaseWhereUniqueInput
  disconnect: Boolean
}

input TransmissionMfrCodeRelateToOneForUpdateInput {
  create: TransmissionMfrCodeCreateInput
  connect: TransmissionMfrCodeWhereUniqueInput
  disconnect: Boolean
}

input ElecControlledRelateToOneForUpdateInput {
  create: ElecControlledCreateInput
  connect: ElecControlledWhereUniqueInput
  disconnect: Boolean
}

input TransmissionUpdateArgs {
  where: TransmissionWhereUniqueInput!
  data: TransmissionUpdateInput!
}

input TransmissionCreateInput {
  TransmissionID: Int
  TransmissionBaseID: Int
  TransmissionBase: TransmissionBaseRelateToOneForCreateInput
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: TransmissionMfrCodeRelateToOneForCreateInput
  TransmissionElecControlledID: Int
  TransmissionElecControlled: ElecControlledRelateToOneForCreateInput
  TransmissionMfrID: Int
  TransmissionMfr: MfrRelateToOneForCreateInput
}

input TransmissionBaseRelateToOneForCreateInput {
  create: TransmissionBaseCreateInput
  connect: TransmissionBaseWhereUniqueInput
}

input TransmissionMfrCodeRelateToOneForCreateInput {
  create: TransmissionMfrCodeCreateInput
  connect: TransmissionMfrCodeWhereUniqueInput
}

input ElecControlledRelateToOneForCreateInput {
  create: ElecControlledCreateInput
  connect: ElecControlledWhereUniqueInput
}

type TransmissionBase {
  id: ID!
  TransmissionBaseID: Int
  TransmissionType: TransmissionType
  TransmissionNumSpeeds: TransmissionNumSpeed
  TransmissionControlType: TransmissionControlType
  transmissions(where: TransmissionWhereInput! = {}, orderBy: [TransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionWhereUniqueInput): [Transmission!]
  transmissionsCount(where: TransmissionWhereInput! = {}): Int
}

input TransmissionBaseWhereUniqueInput {
  id: ID
}

input TransmissionBaseWhereInput {
  AND: [TransmissionBaseWhereInput!]
  OR: [TransmissionBaseWhereInput!]
  NOT: [TransmissionBaseWhereInput!]
  id: IDFilter
  TransmissionBaseID: IntFilter
  TransmissionType: TransmissionTypeWhereInput
  TransmissionNumSpeeds: TransmissionNumSpeedWhereInput
  TransmissionControlType: TransmissionControlTypeWhereInput
  transmissions: TransmissionManyRelationFilter
}

input TransmissionBaseOrderByInput {
  id: OrderDirection
  TransmissionBaseID: OrderDirection
}

input TransmissionBaseUpdateInput {
  TransmissionBaseID: Int
  TransmissionType: TransmissionTypeRelateToOneForUpdateInput
  TransmissionNumSpeeds: TransmissionNumSpeedRelateToOneForUpdateInput
  TransmissionControlType: TransmissionControlTypeRelateToOneForUpdateInput
  transmissions: TransmissionRelateToManyForUpdateInput
}

input TransmissionTypeRelateToOneForUpdateInput {
  create: TransmissionTypeCreateInput
  connect: TransmissionTypeWhereUniqueInput
  disconnect: Boolean
}

input TransmissionNumSpeedRelateToOneForUpdateInput {
  create: TransmissionNumSpeedCreateInput
  connect: TransmissionNumSpeedWhereUniqueInput
  disconnect: Boolean
}

input TransmissionControlTypeRelateToOneForUpdateInput {
  create: TransmissionControlTypeCreateInput
  connect: TransmissionControlTypeWhereUniqueInput
  disconnect: Boolean
}

input TransmissionBaseUpdateArgs {
  where: TransmissionBaseWhereUniqueInput!
  data: TransmissionBaseUpdateInput!
}

input TransmissionBaseCreateInput {
  TransmissionBaseID: Int
  TransmissionType: TransmissionTypeRelateToOneForCreateInput
  TransmissionNumSpeeds: TransmissionNumSpeedRelateToOneForCreateInput
  TransmissionControlType: TransmissionControlTypeRelateToOneForCreateInput
  transmissions: TransmissionRelateToManyForCreateInput
}

input TransmissionTypeRelateToOneForCreateInput {
  create: TransmissionTypeCreateInput
  connect: TransmissionTypeWhereUniqueInput
}

input TransmissionNumSpeedRelateToOneForCreateInput {
  create: TransmissionNumSpeedCreateInput
  connect: TransmissionNumSpeedWhereUniqueInput
}

input TransmissionControlTypeRelateToOneForCreateInput {
  create: TransmissionControlTypeCreateInput
  connect: TransmissionControlTypeWhereUniqueInput
}

type TransmissionControlType {
  id: ID!
  TransmissionControlTypeID: Int
  TransmissionControlTypeName: String
  transmissionBases(where: TransmissionBaseWhereInput! = {}, orderBy: [TransmissionBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionBaseWhereUniqueInput): [TransmissionBase!]
  transmissionBasesCount(where: TransmissionBaseWhereInput! = {}): Int
}

input TransmissionControlTypeWhereUniqueInput {
  id: ID
  TransmissionControlTypeID: Int
}

input TransmissionControlTypeWhereInput {
  AND: [TransmissionControlTypeWhereInput!]
  OR: [TransmissionControlTypeWhereInput!]
  NOT: [TransmissionControlTypeWhereInput!]
  id: IDFilter
  TransmissionControlTypeID: IntFilter
  TransmissionControlTypeName: StringFilter
  transmissionBases: TransmissionBaseManyRelationFilter
}

input TransmissionBaseManyRelationFilter {
  every: TransmissionBaseWhereInput
  some: TransmissionBaseWhereInput
  none: TransmissionBaseWhereInput
}

input TransmissionControlTypeOrderByInput {
  id: OrderDirection
  TransmissionControlTypeID: OrderDirection
  TransmissionControlTypeName: OrderDirection
}

input TransmissionControlTypeUpdateInput {
  TransmissionControlTypeID: Int
  TransmissionControlTypeName: String
  transmissionBases: TransmissionBaseRelateToManyForUpdateInput
}

input TransmissionBaseRelateToManyForUpdateInput {
  disconnect: [TransmissionBaseWhereUniqueInput!]
  set: [TransmissionBaseWhereUniqueInput!]
  create: [TransmissionBaseCreateInput!]
  connect: [TransmissionBaseWhereUniqueInput!]
}

input TransmissionControlTypeUpdateArgs {
  where: TransmissionControlTypeWhereUniqueInput!
  data: TransmissionControlTypeUpdateInput!
}

input TransmissionControlTypeCreateInput {
  TransmissionControlTypeID: Int
  TransmissionControlTypeName: String
  transmissionBases: TransmissionBaseRelateToManyForCreateInput
}

input TransmissionBaseRelateToManyForCreateInput {
  create: [TransmissionBaseCreateInput!]
  connect: [TransmissionBaseWhereUniqueInput!]
}

type TransmissionMfrCode {
  id: ID!
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: String
  transmissions(where: TransmissionWhereInput! = {}, orderBy: [TransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionWhereUniqueInput): [Transmission!]
  transmissionsCount(where: TransmissionWhereInput! = {}): Int
}

input TransmissionMfrCodeWhereUniqueInput {
  id: ID
  TransmissionMfrCodeID: Int
}

input TransmissionMfrCodeWhereInput {
  AND: [TransmissionMfrCodeWhereInput!]
  OR: [TransmissionMfrCodeWhereInput!]
  NOT: [TransmissionMfrCodeWhereInput!]
  id: IDFilter
  TransmissionMfrCodeID: IntFilter
  TransmissionMfrCode: StringFilter
  transmissions: TransmissionManyRelationFilter
}

input TransmissionMfrCodeOrderByInput {
  id: OrderDirection
  TransmissionMfrCodeID: OrderDirection
  TransmissionMfrCode: OrderDirection
}

input TransmissionMfrCodeUpdateInput {
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: String
  transmissions: TransmissionRelateToManyForUpdateInput
}

input TransmissionMfrCodeUpdateArgs {
  where: TransmissionMfrCodeWhereUniqueInput!
  data: TransmissionMfrCodeUpdateInput!
}

input TransmissionMfrCodeCreateInput {
  TransmissionMfrCodeID: Int
  TransmissionMfrCode: String
  transmissions: TransmissionRelateToManyForCreateInput
}

type TransmissionNumSpeed {
  id: ID!
  TransmissionNumSpeedsID: Int
  TransmissionNumSpeeds: String
  transmissionBases(where: TransmissionBaseWhereInput! = {}, orderBy: [TransmissionBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionBaseWhereUniqueInput): [TransmissionBase!]
  transmissionBasesCount(where: TransmissionBaseWhereInput! = {}): Int
}

input TransmissionNumSpeedWhereUniqueInput {
  id: ID
  TransmissionNumSpeedsID: Int
}

input TransmissionNumSpeedWhereInput {
  AND: [TransmissionNumSpeedWhereInput!]
  OR: [TransmissionNumSpeedWhereInput!]
  NOT: [TransmissionNumSpeedWhereInput!]
  id: IDFilter
  TransmissionNumSpeedsID: IntFilter
  TransmissionNumSpeeds: StringFilter
  transmissionBases: TransmissionBaseManyRelationFilter
}

input TransmissionNumSpeedOrderByInput {
  id: OrderDirection
  TransmissionNumSpeedsID: OrderDirection
  TransmissionNumSpeeds: OrderDirection
}

input TransmissionNumSpeedUpdateInput {
  TransmissionNumSpeedsID: Int
  TransmissionNumSpeeds: String
  transmissionBases: TransmissionBaseRelateToManyForUpdateInput
}

input TransmissionNumSpeedUpdateArgs {
  where: TransmissionNumSpeedWhereUniqueInput!
  data: TransmissionNumSpeedUpdateInput!
}

input TransmissionNumSpeedCreateInput {
  TransmissionNumSpeedsID: Int
  TransmissionNumSpeeds: String
  transmissionBases: TransmissionBaseRelateToManyForCreateInput
}

type TransmissionType {
  id: ID!
  TransmissionTypeID: Int
  TransmissionTypeName: String
  transmissionBases(where: TransmissionBaseWhereInput! = {}, orderBy: [TransmissionBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionBaseWhereUniqueInput): [TransmissionBase!]
  transmissionBasesCount(where: TransmissionBaseWhereInput! = {}): Int
}

input TransmissionTypeWhereUniqueInput {
  id: ID
  TransmissionTypeID: Int
}

input TransmissionTypeWhereInput {
  AND: [TransmissionTypeWhereInput!]
  OR: [TransmissionTypeWhereInput!]
  NOT: [TransmissionTypeWhereInput!]
  id: IDFilter
  TransmissionTypeID: IntFilter
  TransmissionTypeName: StringFilter
  transmissionBases: TransmissionBaseManyRelationFilter
}

input TransmissionTypeOrderByInput {
  id: OrderDirection
  TransmissionTypeID: OrderDirection
  TransmissionTypeName: OrderDirection
}

input TransmissionTypeUpdateInput {
  TransmissionTypeID: Int
  TransmissionTypeName: String
  transmissionBases: TransmissionBaseRelateToManyForUpdateInput
}

input TransmissionTypeUpdateArgs {
  where: TransmissionTypeWhereUniqueInput!
  data: TransmissionTypeUpdateInput!
}

input TransmissionTypeCreateInput {
  TransmissionTypeID: Int
  TransmissionTypeName: String
  transmissionBases: TransmissionBaseRelateToManyForCreateInput
}

type Valve {
  id: ID!
  ValvesID: Int
  Valves: Int
}

input ValveWhereUniqueInput {
  id: ID
  ValvesID: Int
}

input ValveWhereInput {
  AND: [ValveWhereInput!]
  OR: [ValveWhereInput!]
  NOT: [ValveWhereInput!]
  id: IDFilter
  ValvesID: IntFilter
  Valves: IntFilter
}

input ValveOrderByInput {
  id: OrderDirection
  ValvesID: OrderDirection
  Valves: OrderDirection
}

input ValveUpdateInput {
  ValvesID: Int
  Valves: Int
}

input ValveUpdateArgs {
  where: ValveWhereUniqueInput!
  data: ValveUpdateInput!
}

input ValveCreateInput {
  ValvesID: Int
  Valves: Int
}

type VCdbChange {
  id: ID!
  ChangeID: Int
  ChangeRequestID: Int
  TableName: String
  VCdbRecordID: Int
  ChangeType: String
  ChangeDate: DateTime
}

input VCdbChangeWhereUniqueInput {
  id: ID
  ChangeID: Int
}

input VCdbChangeWhereInput {
  AND: [VCdbChangeWhereInput!]
  OR: [VCdbChangeWhereInput!]
  NOT: [VCdbChangeWhereInput!]
  id: IDFilter
  ChangeID: IntFilter
  ChangeRequestID: IntNullableFilter
  TableName: StringFilter
  VCdbRecordID: IntNullableFilter
  ChangeType: StringFilter
  ChangeDate: DateTimeNullableFilter
}

input VCdbChangeOrderByInput {
  id: OrderDirection
  ChangeID: OrderDirection
  ChangeRequestID: OrderDirection
  TableName: OrderDirection
  VCdbRecordID: OrderDirection
  ChangeType: OrderDirection
  ChangeDate: OrderDirection
}

input VCdbChangeUpdateInput {
  ChangeID: Int
  ChangeRequestID: Int
  TableName: String
  VCdbRecordID: Int
  ChangeType: String
  ChangeDate: DateTime
}

input VCdbChangeUpdateArgs {
  where: VCdbChangeWhereUniqueInput!
  data: VCdbChangeUpdateInput!
}

input VCdbChangeCreateInput {
  ChangeID: Int
  ChangeRequestID: Int
  TableName: String
  VCdbRecordID: Int
  ChangeType: String
  ChangeDate: DateTime
}

type Vehicle {
  id: ID!
  VehicleID: Int
  BaseVehicleID: BaseVehicle
  TransmissionID: Transmission
  DriveTypeID: DriveType
  BodyNumDoorsID: BodyNumDoors
  BodyTypeID: BodyType
  BrakeSystemID: BrakeSystem
  RegionID: Region
  BedLengthID: BedLength
  BedTypeID: BedType
  WheelBaseID: WheelBase
  MfrBodyCodeID: MfrBodyCode
  SteeringSystemID: SteeringSystem
  SteeringTypeID: SteeringType
  BrakeTypeID: BrakeType
  SpringTypeID: SpringType
  FuelTypeID: FuelType
  EngineBaseID: EngineBase
  TransmissionBaseID: TransmissionBase
  Note: String
}

input VehicleWhereUniqueInput {
  id: ID
  VehicleID: Int
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  id: IDFilter
  VehicleID: IntFilter
  BaseVehicleID: BaseVehicleWhereInput
  TransmissionID: TransmissionWhereInput
  DriveTypeID: DriveTypeWhereInput
  BodyNumDoorsID: BodyNumDoorsWhereInput
  BodyTypeID: BodyTypeWhereInput
  BrakeSystemID: BrakeSystemWhereInput
  RegionID: RegionWhereInput
  BedLengthID: BedLengthWhereInput
  BedTypeID: BedTypeWhereInput
  WheelBaseID: WheelBaseWhereInput
  MfrBodyCodeID: MfrBodyCodeWhereInput
  SteeringSystemID: SteeringSystemWhereInput
  SteeringTypeID: SteeringTypeWhereInput
  BrakeTypeID: BrakeTypeWhereInput
  SpringTypeID: SpringTypeWhereInput
  FuelTypeID: FuelTypeWhereInput
  EngineBaseID: EngineBaseWhereInput
  TransmissionBaseID: TransmissionBaseWhereInput
  Note: StringFilter
}

input VehicleOrderByInput {
  id: OrderDirection
  VehicleID: OrderDirection
  Note: OrderDirection
}

input VehicleUpdateInput {
  VehicleID: Int
  BaseVehicleID: BaseVehicleRelateToOneForUpdateInput
  TransmissionID: TransmissionRelateToOneForUpdateInput
  DriveTypeID: DriveTypeRelateToOneForUpdateInput
  BodyNumDoorsID: BodyNumDoorsRelateToOneForUpdateInput
  BodyTypeID: BodyTypeRelateToOneForUpdateInput
  BrakeSystemID: BrakeSystemRelateToOneForUpdateInput
  RegionID: RegionRelateToOneForUpdateInput
  BedLengthID: BedLengthRelateToOneForUpdateInput
  BedTypeID: BedTypeRelateToOneForUpdateInput
  WheelBaseID: WheelBaseRelateToOneForUpdateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForUpdateInput
  SteeringSystemID: SteeringSystemRelateToOneForUpdateInput
  SteeringTypeID: SteeringTypeRelateToOneForUpdateInput
  BrakeTypeID: BrakeTypeRelateToOneForUpdateInput
  SpringTypeID: SpringTypeRelateToOneForUpdateInput
  FuelTypeID: FuelTypeRelateToOneForUpdateInput
  EngineBaseID: EngineBaseRelateToOneForUpdateInput
  TransmissionBaseID: TransmissionBaseRelateToOneForUpdateInput
  Note: String
}

input TransmissionRelateToOneForUpdateInput {
  create: TransmissionCreateInput
  connect: TransmissionWhereUniqueInput
  disconnect: Boolean
}

input DriveTypeRelateToOneForUpdateInput {
  create: DriveTypeCreateInput
  connect: DriveTypeWhereUniqueInput
  disconnect: Boolean
}

input WheelBaseRelateToOneForUpdateInput {
  create: WheelBaseCreateInput
  connect: WheelBaseWhereUniqueInput
  disconnect: Boolean
}

input MfrBodyCodeRelateToOneForUpdateInput {
  create: MfrBodyCodeCreateInput
  connect: MfrBodyCodeWhereUniqueInput
  disconnect: Boolean
}

input FuelTypeRelateToOneForUpdateInput {
  create: FuelTypeCreateInput
  connect: FuelTypeWhereUniqueInput
  disconnect: Boolean
}

input EngineBaseRelateToOneForUpdateInput {
  create: EngineBaseCreateInput
  connect: EngineBaseWhereUniqueInput
  disconnect: Boolean
}

input VehicleUpdateArgs {
  where: VehicleWhereUniqueInput!
  data: VehicleUpdateInput!
}

input VehicleCreateInput {
  VehicleID: Int
  BaseVehicleID: BaseVehicleRelateToOneForCreateInput
  TransmissionID: TransmissionRelateToOneForCreateInput
  DriveTypeID: DriveTypeRelateToOneForCreateInput
  BodyNumDoorsID: BodyNumDoorsRelateToOneForCreateInput
  BodyTypeID: BodyTypeRelateToOneForCreateInput
  BrakeSystemID: BrakeSystemRelateToOneForCreateInput
  RegionID: RegionRelateToOneForCreateInput
  BedLengthID: BedLengthRelateToOneForCreateInput
  BedTypeID: BedTypeRelateToOneForCreateInput
  WheelBaseID: WheelBaseRelateToOneForCreateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForCreateInput
  SteeringSystemID: SteeringSystemRelateToOneForCreateInput
  SteeringTypeID: SteeringTypeRelateToOneForCreateInput
  BrakeTypeID: BrakeTypeRelateToOneForCreateInput
  SpringTypeID: SpringTypeRelateToOneForCreateInput
  FuelTypeID: FuelTypeRelateToOneForCreateInput
  EngineBaseID: EngineBaseRelateToOneForCreateInput
  TransmissionBaseID: TransmissionBaseRelateToOneForCreateInput
  Note: String
}

input TransmissionRelateToOneForCreateInput {
  create: TransmissionCreateInput
  connect: TransmissionWhereUniqueInput
}

input DriveTypeRelateToOneForCreateInput {
  create: DriveTypeCreateInput
  connect: DriveTypeWhereUniqueInput
}

input WheelBaseRelateToOneForCreateInput {
  create: WheelBaseCreateInput
  connect: WheelBaseWhereUniqueInput
}

input MfrBodyCodeRelateToOneForCreateInput {
  create: MfrBodyCodeCreateInput
  connect: MfrBodyCodeWhereUniqueInput
}

input FuelTypeRelateToOneForCreateInput {
  create: FuelTypeCreateInput
  connect: FuelTypeWhereUniqueInput
}

input EngineBaseRelateToOneForCreateInput {
  create: EngineBaseCreateInput
  connect: EngineBaseWhereUniqueInput
}

type VehicleToBedConfig {
  id: ID!
  VehicleToBedConfigID: Int
  VehicleID: Vehicle
  BedConfigID: BedConfig
  Source: String
}

input VehicleToBedConfigWhereUniqueInput {
  id: ID
  VehicleToBedConfigID: Int
}

input VehicleToBedConfigWhereInput {
  AND: [VehicleToBedConfigWhereInput!]
  OR: [VehicleToBedConfigWhereInput!]
  NOT: [VehicleToBedConfigWhereInput!]
  id: IDFilter
  VehicleToBedConfigID: IntFilter
  VehicleID: VehicleWhereInput
  BedConfigID: BedConfigWhereInput
  Source: StringFilter
}

input VehicleToBedConfigOrderByInput {
  id: OrderDirection
  VehicleToBedConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToBedConfigUpdateInput {
  VehicleToBedConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  BedConfigID: BedConfigRelateToOneForUpdateInput
  Source: String
}

input VehicleRelateToOneForUpdateInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
  disconnect: Boolean
}

input BedConfigRelateToOneForUpdateInput {
  create: BedConfigCreateInput
  connect: BedConfigWhereUniqueInput
  disconnect: Boolean
}

input VehicleToBedConfigUpdateArgs {
  where: VehicleToBedConfigWhereUniqueInput!
  data: VehicleToBedConfigUpdateInput!
}

input VehicleToBedConfigCreateInput {
  VehicleToBedConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  BedConfigID: BedConfigRelateToOneForCreateInput
  Source: String
}

input VehicleRelateToOneForCreateInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
}

input BedConfigRelateToOneForCreateInput {
  create: BedConfigCreateInput
  connect: BedConfigWhereUniqueInput
}

type VehicleToBodyConfig {
  id: ID!
  VehicleToBodyConfigID: Int
  VehicleID: Vehicle
  WheelBaseID: WheelBase
  BedConfigID: BedConfig
  BodyStyleConfigID: BodyStyleConfig
  MfrBodyCodeID: MfrBodyCode
  Source: String
}

input VehicleToBodyConfigWhereUniqueInput {
  id: ID
  VehicleToBodyConfigID: Int
}

input VehicleToBodyConfigWhereInput {
  AND: [VehicleToBodyConfigWhereInput!]
  OR: [VehicleToBodyConfigWhereInput!]
  NOT: [VehicleToBodyConfigWhereInput!]
  id: IDFilter
  VehicleToBodyConfigID: IntFilter
  VehicleID: VehicleWhereInput
  WheelBaseID: WheelBaseWhereInput
  BedConfigID: BedConfigWhereInput
  BodyStyleConfigID: BodyStyleConfigWhereInput
  MfrBodyCodeID: MfrBodyCodeWhereInput
  Source: StringFilter
}

input VehicleToBodyConfigOrderByInput {
  id: OrderDirection
  VehicleToBodyConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToBodyConfigUpdateInput {
  VehicleToBodyConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  WheelBaseID: WheelBaseRelateToOneForUpdateInput
  BedConfigID: BedConfigRelateToOneForUpdateInput
  BodyStyleConfigID: BodyStyleConfigRelateToOneForUpdateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForUpdateInput
  Source: String
}

input BodyStyleConfigRelateToOneForUpdateInput {
  create: BodyStyleConfigCreateInput
  connect: BodyStyleConfigWhereUniqueInput
  disconnect: Boolean
}

input VehicleToBodyConfigUpdateArgs {
  where: VehicleToBodyConfigWhereUniqueInput!
  data: VehicleToBodyConfigUpdateInput!
}

input VehicleToBodyConfigCreateInput {
  VehicleToBodyConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  WheelBaseID: WheelBaseRelateToOneForCreateInput
  BedConfigID: BedConfigRelateToOneForCreateInput
  BodyStyleConfigID: BodyStyleConfigRelateToOneForCreateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForCreateInput
  Source: String
}

input BodyStyleConfigRelateToOneForCreateInput {
  create: BodyStyleConfigCreateInput
  connect: BodyStyleConfigWhereUniqueInput
}

type VehicleToBodyStyleConfig {
  id: ID!
  VehicleToBodyStyleConfigID: Int
  VehicleID: Vehicle
  BodyStyleConfigID: BodyStyleConfig
  Source: String
}

input VehicleToBodyStyleConfigWhereUniqueInput {
  id: ID
  VehicleToBodyStyleConfigID: Int
}

input VehicleToBodyStyleConfigWhereInput {
  AND: [VehicleToBodyStyleConfigWhereInput!]
  OR: [VehicleToBodyStyleConfigWhereInput!]
  NOT: [VehicleToBodyStyleConfigWhereInput!]
  id: IDFilter
  VehicleToBodyStyleConfigID: IntFilter
  VehicleID: VehicleWhereInput
  BodyStyleConfigID: BodyStyleConfigWhereInput
  Source: StringFilter
}

input VehicleToBodyStyleConfigOrderByInput {
  id: OrderDirection
  VehicleToBodyStyleConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToBodyStyleConfigUpdateInput {
  VehicleToBodyStyleConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  BodyStyleConfigID: BodyStyleConfigRelateToOneForUpdateInput
  Source: String
}

input VehicleToBodyStyleConfigUpdateArgs {
  where: VehicleToBodyStyleConfigWhereUniqueInput!
  data: VehicleToBodyStyleConfigUpdateInput!
}

input VehicleToBodyStyleConfigCreateInput {
  VehicleToBodyStyleConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  BodyStyleConfigID: BodyStyleConfigRelateToOneForCreateInput
  Source: String
}

type VehicleToBrakeConfig {
  id: ID!
  VehicleToBrakeConfigID: Int
  VehicleID: Vehicle
  BrakeConfigID: BrakeConfig
  Source: String
}

input VehicleToBrakeConfigWhereUniqueInput {
  id: ID
  VehicleToBrakeConfigID: Int
}

input VehicleToBrakeConfigWhereInput {
  AND: [VehicleToBrakeConfigWhereInput!]
  OR: [VehicleToBrakeConfigWhereInput!]
  NOT: [VehicleToBrakeConfigWhereInput!]
  id: IDFilter
  VehicleToBrakeConfigID: IntFilter
  VehicleID: VehicleWhereInput
  BrakeConfigID: BrakeConfigWhereInput
  Source: StringFilter
}

input VehicleToBrakeConfigOrderByInput {
  id: OrderDirection
  VehicleToBrakeConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToBrakeConfigUpdateInput {
  VehicleToBrakeConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  BrakeConfigID: BrakeConfigRelateToOneForUpdateInput
  Source: String
}

input BrakeConfigRelateToOneForUpdateInput {
  create: BrakeConfigCreateInput
  connect: BrakeConfigWhereUniqueInput
  disconnect: Boolean
}

input VehicleToBrakeConfigUpdateArgs {
  where: VehicleToBrakeConfigWhereUniqueInput!
  data: VehicleToBrakeConfigUpdateInput!
}

input VehicleToBrakeConfigCreateInput {
  VehicleToBrakeConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  BrakeConfigID: BrakeConfigRelateToOneForCreateInput
  Source: String
}

input BrakeConfigRelateToOneForCreateInput {
  create: BrakeConfigCreateInput
  connect: BrakeConfigWhereUniqueInput
}

type VehicleToClass {
  id: ID!
  VehicleToClassID: Int
  VehicleID: Vehicle
  ClassID: Class
  Source: String
}

input VehicleToClassWhereUniqueInput {
  id: ID
  VehicleToClassID: Int
}

input VehicleToClassWhereInput {
  AND: [VehicleToClassWhereInput!]
  OR: [VehicleToClassWhereInput!]
  NOT: [VehicleToClassWhereInput!]
  id: IDFilter
  VehicleToClassID: IntFilter
  VehicleID: VehicleWhereInput
  ClassID: ClassWhereInput
  Source: StringFilter
}

input VehicleToClassOrderByInput {
  id: OrderDirection
  VehicleToClassID: OrderDirection
  Source: OrderDirection
}

input VehicleToClassUpdateInput {
  VehicleToClassID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  ClassID: ClassRelateToOneForUpdateInput
  Source: String
}

input ClassRelateToOneForUpdateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  disconnect: Boolean
}

input VehicleToClassUpdateArgs {
  where: VehicleToClassWhereUniqueInput!
  data: VehicleToClassUpdateInput!
}

input VehicleToClassCreateInput {
  VehicleToClassID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  ClassID: ClassRelateToOneForCreateInput
  Source: String
}

input ClassRelateToOneForCreateInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

type VehicleToDriveType {
  id: ID!
  VehicleToDriveTypeID: Int
  VehicleID: Vehicle
  DriveTypeID: DriveType
  Source: String
}

input VehicleToDriveTypeWhereUniqueInput {
  id: ID
  VehicleToDriveTypeID: Int
}

input VehicleToDriveTypeWhereInput {
  AND: [VehicleToDriveTypeWhereInput!]
  OR: [VehicleToDriveTypeWhereInput!]
  NOT: [VehicleToDriveTypeWhereInput!]
  id: IDFilter
  VehicleToDriveTypeID: IntFilter
  VehicleID: VehicleWhereInput
  DriveTypeID: DriveTypeWhereInput
  Source: StringFilter
}

input VehicleToDriveTypeOrderByInput {
  id: OrderDirection
  VehicleToDriveTypeID: OrderDirection
  Source: OrderDirection
}

input VehicleToDriveTypeUpdateInput {
  VehicleToDriveTypeID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  DriveTypeID: DriveTypeRelateToOneForUpdateInput
  Source: String
}

input VehicleToDriveTypeUpdateArgs {
  where: VehicleToDriveTypeWhereUniqueInput!
  data: VehicleToDriveTypeUpdateInput!
}

input VehicleToDriveTypeCreateInput {
  VehicleToDriveTypeID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  DriveTypeID: DriveTypeRelateToOneForCreateInput
  Source: String
}

type VehicleToEngineConfig {
  id: ID!
  VehicleToEngineConfigID: Int
  VehicleID: Vehicle
  EngineConfigID: EngineConfig2
  Source: String
}

input VehicleToEngineConfigWhereUniqueInput {
  id: ID
  VehicleToEngineConfigID: Int
}

input VehicleToEngineConfigWhereInput {
  AND: [VehicleToEngineConfigWhereInput!]
  OR: [VehicleToEngineConfigWhereInput!]
  NOT: [VehicleToEngineConfigWhereInput!]
  id: IDFilter
  VehicleToEngineConfigID: IntFilter
  VehicleID: VehicleWhereInput
  EngineConfigID: EngineConfig2WhereInput
  Source: StringFilter
}

input VehicleToEngineConfigOrderByInput {
  id: OrderDirection
  VehicleToEngineConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToEngineConfigUpdateInput {
  VehicleToEngineConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  EngineConfigID: EngineConfig2RelateToOneForUpdateInput
  Source: String
}

input VehicleToEngineConfigUpdateArgs {
  where: VehicleToEngineConfigWhereUniqueInput!
  data: VehicleToEngineConfigUpdateInput!
}

input VehicleToEngineConfigCreateInput {
  VehicleToEngineConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  EngineConfigID: EngineConfig2RelateToOneForCreateInput
  Source: String
}

type VehicleToMfrBodyCode {
  id: ID!
  VehicleToMfrBodyCodeID: Int
  VehicleID: Vehicle
  MfrBodyCodeID: MfrBodyCode
  Source: String
}

input VehicleToMfrBodyCodeWhereUniqueInput {
  id: ID
  VehicleToMfrBodyCodeID: Int
}

input VehicleToMfrBodyCodeWhereInput {
  AND: [VehicleToMfrBodyCodeWhereInput!]
  OR: [VehicleToMfrBodyCodeWhereInput!]
  NOT: [VehicleToMfrBodyCodeWhereInput!]
  id: IDFilter
  VehicleToMfrBodyCodeID: IntFilter
  VehicleID: VehicleWhereInput
  MfrBodyCodeID: MfrBodyCodeWhereInput
  Source: StringFilter
}

input VehicleToMfrBodyCodeOrderByInput {
  id: OrderDirection
  VehicleToMfrBodyCodeID: OrderDirection
  Source: OrderDirection
}

input VehicleToMfrBodyCodeUpdateInput {
  VehicleToMfrBodyCodeID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForUpdateInput
  Source: String
}

input VehicleToMfrBodyCodeUpdateArgs {
  where: VehicleToMfrBodyCodeWhereUniqueInput!
  data: VehicleToMfrBodyCodeUpdateInput!
}

input VehicleToMfrBodyCodeCreateInput {
  VehicleToMfrBodyCodeID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  MfrBodyCodeID: MfrBodyCodeRelateToOneForCreateInput
  Source: String
}

type VehicleToSpringTypeConfig {
  id: ID!
  VehicleToSpringTypeConfigID: Int
  VehicleID: Vehicle
  SpringTypeConfigID: SpringTypeConfig
  Source: String
}

input VehicleToSpringTypeConfigWhereUniqueInput {
  id: ID
  VehicleToSpringTypeConfigID: Int
}

input VehicleToSpringTypeConfigWhereInput {
  AND: [VehicleToSpringTypeConfigWhereInput!]
  OR: [VehicleToSpringTypeConfigWhereInput!]
  NOT: [VehicleToSpringTypeConfigWhereInput!]
  id: IDFilter
  VehicleToSpringTypeConfigID: IntFilter
  VehicleID: VehicleWhereInput
  SpringTypeConfigID: SpringTypeConfigWhereInput
  Source: StringFilter
}

input VehicleToSpringTypeConfigOrderByInput {
  id: OrderDirection
  VehicleToSpringTypeConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToSpringTypeConfigUpdateInput {
  VehicleToSpringTypeConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  SpringTypeConfigID: SpringTypeConfigRelateToOneForUpdateInput
  Source: String
}

input VehicleToSpringTypeConfigUpdateArgs {
  where: VehicleToSpringTypeConfigWhereUniqueInput!
  data: VehicleToSpringTypeConfigUpdateInput!
}

input VehicleToSpringTypeConfigCreateInput {
  VehicleToSpringTypeConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  SpringTypeConfigID: SpringTypeConfigRelateToOneForCreateInput
  Source: String
}

type VehicleToSteeringConfig {
  id: ID!
  VehicleToSteeringConfigID: Int
  VehicleID: Vehicle
  SteeringConfigID: SteeringConfig
  Source: String
}

input VehicleToSteeringConfigWhereUniqueInput {
  id: ID
  VehicleToSteeringConfigID: Int
}

input VehicleToSteeringConfigWhereInput {
  AND: [VehicleToSteeringConfigWhereInput!]
  OR: [VehicleToSteeringConfigWhereInput!]
  NOT: [VehicleToSteeringConfigWhereInput!]
  id: IDFilter
  VehicleToSteeringConfigID: IntFilter
  VehicleID: VehicleWhereInput
  SteeringConfigID: SteeringConfigWhereInput
  Source: StringFilter
}

input VehicleToSteeringConfigOrderByInput {
  id: OrderDirection
  VehicleToSteeringConfigID: OrderDirection
  Source: OrderDirection
}

input VehicleToSteeringConfigUpdateInput {
  VehicleToSteeringConfigID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  SteeringConfigID: SteeringConfigRelateToOneForUpdateInput
  Source: String
}

input SteeringConfigRelateToOneForUpdateInput {
  create: SteeringConfigCreateInput
  connect: SteeringConfigWhereUniqueInput
  disconnect: Boolean
}

input VehicleToSteeringConfigUpdateArgs {
  where: VehicleToSteeringConfigWhereUniqueInput!
  data: VehicleToSteeringConfigUpdateInput!
}

input VehicleToSteeringConfigCreateInput {
  VehicleToSteeringConfigID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  SteeringConfigID: SteeringConfigRelateToOneForCreateInput
  Source: String
}

input SteeringConfigRelateToOneForCreateInput {
  create: SteeringConfigCreateInput
  connect: SteeringConfigWhereUniqueInput
}

type VehicleToTransmission {
  id: ID!
  VehicleToTransmissionID: Int
  VehicleID: Vehicle
  TransmissionID: Transmission
  Source: String
}

input VehicleToTransmissionWhereUniqueInput {
  id: ID
  VehicleToTransmissionID: Int
}

input VehicleToTransmissionWhereInput {
  AND: [VehicleToTransmissionWhereInput!]
  OR: [VehicleToTransmissionWhereInput!]
  NOT: [VehicleToTransmissionWhereInput!]
  id: IDFilter
  VehicleToTransmissionID: IntFilter
  VehicleID: VehicleWhereInput
  TransmissionID: TransmissionWhereInput
  Source: StringFilter
}

input VehicleToTransmissionOrderByInput {
  id: OrderDirection
  VehicleToTransmissionID: OrderDirection
  Source: OrderDirection
}

input VehicleToTransmissionUpdateInput {
  VehicleToTransmissionID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  TransmissionID: TransmissionRelateToOneForUpdateInput
  Source: String
}

input VehicleToTransmissionUpdateArgs {
  where: VehicleToTransmissionWhereUniqueInput!
  data: VehicleToTransmissionUpdateInput!
}

input VehicleToTransmissionCreateInput {
  VehicleToTransmissionID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  TransmissionID: TransmissionRelateToOneForCreateInput
  Source: String
}

type VehicleToWheelbase {
  id: ID!
  VehicleToWheelbaseID: Int
  VehicleID: Vehicle
  WheelbaseID: WheelBase
  Source: String
}

input VehicleToWheelbaseWhereUniqueInput {
  id: ID
  VehicleToWheelbaseID: Int
}

input VehicleToWheelbaseWhereInput {
  AND: [VehicleToWheelbaseWhereInput!]
  OR: [VehicleToWheelbaseWhereInput!]
  NOT: [VehicleToWheelbaseWhereInput!]
  id: IDFilter
  VehicleToWheelbaseID: IntFilter
  VehicleID: VehicleWhereInput
  WheelbaseID: WheelBaseWhereInput
  Source: StringFilter
}

input VehicleToWheelbaseOrderByInput {
  id: OrderDirection
  VehicleToWheelbaseID: OrderDirection
  Source: OrderDirection
}

input VehicleToWheelbaseUpdateInput {
  VehicleToWheelbaseID: Int
  VehicleID: VehicleRelateToOneForUpdateInput
  WheelbaseID: WheelBaseRelateToOneForUpdateInput
  Source: String
}

input VehicleToWheelbaseUpdateArgs {
  where: VehicleToWheelbaseWhereUniqueInput!
  data: VehicleToWheelbaseUpdateInput!
}

input VehicleToWheelbaseCreateInput {
  VehicleToWheelbaseID: Int
  VehicleID: VehicleRelateToOneForCreateInput
  WheelbaseID: WheelBaseRelateToOneForCreateInput
  Source: String
}

type VehicleType {
  id: ID!
  VehicleTypeID: Int
  VehicleTypeName: String
  VehicleTypeGroupID: VehicleTypeGroup
}

input VehicleTypeWhereUniqueInput {
  id: ID
  VehicleTypeID: Int
}

input VehicleTypeWhereInput {
  AND: [VehicleTypeWhereInput!]
  OR: [VehicleTypeWhereInput!]
  NOT: [VehicleTypeWhereInput!]
  id: IDFilter
  VehicleTypeID: IntFilter
  VehicleTypeName: StringFilter
  VehicleTypeGroupID: VehicleTypeGroupWhereInput
}

input VehicleTypeOrderByInput {
  id: OrderDirection
  VehicleTypeID: OrderDirection
  VehicleTypeName: OrderDirection
}

input VehicleTypeUpdateInput {
  VehicleTypeID: Int
  VehicleTypeName: String
  VehicleTypeGroupID: VehicleTypeGroupRelateToOneForUpdateInput
}

input VehicleTypeGroupRelateToOneForUpdateInput {
  create: VehicleTypeGroupCreateInput
  connect: VehicleTypeGroupWhereUniqueInput
  disconnect: Boolean
}

input VehicleTypeUpdateArgs {
  where: VehicleTypeWhereUniqueInput!
  data: VehicleTypeUpdateInput!
}

input VehicleTypeCreateInput {
  VehicleTypeID: Int
  VehicleTypeName: String
  VehicleTypeGroupID: VehicleTypeGroupRelateToOneForCreateInput
}

input VehicleTypeGroupRelateToOneForCreateInput {
  create: VehicleTypeGroupCreateInput
  connect: VehicleTypeGroupWhereUniqueInput
}

type VehicleTypeGroup {
  id: ID!
  VehicleTypeGroupID: Int
  VehicleTypeGroupName: String
}

input VehicleTypeGroupWhereUniqueInput {
  id: ID
  VehicleTypeGroupID: Int
}

input VehicleTypeGroupWhereInput {
  AND: [VehicleTypeGroupWhereInput!]
  OR: [VehicleTypeGroupWhereInput!]
  NOT: [VehicleTypeGroupWhereInput!]
  id: IDFilter
  VehicleTypeGroupID: IntFilter
  VehicleTypeGroupName: StringFilter
}

input VehicleTypeGroupOrderByInput {
  id: OrderDirection
  VehicleTypeGroupID: OrderDirection
  VehicleTypeGroupName: OrderDirection
}

input VehicleTypeGroupUpdateInput {
  VehicleTypeGroupID: Int
  VehicleTypeGroupName: String
}

input VehicleTypeGroupUpdateArgs {
  where: VehicleTypeGroupWhereUniqueInput!
  data: VehicleTypeGroupUpdateInput!
}

input VehicleTypeGroupCreateInput {
  VehicleTypeGroupID: Int
  VehicleTypeGroupName: String
}

type Version {
  id: ID!
  VersionDate: DateTime
}

input VersionWhereUniqueInput {
  id: ID
}

input VersionWhereInput {
  AND: [VersionWhereInput!]
  OR: [VersionWhereInput!]
  NOT: [VersionWhereInput!]
  id: IDFilter
  VersionDate: DateTimeFilter
}

input VersionOrderByInput {
  id: OrderDirection
  VersionDate: OrderDirection
}

input VersionUpdateInput {
  VersionDate: DateTime
}

input VersionUpdateArgs {
  where: VersionWhereUniqueInput!
  data: VersionUpdateInput!
}

input VersionCreateInput {
  VersionDate: DateTime
}

type WheelBase {
  id: ID!
  WheelBaseID: Int
  WheelBase: String
  WheelBaseMetric: String
}

input WheelBaseWhereUniqueInput {
  id: ID
  WheelBaseID: Int
}

input WheelBaseWhereInput {
  AND: [WheelBaseWhereInput!]
  OR: [WheelBaseWhereInput!]
  NOT: [WheelBaseWhereInput!]
  id: IDFilter
  WheelBaseID: IntFilter
  WheelBase: StringFilter
  WheelBaseMetric: StringFilter
}

input WheelBaseOrderByInput {
  id: OrderDirection
  WheelBaseID: OrderDirection
  WheelBase: OrderDirection
  WheelBaseMetric: OrderDirection
}

input WheelBaseUpdateInput {
  WheelBaseID: Int
  WheelBase: String
  WheelBaseMetric: String
}

input WheelBaseUpdateArgs {
  where: WheelBaseWhereUniqueInput!
  data: WheelBaseUpdateInput!
}

input WheelBaseCreateInput {
  WheelBaseID: Int
  WheelBase: String
  WheelBaseMetric: String
}

type Year {
  id: ID!
  YearID: Int
}

input YearWhereUniqueInput {
  id: ID
  YearID: Int
}

input YearWhereInput {
  AND: [YearWhereInput!]
  OR: [YearWhereInput!]
  NOT: [YearWhereInput!]
  id: IDFilter
  YearID: IntFilter
}

input YearOrderByInput {
  id: OrderDirection
  YearID: OrderDirection
}

input YearUpdateInput {
  YearID: Int
}

input YearUpdateArgs {
  where: YearWhereUniqueInput!
  data: YearUpdateInput!
}

input YearCreateInput {
  YearID: Int
}

type BedLength {
  id: ID!
  BedLengthID: Int
  BedLength: String
  BedLengthMetric: String
  bedConfigs(where: BedConfigWhereInput! = {}, orderBy: [BedConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BedConfigWhereUniqueInput): [BedConfig!]
  bedConfigsCount(where: BedConfigWhereInput! = {}): Int
}

input BedLengthWhereUniqueInput {
  id: ID
  BedLengthID: Int
}

input BedLengthWhereInput {
  AND: [BedLengthWhereInput!]
  OR: [BedLengthWhereInput!]
  NOT: [BedLengthWhereInput!]
  id: IDFilter
  BedLengthID: IntFilter
  BedLength: StringFilter
  BedLengthMetric: StringFilter
  bedConfigs: BedConfigManyRelationFilter
}

input BedConfigManyRelationFilter {
  every: BedConfigWhereInput
  some: BedConfigWhereInput
  none: BedConfigWhereInput
}

input BedLengthOrderByInput {
  id: OrderDirection
  BedLengthID: OrderDirection
  BedLength: OrderDirection
  BedLengthMetric: OrderDirection
}

input BedLengthUpdateInput {
  BedLengthID: Int
  BedLength: String
  BedLengthMetric: String
  bedConfigs: BedConfigRelateToManyForUpdateInput
}

input BedConfigRelateToManyForUpdateInput {
  disconnect: [BedConfigWhereUniqueInput!]
  set: [BedConfigWhereUniqueInput!]
  create: [BedConfigCreateInput!]
  connect: [BedConfigWhereUniqueInput!]
}

input BedLengthUpdateArgs {
  where: BedLengthWhereUniqueInput!
  data: BedLengthUpdateInput!
}

input BedLengthCreateInput {
  BedLengthID: Int
  BedLength: String
  BedLengthMetric: String
  bedConfigs: BedConfigRelateToManyForCreateInput
}

input BedConfigRelateToManyForCreateInput {
  create: [BedConfigCreateInput!]
  connect: [BedConfigWhereUniqueInput!]
}

type BedType {
  id: ID!
  BedTypeID: Int
  BedTypeName: String
  bedConfigs(where: BedConfigWhereInput! = {}, orderBy: [BedConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BedConfigWhereUniqueInput): [BedConfig!]
  bedConfigsCount(where: BedConfigWhereInput! = {}): Int
}

input BedTypeWhereUniqueInput {
  id: ID
  BedTypeID: Int
}

input BedTypeWhereInput {
  AND: [BedTypeWhereInput!]
  OR: [BedTypeWhereInput!]
  NOT: [BedTypeWhereInput!]
  id: IDFilter
  BedTypeID: IntFilter
  BedTypeName: StringFilter
  bedConfigs: BedConfigManyRelationFilter
}

input BedTypeOrderByInput {
  id: OrderDirection
  BedTypeID: OrderDirection
  BedTypeName: OrderDirection
}

input BedTypeUpdateInput {
  BedTypeID: Int
  BedTypeName: String
  bedConfigs: BedConfigRelateToManyForUpdateInput
}

input BedTypeUpdateArgs {
  where: BedTypeWhereUniqueInput!
  data: BedTypeUpdateInput!
}

input BedTypeCreateInput {
  BedTypeID: Int
  BedTypeName: String
  bedConfigs: BedConfigRelateToManyForCreateInput
}

type PCdbPartTerminology {
  id: ID!
  partTerminologyID: Int
  description: String
  aaiaid: String
  partsRelationships(where: PartsRelationshipWhereInput! = {}, orderBy: [PartsRelationshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsRelationshipWhereUniqueInput): [PartsRelationship!]
  partsRelationshipsCount(where: PartsRelationshipWhereInput! = {}): Int
  partsToAlias(where: PartsToAliasWhereInput! = {}, orderBy: [PartsToAliasOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToAliasWhereUniqueInput): [PartsToAlias!]
  partsToAliasCount(where: PartsToAliasWhereInput! = {}): Int
  partsToUse(where: PartsToUseWhereInput! = {}, orderBy: [PartsToUseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToUseWhereUniqueInput): [PartsToUse!]
  partsToUseCount(where: PartsToUseWhereInput! = {}): Int
}

input PCdbPartTerminologyWhereUniqueInput {
  id: ID
  partTerminologyID: Int
}

input PCdbPartTerminologyWhereInput {
  AND: [PCdbPartTerminologyWhereInput!]
  OR: [PCdbPartTerminologyWhereInput!]
  NOT: [PCdbPartTerminologyWhereInput!]
  id: IDFilter
  partTerminologyID: IntFilter
  description: StringFilter
  aaiaid: StringFilter
  partsRelationships: PartsRelationshipManyRelationFilter
  partsToAlias: PartsToAliasManyRelationFilter
  partsToUse: PartsToUseManyRelationFilter
}

input PartsRelationshipManyRelationFilter {
  every: PartsRelationshipWhereInput
  some: PartsRelationshipWhereInput
  none: PartsRelationshipWhereInput
}

input PCdbPartTerminologyOrderByInput {
  id: OrderDirection
  partTerminologyID: OrderDirection
  description: OrderDirection
  aaiaid: OrderDirection
}

input PCdbPartTerminologyUpdateInput {
  partTerminologyID: Int
  description: String
  aaiaid: String
  partsRelationships: PartsRelationshipRelateToManyForUpdateInput
  partsToAlias: PartsToAliasRelateToManyForUpdateInput
  partsToUse: PartsToUseRelateToManyForUpdateInput
}

input PartsRelationshipRelateToManyForUpdateInput {
  disconnect: [PartsRelationshipWhereUniqueInput!]
  set: [PartsRelationshipWhereUniqueInput!]
  create: [PartsRelationshipCreateInput!]
  connect: [PartsRelationshipWhereUniqueInput!]
}

input PCdbPartTerminologyUpdateArgs {
  where: PCdbPartTerminologyWhereUniqueInput!
  data: PCdbPartTerminologyUpdateInput!
}

input PCdbPartTerminologyCreateInput {
  partTerminologyID: Int
  description: String
  aaiaid: String
  partsRelationships: PartsRelationshipRelateToManyForCreateInput
  partsToAlias: PartsToAliasRelateToManyForCreateInput
  partsToUse: PartsToUseRelateToManyForCreateInput
}

input PartsRelationshipRelateToManyForCreateInput {
  create: [PartsRelationshipCreateInput!]
  connect: [PartsRelationshipWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createApp(data: AppCreateInput!): App
  createApps(data: [AppCreateInput!]!): [App]
  updateApp(where: AppWhereUniqueInput!, data: AppUpdateInput!): App
  updateApps(data: [AppUpdateArgs!]!): [App]
  deleteApp(where: AppWhereUniqueInput!): App
  deleteApps(where: [AppWhereUniqueInput!]!): [App]
  createAsset(data: AssetCreateInput!): Asset
  createAssets(data: [AssetCreateInput!]!): [Asset]
  updateAsset(where: AssetWhereUniqueInput!, data: AssetUpdateInput!): Asset
  updateAssets(data: [AssetUpdateArgs!]!): [Asset]
  deleteAsset(where: AssetWhereUniqueInput!): Asset
  deleteAssets(where: [AssetWhereUniqueInput!]!): [Asset]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDigitalAsset(data: DigitalAssetCreateInput!): DigitalAsset
  createDigitalAssets(data: [DigitalAssetCreateInput!]!): [DigitalAsset]
  updateDigitalAsset(where: DigitalAssetWhereUniqueInput!, data: DigitalAssetUpdateInput!): DigitalAsset
  updateDigitalAssets(data: [DigitalAssetUpdateArgs!]!): [DigitalAsset]
  deleteDigitalAsset(where: DigitalAssetWhereUniqueInput!): DigitalAsset
  deleteDigitalAssets(where: [DigitalAssetWhereUniqueInput!]!): [DigitalAsset]
  createPartType(data: PartTypeCreateInput!): PartType
  createPartTypes(data: [PartTypeCreateInput!]!): [PartType]
  updatePartType(where: PartTypeWhereUniqueInput!, data: PartTypeUpdateInput!): PartType
  updatePartTypes(data: [PartTypeUpdateArgs!]!): [PartType]
  deletePartType(where: PartTypeWhereUniqueInput!): PartType
  deletePartTypes(where: [PartTypeWhereUniqueInput!]!): [PartType]
  createCatalog(data: CatalogCreateInput!): Catalog
  createCatalogs(data: [CatalogCreateInput!]!): [Catalog]
  updateCatalog(where: CatalogWhereUniqueInput!, data: CatalogUpdateInput!): Catalog
  updateCatalogs(data: [CatalogUpdateArgs!]!): [Catalog]
  deleteCatalog(where: CatalogWhereUniqueInput!): Catalog
  deleteCatalogs(where: [CatalogWhereUniqueInput!]!): [Catalog]
  createAcesApp(data: AcesAppCreateInput!): AcesApp
  createAcesApps(data: [AcesAppCreateInput!]!): [AcesApp]
  updateAcesApp(where: AcesAppWhereUniqueInput!, data: AcesAppUpdateInput!): AcesApp
  updateAcesApps(data: [AcesAppUpdateArgs!]!): [AcesApp]
  deleteAcesApp(where: AcesAppWhereUniqueInput!): AcesApp
  deleteAcesApps(where: [AcesAppWhereUniqueInput!]!): [AcesApp]
  createAcesAsset(data: AcesAssetCreateInput!): AcesAsset
  createAcesAssets(data: [AcesAssetCreateInput!]!): [AcesAsset]
  updateAcesAsset(where: AcesAssetWhereUniqueInput!, data: AcesAssetUpdateInput!): AcesAsset
  updateAcesAssets(data: [AcesAssetUpdateArgs!]!): [AcesAsset]
  deleteAcesAsset(where: AcesAssetWhereUniqueInput!): AcesAsset
  deleteAcesAssets(where: [AcesAssetWhereUniqueInput!]!): [AcesAsset]
  createAcesDigitalFileInformation(data: AcesDigitalFileInformationCreateInput!): AcesDigitalFileInformation
  createAcesDigitalFileInformations(data: [AcesDigitalFileInformationCreateInput!]!): [AcesDigitalFileInformation]
  updateAcesDigitalFileInformation(where: AcesDigitalFileInformationWhereUniqueInput!, data: AcesDigitalFileInformationUpdateInput!): AcesDigitalFileInformation
  updateAcesDigitalFileInformations(data: [AcesDigitalFileInformationUpdateArgs!]!): [AcesDigitalFileInformation]
  deleteAcesDigitalFileInformation(where: AcesDigitalFileInformationWhereUniqueInput!): AcesDigitalFileInformation
  deleteAcesDigitalFileInformations(where: [AcesDigitalFileInformationWhereUniqueInput!]!): [AcesDigitalFileInformation]
  createMeasurementGroup(data: MeasurementGroupCreateInput!): MeasurementGroup
  createMeasurementGroups(data: [MeasurementGroupCreateInput!]!): [MeasurementGroup]
  updateMeasurementGroup(where: MeasurementGroupWhereUniqueInput!, data: MeasurementGroupUpdateInput!): MeasurementGroup
  updateMeasurementGroups(data: [MeasurementGroupUpdateArgs!]!): [MeasurementGroup]
  deleteMeasurementGroup(where: MeasurementGroupWhereUniqueInput!): MeasurementGroup
  deleteMeasurementGroups(where: [MeasurementGroupWhereUniqueInput!]!): [MeasurementGroup]
  createMetaData(data: MetaDataCreateInput!): MetaData
  createMetaDatas(data: [MetaDataCreateInput!]!): [MetaData]
  updateMetaData(where: MetaDataWhereUniqueInput!, data: MetaDataUpdateInput!): MetaData
  updateMetaDatas(data: [MetaDataUpdateArgs!]!): [MetaData]
  deleteMetaData(where: MetaDataWhereUniqueInput!): MetaData
  deleteMetaDatas(where: [MetaDataWhereUniqueInput!]!): [MetaData]
  createMetaUOMCodeAssignment(data: MetaUOMCodeAssignmentCreateInput!): MetaUOMCodeAssignment
  createMetaUOMCodeAssignments(data: [MetaUOMCodeAssignmentCreateInput!]!): [MetaUOMCodeAssignment]
  updateMetaUOMCodeAssignment(where: MetaUOMCodeAssignmentWhereUniqueInput!, data: MetaUOMCodeAssignmentUpdateInput!): MetaUOMCodeAssignment
  updateMetaUOMCodeAssignments(data: [MetaUOMCodeAssignmentUpdateArgs!]!): [MetaUOMCodeAssignment]
  deleteMetaUOMCodeAssignment(where: MetaUOMCodeAssignmentWhereUniqueInput!): MetaUOMCodeAssignment
  deleteMetaUOMCodeAssignments(where: [MetaUOMCodeAssignmentWhereUniqueInput!]!): [MetaUOMCodeAssignment]
  createMetaUOMCode(data: MetaUOMCodeCreateInput!): MetaUOMCode
  createMetaUOMCodes(data: [MetaUOMCodeCreateInput!]!): [MetaUOMCode]
  updateMetaUOMCode(where: MetaUOMCodeWhereUniqueInput!, data: MetaUOMCodeUpdateInput!): MetaUOMCode
  updateMetaUOMCodes(data: [MetaUOMCodeUpdateArgs!]!): [MetaUOMCode]
  deleteMetaUOMCode(where: MetaUOMCodeWhereUniqueInput!): MetaUOMCode
  deleteMetaUOMCodes(where: [MetaUOMCodeWhereUniqueInput!]!): [MetaUOMCode]
  createPartAttributeAssignment(data: PartAttributeAssignmentCreateInput!): PartAttributeAssignment
  createPartAttributeAssignments(data: [PartAttributeAssignmentCreateInput!]!): [PartAttributeAssignment]
  updatePartAttributeAssignment(where: PartAttributeAssignmentWhereUniqueInput!, data: PartAttributeAssignmentUpdateInput!): PartAttributeAssignment
  updatePartAttributeAssignments(data: [PartAttributeAssignmentUpdateArgs!]!): [PartAttributeAssignment]
  deletePartAttributeAssignment(where: PartAttributeAssignmentWhereUniqueInput!): PartAttributeAssignment
  deletePartAttributeAssignments(where: [PartAttributeAssignmentWhereUniqueInput!]!): [PartAttributeAssignment]
  createPartAttributeStyle(data: PartAttributeStyleCreateInput!): PartAttributeStyle
  createPartAttributeStyles(data: [PartAttributeStyleCreateInput!]!): [PartAttributeStyle]
  updatePartAttributeStyle(where: PartAttributeStyleWhereUniqueInput!, data: PartAttributeStyleUpdateInput!): PartAttributeStyle
  updatePartAttributeStyles(data: [PartAttributeStyleUpdateArgs!]!): [PartAttributeStyle]
  deletePartAttributeStyle(where: PartAttributeStyleWhereUniqueInput!): PartAttributeStyle
  deletePartAttributeStyles(where: [PartAttributeStyleWhereUniqueInput!]!): [PartAttributeStyle]
  createPartAttribute(data: PartAttributeCreateInput!): PartAttribute
  createPartAttributes(data: [PartAttributeCreateInput!]!): [PartAttribute]
  updatePartAttribute(where: PartAttributeWhereUniqueInput!, data: PartAttributeUpdateInput!): PartAttribute
  updatePartAttributes(data: [PartAttributeUpdateArgs!]!): [PartAttribute]
  deletePartAttribute(where: PartAttributeWhereUniqueInput!): PartAttribute
  deletePartAttributes(where: [PartAttributeWhereUniqueInput!]!): [PartAttribute]
  createPartTypeStyle(data: PartTypeStyleCreateInput!): PartTypeStyle
  createPartTypeStyles(data: [PartTypeStyleCreateInput!]!): [PartTypeStyle]
  updatePartTypeStyle(where: PartTypeStyleWhereUniqueInput!, data: PartTypeStyleUpdateInput!): PartTypeStyle
  updatePartTypeStyles(data: [PartTypeStyleUpdateArgs!]!): [PartTypeStyle]
  deletePartTypeStyle(where: PartTypeStyleWhereUniqueInput!): PartTypeStyle
  deletePartTypeStyles(where: [PartTypeStyleWhereUniqueInput!]!): [PartTypeStyle]
  createStyle(data: StyleCreateInput!): Style
  createStyles(data: [StyleCreateInput!]!): [Style]
  updateStyle(where: StyleWhereUniqueInput!, data: StyleUpdateInput!): Style
  updateStyles(data: [StyleUpdateArgs!]!): [Style]
  deleteStyle(where: StyleWhereUniqueInput!): Style
  deleteStyles(where: [StyleWhereUniqueInput!]!): [Style]
  createValidValueAssignment(data: ValidValueAssignmentCreateInput!): ValidValueAssignment
  createValidValueAssignments(data: [ValidValueAssignmentCreateInput!]!): [ValidValueAssignment]
  updateValidValueAssignment(where: ValidValueAssignmentWhereUniqueInput!, data: ValidValueAssignmentUpdateInput!): ValidValueAssignment
  updateValidValueAssignments(data: [ValidValueAssignmentUpdateArgs!]!): [ValidValueAssignment]
  deleteValidValueAssignment(where: ValidValueAssignmentWhereUniqueInput!): ValidValueAssignment
  deleteValidValueAssignments(where: [ValidValueAssignmentWhereUniqueInput!]!): [ValidValueAssignment]
  createValidValue(data: ValidValueCreateInput!): ValidValue
  createValidValues(data: [ValidValueCreateInput!]!): [ValidValue]
  updateValidValue(where: ValidValueWhereUniqueInput!, data: ValidValueUpdateInput!): ValidValue
  updateValidValues(data: [ValidValueUpdateArgs!]!): [ValidValue]
  deleteValidValue(where: ValidValueWhereUniqueInput!): ValidValue
  deleteValidValues(where: [ValidValueWhereUniqueInput!]!): [ValidValue]
  createPAVersion(data: PAVersionCreateInput!): PAVersion
  createPAVersions(data: [PAVersionCreateInput!]!): [PAVersion]
  updatePAVersion(where: PAVersionWhereUniqueInput!, data: PAVersionUpdateInput!): PAVersion
  updatePAVersions(data: [PAVersionUpdateArgs!]!): [PAVersion]
  deletePAVersion(where: PAVersionWhereUniqueInput!): PAVersion
  deletePAVersions(where: [PAVersionWhereUniqueInput!]!): [PAVersion]
  createACESCodedValue(data: ACESCodedValueCreateInput!): ACESCodedValue
  createACESCodedValues(data: [ACESCodedValueCreateInput!]!): [ACESCodedValue]
  updateACESCodedValue(where: ACESCodedValueWhereUniqueInput!, data: ACESCodedValueUpdateInput!): ACESCodedValue
  updateACESCodedValues(data: [ACESCodedValueUpdateArgs!]!): [ACESCodedValue]
  deleteACESCodedValue(where: ACESCodedValueWhereUniqueInput!): ACESCodedValue
  deleteACESCodedValues(where: [ACESCodedValueWhereUniqueInput!]!): [ACESCodedValue]
  createAlias(data: AliasCreateInput!): Alias
  createAliases(data: [AliasCreateInput!]!): [Alias]
  updateAlias(where: AliasWhereUniqueInput!, data: AliasUpdateInput!): Alias
  updateAliases(data: [AliasUpdateArgs!]!): [Alias]
  deleteAlias(where: AliasWhereUniqueInput!): Alias
  deleteAliases(where: [AliasWhereUniqueInput!]!): [Alias]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createCodeMaster(data: CodeMasterCreateInput!): CodeMaster
  createCodeMasters(data: [CodeMasterCreateInput!]!): [CodeMaster]
  updateCodeMaster(where: CodeMasterWhereUniqueInput!, data: CodeMasterUpdateInput!): CodeMaster
  updateCodeMasters(data: [CodeMasterUpdateArgs!]!): [CodeMaster]
  deleteCodeMaster(where: CodeMasterWhereUniqueInput!): CodeMaster
  deleteCodeMasters(where: [CodeMasterWhereUniqueInput!]!): [CodeMaster]
  createPCChange(data: PCChangeCreateInput!): PCChange
  createPCChanges(data: [PCChangeCreateInput!]!): [PCChange]
  updatePCChange(where: PCChangeWhereUniqueInput!, data: PCChangeUpdateInput!): PCChange
  updatePCChanges(data: [PCChangeUpdateArgs!]!): [PCChange]
  deletePCChange(where: PCChangeWhereUniqueInput!): PCChange
  deletePCChanges(where: [PCChangeWhereUniqueInput!]!): [PCChange]
  createPCChangeAttributeState(data: PCChangeAttributeStateCreateInput!): PCChangeAttributeState
  createPCChangeAttributeStates(data: [PCChangeAttributeStateCreateInput!]!): [PCChangeAttributeState]
  updatePCChangeAttributeState(where: PCChangeAttributeStateWhereUniqueInput!, data: PCChangeAttributeStateUpdateInput!): PCChangeAttributeState
  updatePCChangeAttributeStates(data: [PCChangeAttributeStateUpdateArgs!]!): [PCChangeAttributeState]
  deletePCChangeAttributeState(where: PCChangeAttributeStateWhereUniqueInput!): PCChangeAttributeState
  deletePCChangeAttributeStates(where: [PCChangeAttributeStateWhereUniqueInput!]!): [PCChangeAttributeState]
  createPCChangeDetail(data: PCChangeDetailCreateInput!): PCChangeDetail
  createPCChangeDetails(data: [PCChangeDetailCreateInput!]!): [PCChangeDetail]
  updatePCChangeDetail(where: PCChangeDetailWhereUniqueInput!, data: PCChangeDetailUpdateInput!): PCChangeDetail
  updatePCChangeDetails(data: [PCChangeDetailUpdateArgs!]!): [PCChangeDetail]
  deletePCChangeDetail(where: PCChangeDetailWhereUniqueInput!): PCChangeDetail
  deletePCChangeDetails(where: [PCChangeDetailWhereUniqueInput!]!): [PCChangeDetail]
  createPCChangeReason(data: PCChangeReasonCreateInput!): PCChangeReason
  createPCChangeReasons(data: [PCChangeReasonCreateInput!]!): [PCChangeReason]
  updatePCChangeReason(where: PCChangeReasonWhereUniqueInput!, data: PCChangeReasonUpdateInput!): PCChangeReason
  updatePCChangeReasons(data: [PCChangeReasonUpdateArgs!]!): [PCChangeReason]
  deletePCChangeReason(where: PCChangeReasonWhereUniqueInput!): PCChangeReason
  deletePCChangeReasons(where: [PCChangeReasonWhereUniqueInput!]!): [PCChangeReason]
  createPCChangeTableName(data: PCChangeTableNameCreateInput!): PCChangeTableName
  createPCChangeTableNames(data: [PCChangeTableNameCreateInput!]!): [PCChangeTableName]
  updatePCChangeTableName(where: PCChangeTableNameWhereUniqueInput!, data: PCChangeTableNameUpdateInput!): PCChangeTableName
  updatePCChangeTableNames(data: [PCChangeTableNameUpdateArgs!]!): [PCChangeTableName]
  deletePCChangeTableName(where: PCChangeTableNameWhereUniqueInput!): PCChangeTableName
  deletePCChangeTableNames(where: [PCChangeTableNameWhereUniqueInput!]!): [PCChangeTableName]
  createPart(data: PartCreateInput!): Part
  createParts(data: [PartCreateInput!]!): [Part]
  updatePart(where: PartWhereUniqueInput!, data: PartUpdateInput!): Part
  updateParts(data: [PartUpdateArgs!]!): [Part]
  deletePart(where: PartWhereUniqueInput!): Part
  deleteParts(where: [PartWhereUniqueInput!]!): [Part]
  createPartsDescription(data: PartsDescriptionCreateInput!): PartsDescription
  createPartsDescriptions(data: [PartsDescriptionCreateInput!]!): [PartsDescription]
  updatePartsDescription(where: PartsDescriptionWhereUniqueInput!, data: PartsDescriptionUpdateInput!): PartsDescription
  updatePartsDescriptions(data: [PartsDescriptionUpdateArgs!]!): [PartsDescription]
  deletePartsDescription(where: PartsDescriptionWhereUniqueInput!): PartsDescription
  deletePartsDescriptions(where: [PartsDescriptionWhereUniqueInput!]!): [PartsDescription]
  createPartsRelationship(data: PartsRelationshipCreateInput!): PartsRelationship
  createPartsRelationships(data: [PartsRelationshipCreateInput!]!): [PartsRelationship]
  updatePartsRelationship(where: PartsRelationshipWhereUniqueInput!, data: PartsRelationshipUpdateInput!): PartsRelationship
  updatePartsRelationships(data: [PartsRelationshipUpdateArgs!]!): [PartsRelationship]
  deletePartsRelationship(where: PartsRelationshipWhereUniqueInput!): PartsRelationship
  deletePartsRelationships(where: [PartsRelationshipWhereUniqueInput!]!): [PartsRelationship]
  createPartsToAlias(data: PartsToAliasCreateInput!): PartsToAlias
  createPartsToAliases(data: [PartsToAliasCreateInput!]!): [PartsToAlias]
  updatePartsToAlias(where: PartsToAliasWhereUniqueInput!, data: PartsToAliasUpdateInput!): PartsToAlias
  updatePartsToAliases(data: [PartsToAliasUpdateArgs!]!): [PartsToAlias]
  deletePartsToAlias(where: PartsToAliasWhereUniqueInput!): PartsToAlias
  deletePartsToAliases(where: [PartsToAliasWhereUniqueInput!]!): [PartsToAlias]
  createPartsToUse(data: PartsToUseCreateInput!): PartsToUse
  createPartsToUses(data: [PartsToUseCreateInput!]!): [PartsToUse]
  updatePartsToUse(where: PartsToUseWhereUniqueInput!, data: PartsToUseUpdateInput!): PartsToUse
  updatePartsToUses(data: [PartsToUseUpdateArgs!]!): [PartsToUse]
  deletePartsToUse(where: PartsToUseWhereUniqueInput!): PartsToUse
  deletePartsToUses(where: [PartsToUseWhereUniqueInput!]!): [PartsToUse]
  createPosition(data: PositionCreateInput!): Position
  createPositions(data: [PositionCreateInput!]!): [Position]
  updatePosition(where: PositionWhereUniqueInput!, data: PositionUpdateInput!): Position
  updatePositions(data: [PositionUpdateArgs!]!): [Position]
  deletePosition(where: PositionWhereUniqueInput!): Position
  deletePositions(where: [PositionWhereUniqueInput!]!): [Position]
  createSubcategory(data: SubcategoryCreateInput!): Subcategory
  createSubcategories(data: [SubcategoryCreateInput!]!): [Subcategory]
  updateSubcategory(where: SubcategoryWhereUniqueInput!, data: SubcategoryUpdateInput!): Subcategory
  updateSubcategories(data: [SubcategoryUpdateArgs!]!): [Subcategory]
  deleteSubcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  deleteSubcategories(where: [SubcategoryWhereUniqueInput!]!): [Subcategory]
  createUse(data: UseCreateInput!): Use
  createUses(data: [UseCreateInput!]!): [Use]
  updateUse(where: UseWhereUniqueInput!, data: UseUpdateInput!): Use
  updateUses(data: [UseUpdateArgs!]!): [Use]
  deleteUse(where: UseWhereUniqueInput!): Use
  deleteUses(where: [UseWhereUniqueInput!]!): [Use]
  createPIESCode(data: PIESCodeCreateInput!): PIESCode
  createPIESCodes(data: [PIESCodeCreateInput!]!): [PIESCode]
  updatePIESCode(where: PIESCodeWhereUniqueInput!, data: PIESCodeUpdateInput!): PIESCode
  updatePIESCodes(data: [PIESCodeUpdateArgs!]!): [PIESCode]
  deletePIESCode(where: PIESCodeWhereUniqueInput!): PIESCode
  deletePIESCodes(where: [PIESCodeWhereUniqueInput!]!): [PIESCode]
  createPIESExpiCode(data: PIESExpiCodeCreateInput!): PIESExpiCode
  createPIESExpiCodes(data: [PIESExpiCodeCreateInput!]!): [PIESExpiCode]
  updatePIESExpiCode(where: PIESExpiCodeWhereUniqueInput!, data: PIESExpiCodeUpdateInput!): PIESExpiCode
  updatePIESExpiCodes(data: [PIESExpiCodeUpdateArgs!]!): [PIESExpiCode]
  deletePIESExpiCode(where: PIESExpiCodeWhereUniqueInput!): PIESExpiCode
  deletePIESExpiCodes(where: [PIESExpiCodeWhereUniqueInput!]!): [PIESExpiCode]
  createPIESExpiGroup(data: PIESExpiGroupCreateInput!): PIESExpiGroup
  createPIESExpiGroups(data: [PIESExpiGroupCreateInput!]!): [PIESExpiGroup]
  updatePIESExpiGroup(where: PIESExpiGroupWhereUniqueInput!, data: PIESExpiGroupUpdateInput!): PIESExpiGroup
  updatePIESExpiGroups(data: [PIESExpiGroupUpdateArgs!]!): [PIESExpiGroup]
  deletePIESExpiGroup(where: PIESExpiGroupWhereUniqueInput!): PIESExpiGroup
  deletePIESExpiGroups(where: [PIESExpiGroupWhereUniqueInput!]!): [PIESExpiGroup]
  createPIESField(data: PIESFieldCreateInput!): PIESField
  createPIESFields(data: [PIESFieldCreateInput!]!): [PIESField]
  updatePIESField(where: PIESFieldWhereUniqueInput!, data: PIESFieldUpdateInput!): PIESField
  updatePIESFields(data: [PIESFieldUpdateArgs!]!): [PIESField]
  deletePIESField(where: PIESFieldWhereUniqueInput!): PIESField
  deletePIESFields(where: [PIESFieldWhereUniqueInput!]!): [PIESField]
  createPIESReferenceFieldCode(data: PIESReferenceFieldCodeCreateInput!): PIESReferenceFieldCode
  createPIESReferenceFieldCodes(data: [PIESReferenceFieldCodeCreateInput!]!): [PIESReferenceFieldCode]
  updatePIESReferenceFieldCode(where: PIESReferenceFieldCodeWhereUniqueInput!, data: PIESReferenceFieldCodeUpdateInput!): PIESReferenceFieldCode
  updatePIESReferenceFieldCodes(data: [PIESReferenceFieldCodeUpdateArgs!]!): [PIESReferenceFieldCode]
  deletePIESReferenceFieldCode(where: PIESReferenceFieldCodeWhereUniqueInput!): PIESReferenceFieldCode
  deletePIESReferenceFieldCodes(where: [PIESReferenceFieldCodeWhereUniqueInput!]!): [PIESReferenceFieldCode]
  createPIESSegment(data: PIESSegmentCreateInput!): PIESSegment
  createPIESSegments(data: [PIESSegmentCreateInput!]!): [PIESSegment]
  updatePIESSegment(where: PIESSegmentWhereUniqueInput!, data: PIESSegmentUpdateInput!): PIESSegment
  updatePIESSegments(data: [PIESSegmentUpdateArgs!]!): [PIESSegment]
  deletePIESSegment(where: PIESSegmentWhereUniqueInput!): PIESSegment
  deletePIESSegments(where: [PIESSegmentWhereUniqueInput!]!): [PIESSegment]
  createPCVersion(data: PCVersionCreateInput!): PCVersion
  createPCVersions(data: [PCVersionCreateInput!]!): [PCVersion]
  updatePCVersion(where: PCVersionWhereUniqueInput!, data: PCVersionUpdateInput!): PCVersion
  updatePCVersions(data: [PCVersionUpdateArgs!]!): [PCVersion]
  deletePCVersion(where: PCVersionWhereUniqueInput!): PCVersion
  deletePCVersions(where: [PCVersionWhereUniqueInput!]!): [PCVersion]
  createPartsSupersession(data: PartsSupersessionCreateInput!): PartsSupersession
  createPartsSupersessions(data: [PartsSupersessionCreateInput!]!): [PartsSupersession]
  updatePartsSupersession(where: PartsSupersessionWhereUniqueInput!, data: PartsSupersessionUpdateInput!): PartsSupersession
  updatePartsSupersessions(data: [PartsSupersessionUpdateArgs!]!): [PartsSupersession]
  deletePartsSupersession(where: PartsSupersessionWhereUniqueInput!): PartsSupersession
  deletePartsSupersessions(where: [PartsSupersessionWhereUniqueInput!]!): [PartsSupersession]
  createQChangeAttributeState(data: QChangeAttributeStateCreateInput!): QChangeAttributeState
  createQChangeAttributeStates(data: [QChangeAttributeStateCreateInput!]!): [QChangeAttributeState]
  updateQChangeAttributeState(where: QChangeAttributeStateWhereUniqueInput!, data: QChangeAttributeStateUpdateInput!): QChangeAttributeState
  updateQChangeAttributeStates(data: [QChangeAttributeStateUpdateArgs!]!): [QChangeAttributeState]
  deleteQChangeAttributeState(where: QChangeAttributeStateWhereUniqueInput!): QChangeAttributeState
  deleteQChangeAttributeStates(where: [QChangeAttributeStateWhereUniqueInput!]!): [QChangeAttributeState]
  createQChangeDetail(data: QChangeDetailCreateInput!): QChangeDetail
  createQChangeDetails(data: [QChangeDetailCreateInput!]!): [QChangeDetail]
  updateQChangeDetail(where: QChangeDetailWhereUniqueInput!, data: QChangeDetailUpdateInput!): QChangeDetail
  updateQChangeDetails(data: [QChangeDetailUpdateArgs!]!): [QChangeDetail]
  deleteQChangeDetail(where: QChangeDetailWhereUniqueInput!): QChangeDetail
  deleteQChangeDetails(where: [QChangeDetailWhereUniqueInput!]!): [QChangeDetail]
  createQChangeReason(data: QChangeReasonCreateInput!): QChangeReason
  createQChangeReasons(data: [QChangeReasonCreateInput!]!): [QChangeReason]
  updateQChangeReason(where: QChangeReasonWhereUniqueInput!, data: QChangeReasonUpdateInput!): QChangeReason
  updateQChangeReasons(data: [QChangeReasonUpdateArgs!]!): [QChangeReason]
  deleteQChangeReason(where: QChangeReasonWhereUniqueInput!): QChangeReason
  deleteQChangeReasons(where: [QChangeReasonWhereUniqueInput!]!): [QChangeReason]
  createQChange(data: QChangeCreateInput!): QChange
  createQChanges(data: [QChangeCreateInput!]!): [QChange]
  updateQChange(where: QChangeWhereUniqueInput!, data: QChangeUpdateInput!): QChange
  updateQChanges(data: [QChangeUpdateArgs!]!): [QChange]
  deleteQChange(where: QChangeWhereUniqueInput!): QChange
  deleteQChanges(where: [QChangeWhereUniqueInput!]!): [QChange]
  createQChangeTableName(data: QChangeTableNameCreateInput!): QChangeTableName
  createQChangeTableNames(data: [QChangeTableNameCreateInput!]!): [QChangeTableName]
  updateQChangeTableName(where: QChangeTableNameWhereUniqueInput!, data: QChangeTableNameUpdateInput!): QChangeTableName
  updateQChangeTableNames(data: [QChangeTableNameUpdateArgs!]!): [QChangeTableName]
  deleteQChangeTableName(where: QChangeTableNameWhereUniqueInput!): QChangeTableName
  deleteQChangeTableNames(where: [QChangeTableNameWhereUniqueInput!]!): [QChangeTableName]
  createGroupNumber(data: GroupNumberCreateInput!): GroupNumber
  createGroupNumbers(data: [GroupNumberCreateInput!]!): [GroupNumber]
  updateGroupNumber(where: GroupNumberWhereUniqueInput!, data: GroupNumberUpdateInput!): GroupNumber
  updateGroupNumbers(data: [GroupNumberUpdateArgs!]!): [GroupNumber]
  deleteGroupNumber(where: GroupNumberWhereUniqueInput!): GroupNumber
  deleteGroupNumbers(where: [GroupNumberWhereUniqueInput!]!): [GroupNumber]
  createQLanguage(data: QLanguageCreateInput!): QLanguage
  createQLanguages(data: [QLanguageCreateInput!]!): [QLanguage]
  updateQLanguage(where: QLanguageWhereUniqueInput!, data: QLanguageUpdateInput!): QLanguage
  updateQLanguages(data: [QLanguageUpdateArgs!]!): [QLanguage]
  deleteQLanguage(where: QLanguageWhereUniqueInput!): QLanguage
  deleteQLanguages(where: [QLanguageWhereUniqueInput!]!): [QLanguage]
  createQdbChange(data: QdbChangeCreateInput!): QdbChange
  createQdbChanges(data: [QdbChangeCreateInput!]!): [QdbChange]
  updateQdbChange(where: QdbChangeWhereUniqueInput!, data: QdbChangeUpdateInput!): QdbChange
  updateQdbChanges(data: [QdbChangeUpdateArgs!]!): [QdbChange]
  deleteQdbChange(where: QdbChangeWhereUniqueInput!): QdbChange
  deleteQdbChanges(where: [QdbChangeWhereUniqueInput!]!): [QdbChange]
  createQQualifier(data: QQualifierCreateInput!): QQualifier
  createQQualifiers(data: [QQualifierCreateInput!]!): [QQualifier]
  updateQQualifier(where: QQualifierWhereUniqueInput!, data: QQualifierUpdateInput!): QQualifier
  updateQQualifiers(data: [QQualifierUpdateArgs!]!): [QQualifier]
  deleteQQualifier(where: QQualifierWhereUniqueInput!): QQualifier
  deleteQQualifiers(where: [QQualifierWhereUniqueInput!]!): [QQualifier]
  createQualifierGroup(data: QualifierGroupCreateInput!): QualifierGroup
  createQualifierGroups(data: [QualifierGroupCreateInput!]!): [QualifierGroup]
  updateQualifierGroup(where: QualifierGroupWhereUniqueInput!, data: QualifierGroupUpdateInput!): QualifierGroup
  updateQualifierGroups(data: [QualifierGroupUpdateArgs!]!): [QualifierGroup]
  deleteQualifierGroup(where: QualifierGroupWhereUniqueInput!): QualifierGroup
  deleteQualifierGroups(where: [QualifierGroupWhereUniqueInput!]!): [QualifierGroup]
  createQualifierTranslation(data: QualifierTranslationCreateInput!): QualifierTranslation
  createQualifierTranslations(data: [QualifierTranslationCreateInput!]!): [QualifierTranslation]
  updateQualifierTranslation(where: QualifierTranslationWhereUniqueInput!, data: QualifierTranslationUpdateInput!): QualifierTranslation
  updateQualifierTranslations(data: [QualifierTranslationUpdateArgs!]!): [QualifierTranslation]
  deleteQualifierTranslation(where: QualifierTranslationWhereUniqueInput!): QualifierTranslation
  deleteQualifierTranslations(where: [QualifierTranslationWhereUniqueInput!]!): [QualifierTranslation]
  createQualifierType(data: QualifierTypeCreateInput!): QualifierType
  createQualifierTypes(data: [QualifierTypeCreateInput!]!): [QualifierType]
  updateQualifierType(where: QualifierTypeWhereUniqueInput!, data: QualifierTypeUpdateInput!): QualifierType
  updateQualifierTypes(data: [QualifierTypeUpdateArgs!]!): [QualifierType]
  deleteQualifierType(where: QualifierTypeWhereUniqueInput!): QualifierType
  deleteQualifierTypes(where: [QualifierTypeWhereUniqueInput!]!): [QualifierType]
  createQVersion(data: QVersionCreateInput!): QVersion
  createQVersions(data: [QVersionCreateInput!]!): [QVersion]
  updateQVersion(where: QVersionWhereUniqueInput!, data: QVersionUpdateInput!): QVersion
  updateQVersions(data: [QVersionUpdateArgs!]!): [QVersion]
  deleteQVersion(where: QVersionWhereUniqueInput!): QVersion
  deleteQVersions(where: [QVersionWhereUniqueInput!]!): [QVersion]
  createAbbreviation(data: AbbreviationCreateInput!): Abbreviation
  createAbbreviations(data: [AbbreviationCreateInput!]!): [Abbreviation]
  updateAbbreviation(where: AbbreviationWhereUniqueInput!, data: AbbreviationUpdateInput!): Abbreviation
  updateAbbreviations(data: [AbbreviationUpdateArgs!]!): [Abbreviation]
  deleteAbbreviation(where: AbbreviationWhereUniqueInput!): Abbreviation
  deleteAbbreviations(where: [AbbreviationWhereUniqueInput!]!): [Abbreviation]
  createAspiration(data: AspirationCreateInput!): Aspiration
  createAspirations(data: [AspirationCreateInput!]!): [Aspiration]
  updateAspiration(where: AspirationWhereUniqueInput!, data: AspirationUpdateInput!): Aspiration
  updateAspirations(data: [AspirationUpdateArgs!]!): [Aspiration]
  deleteAspiration(where: AspirationWhereUniqueInput!): Aspiration
  deleteAspirations(where: [AspirationWhereUniqueInput!]!): [Aspiration]
  createAttachmentType(data: AttachmentTypeCreateInput!): AttachmentType
  createAttachmentTypes(data: [AttachmentTypeCreateInput!]!): [AttachmentType]
  updateAttachmentType(where: AttachmentTypeWhereUniqueInput!, data: AttachmentTypeUpdateInput!): AttachmentType
  updateAttachmentTypes(data: [AttachmentTypeUpdateArgs!]!): [AttachmentType]
  deleteAttachmentType(where: AttachmentTypeWhereUniqueInput!): AttachmentType
  deleteAttachmentTypes(where: [AttachmentTypeWhereUniqueInput!]!): [AttachmentType]
  createBaseVehicle(data: BaseVehicleCreateInput!): BaseVehicle
  createBaseVehicles(data: [BaseVehicleCreateInput!]!): [BaseVehicle]
  updateBaseVehicle(where: BaseVehicleWhereUniqueInput!, data: BaseVehicleUpdateInput!): BaseVehicle
  updateBaseVehicles(data: [BaseVehicleUpdateArgs!]!): [BaseVehicle]
  deleteBaseVehicle(where: BaseVehicleWhereUniqueInput!): BaseVehicle
  deleteBaseVehicles(where: [BaseVehicleWhereUniqueInput!]!): [BaseVehicle]
  createBedConfig(data: BedConfigCreateInput!): BedConfig
  createBedConfigs(data: [BedConfigCreateInput!]!): [BedConfig]
  updateBedConfig(where: BedConfigWhereUniqueInput!, data: BedConfigUpdateInput!): BedConfig
  updateBedConfigs(data: [BedConfigUpdateArgs!]!): [BedConfig]
  deleteBedConfig(where: BedConfigWhereUniqueInput!): BedConfig
  deleteBedConfigs(where: [BedConfigWhereUniqueInput!]!): [BedConfig]
  createBodyType(data: BodyTypeCreateInput!): BodyType
  createBodyTypes(data: [BodyTypeCreateInput!]!): [BodyType]
  updateBodyType(where: BodyTypeWhereUniqueInput!, data: BodyTypeUpdateInput!): BodyType
  updateBodyTypes(data: [BodyTypeUpdateArgs!]!): [BodyType]
  deleteBodyType(where: BodyTypeWhereUniqueInput!): BodyType
  deleteBodyTypes(where: [BodyTypeWhereUniqueInput!]!): [BodyType]
  createBodyNumDoors(data: BodyNumDoorsCreateInput!): BodyNumDoors
  createBodyNumDoorsList(data: [BodyNumDoorsCreateInput!]!): [BodyNumDoors]
  updateBodyNumDoors(where: BodyNumDoorsWhereUniqueInput!, data: BodyNumDoorsUpdateInput!): BodyNumDoors
  updateBodyNumDoorsList(data: [BodyNumDoorsUpdateArgs!]!): [BodyNumDoors]
  deleteBodyNumDoors(where: BodyNumDoorsWhereUniqueInput!): BodyNumDoors
  deleteBodyNumDoorsList(where: [BodyNumDoorsWhereUniqueInput!]!): [BodyNumDoors]
  createBodyStyleConfig(data: BodyStyleConfigCreateInput!): BodyStyleConfig
  createBodyStyleConfigs(data: [BodyStyleConfigCreateInput!]!): [BodyStyleConfig]
  updateBodyStyleConfig(where: BodyStyleConfigWhereUniqueInput!, data: BodyStyleConfigUpdateInput!): BodyStyleConfig
  updateBodyStyleConfigs(data: [BodyStyleConfigUpdateArgs!]!): [BodyStyleConfig]
  deleteBodyStyleConfig(where: BodyStyleConfigWhereUniqueInput!): BodyStyleConfig
  deleteBodyStyleConfigs(where: [BodyStyleConfigWhereUniqueInput!]!): [BodyStyleConfig]
  createBrakeABS(data: BrakeABSCreateInput!): BrakeABS
  createBrakeABSList(data: [BrakeABSCreateInput!]!): [BrakeABS]
  updateBrakeABS(where: BrakeABSWhereUniqueInput!, data: BrakeABSUpdateInput!): BrakeABS
  updateBrakeABSList(data: [BrakeABSUpdateArgs!]!): [BrakeABS]
  deleteBrakeABS(where: BrakeABSWhereUniqueInput!): BrakeABS
  deleteBrakeABSList(where: [BrakeABSWhereUniqueInput!]!): [BrakeABS]
  createBrakeConfig(data: BrakeConfigCreateInput!): BrakeConfig
  createBrakeConfigs(data: [BrakeConfigCreateInput!]!): [BrakeConfig]
  updateBrakeConfig(where: BrakeConfigWhereUniqueInput!, data: BrakeConfigUpdateInput!): BrakeConfig
  updateBrakeConfigs(data: [BrakeConfigUpdateArgs!]!): [BrakeConfig]
  deleteBrakeConfig(where: BrakeConfigWhereUniqueInput!): BrakeConfig
  deleteBrakeConfigs(where: [BrakeConfigWhereUniqueInput!]!): [BrakeConfig]
  createBrakeSystem(data: BrakeSystemCreateInput!): BrakeSystem
  createBrakeSystems(data: [BrakeSystemCreateInput!]!): [BrakeSystem]
  updateBrakeSystem(where: BrakeSystemWhereUniqueInput!, data: BrakeSystemUpdateInput!): BrakeSystem
  updateBrakeSystems(data: [BrakeSystemUpdateArgs!]!): [BrakeSystem]
  deleteBrakeSystem(where: BrakeSystemWhereUniqueInput!): BrakeSystem
  deleteBrakeSystems(where: [BrakeSystemWhereUniqueInput!]!): [BrakeSystem]
  createBrakeType(data: BrakeTypeCreateInput!): BrakeType
  createBrakeTypes(data: [BrakeTypeCreateInput!]!): [BrakeType]
  updateBrakeType(where: BrakeTypeWhereUniqueInput!, data: BrakeTypeUpdateInput!): BrakeType
  updateBrakeTypes(data: [BrakeTypeUpdateArgs!]!): [BrakeType]
  deleteBrakeType(where: BrakeTypeWhereUniqueInput!): BrakeType
  deleteBrakeTypes(where: [BrakeTypeWhereUniqueInput!]!): [BrakeType]
  createChangeAttributeState(data: ChangeAttributeStateCreateInput!): ChangeAttributeState
  createChangeAttributeStates(data: [ChangeAttributeStateCreateInput!]!): [ChangeAttributeState]
  updateChangeAttributeState(where: ChangeAttributeStateWhereUniqueInput!, data: ChangeAttributeStateUpdateInput!): ChangeAttributeState
  updateChangeAttributeStates(data: [ChangeAttributeStateUpdateArgs!]!): [ChangeAttributeState]
  deleteChangeAttributeState(where: ChangeAttributeStateWhereUniqueInput!): ChangeAttributeState
  deleteChangeAttributeStates(where: [ChangeAttributeStateWhereUniqueInput!]!): [ChangeAttributeState]
  createVCChangeDetail(data: VCChangeDetailCreateInput!): VCChangeDetail
  createVCChangeDetails(data: [VCChangeDetailCreateInput!]!): [VCChangeDetail]
  updateVCChangeDetail(where: VCChangeDetailWhereUniqueInput!, data: VCChangeDetailUpdateInput!): VCChangeDetail
  updateVCChangeDetails(data: [VCChangeDetailUpdateArgs!]!): [VCChangeDetail]
  deleteVCChangeDetail(where: VCChangeDetailWhereUniqueInput!): VCChangeDetail
  deleteVCChangeDetails(where: [VCChangeDetailWhereUniqueInput!]!): [VCChangeDetail]
  createVCChangeReason(data: VCChangeReasonCreateInput!): VCChangeReason
  createVCChangeReasons(data: [VCChangeReasonCreateInput!]!): [VCChangeReason]
  updateVCChangeReason(where: VCChangeReasonWhereUniqueInput!, data: VCChangeReasonUpdateInput!): VCChangeReason
  updateVCChangeReasons(data: [VCChangeReasonUpdateArgs!]!): [VCChangeReason]
  deleteVCChangeReason(where: VCChangeReasonWhereUniqueInput!): VCChangeReason
  deleteVCChangeReasons(where: [VCChangeReasonWhereUniqueInput!]!): [VCChangeReason]
  createVCChange(data: VCChangeCreateInput!): VCChange
  createVCChanges(data: [VCChangeCreateInput!]!): [VCChange]
  updateVCChange(where: VCChangeWhereUniqueInput!, data: VCChangeUpdateInput!): VCChange
  updateVCChanges(data: [VCChangeUpdateArgs!]!): [VCChange]
  deleteVCChange(where: VCChangeWhereUniqueInput!): VCChange
  deleteVCChanges(where: [VCChangeWhereUniqueInput!]!): [VCChange]
  createVCChangeTableName(data: VCChangeTableNameCreateInput!): VCChangeTableName
  createVCChangeTableNames(data: [VCChangeTableNameCreateInput!]!): [VCChangeTableName]
  updateVCChangeTableName(where: VCChangeTableNameWhereUniqueInput!, data: VCChangeTableNameUpdateInput!): VCChangeTableName
  updateVCChangeTableNames(data: [VCChangeTableNameUpdateArgs!]!): [VCChangeTableName]
  deleteVCChangeTableName(where: VCChangeTableNameWhereUniqueInput!): VCChangeTableName
  deleteVCChangeTableNames(where: [VCChangeTableNameWhereUniqueInput!]!): [VCChangeTableName]
  createClass(data: ClassCreateInput!): Class
  createClasses(data: [ClassCreateInput!]!): [Class]
  updateClass(where: ClassWhereUniqueInput!, data: ClassUpdateInput!): Class
  updateClasses(data: [ClassUpdateArgs!]!): [Class]
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteClasses(where: [ClassWhereUniqueInput!]!): [Class]
  createCylinderHeadType(data: CylinderHeadTypeCreateInput!): CylinderHeadType
  createCylinderHeadTypes(data: [CylinderHeadTypeCreateInput!]!): [CylinderHeadType]
  updateCylinderHeadType(where: CylinderHeadTypeWhereUniqueInput!, data: CylinderHeadTypeUpdateInput!): CylinderHeadType
  updateCylinderHeadTypes(data: [CylinderHeadTypeUpdateArgs!]!): [CylinderHeadType]
  deleteCylinderHeadType(where: CylinderHeadTypeWhereUniqueInput!): CylinderHeadType
  deleteCylinderHeadTypes(where: [CylinderHeadTypeWhereUniqueInput!]!): [CylinderHeadType]
  createDriveType(data: DriveTypeCreateInput!): DriveType
  createDriveTypes(data: [DriveTypeCreateInput!]!): [DriveType]
  updateDriveType(where: DriveTypeWhereUniqueInput!, data: DriveTypeUpdateInput!): DriveType
  updateDriveTypes(data: [DriveTypeUpdateArgs!]!): [DriveType]
  deleteDriveType(where: DriveTypeWhereUniqueInput!): DriveType
  deleteDriveTypes(where: [DriveTypeWhereUniqueInput!]!): [DriveType]
  createElecControlled(data: ElecControlledCreateInput!): ElecControlled
  createElecControlleds(data: [ElecControlledCreateInput!]!): [ElecControlled]
  updateElecControlled(where: ElecControlledWhereUniqueInput!, data: ElecControlledUpdateInput!): ElecControlled
  updateElecControlleds(data: [ElecControlledUpdateArgs!]!): [ElecControlled]
  deleteElecControlled(where: ElecControlledWhereUniqueInput!): ElecControlled
  deleteElecControlleds(where: [ElecControlledWhereUniqueInput!]!): [ElecControlled]
  createEngineBase(data: EngineBaseCreateInput!): EngineBase
  createEngineBases(data: [EngineBaseCreateInput!]!): [EngineBase]
  updateEngineBase(where: EngineBaseWhereUniqueInput!, data: EngineBaseUpdateInput!): EngineBase
  updateEngineBases(data: [EngineBaseUpdateArgs!]!): [EngineBase]
  deleteEngineBase(where: EngineBaseWhereUniqueInput!): EngineBase
  deleteEngineBases(where: [EngineBaseWhereUniqueInput!]!): [EngineBase]
  createEngineBase2(data: EngineBase2CreateInput!): EngineBase2
  createEngineBase2s(data: [EngineBase2CreateInput!]!): [EngineBase2]
  updateEngineBase2(where: EngineBase2WhereUniqueInput!, data: EngineBase2UpdateInput!): EngineBase2
  updateEngineBase2s(data: [EngineBase2UpdateArgs!]!): [EngineBase2]
  deleteEngineBase2(where: EngineBase2WhereUniqueInput!): EngineBase2
  deleteEngineBase2s(where: [EngineBase2WhereUniqueInput!]!): [EngineBase2]
  createEngineBlock(data: EngineBlockCreateInput!): EngineBlock
  createEngineBlocks(data: [EngineBlockCreateInput!]!): [EngineBlock]
  updateEngineBlock(where: EngineBlockWhereUniqueInput!, data: EngineBlockUpdateInput!): EngineBlock
  updateEngineBlocks(data: [EngineBlockUpdateArgs!]!): [EngineBlock]
  deleteEngineBlock(where: EngineBlockWhereUniqueInput!): EngineBlock
  deleteEngineBlocks(where: [EngineBlockWhereUniqueInput!]!): [EngineBlock]
  createEngineBoreStroke(data: EngineBoreStrokeCreateInput!): EngineBoreStroke
  createEngineBoreStrokes(data: [EngineBoreStrokeCreateInput!]!): [EngineBoreStroke]
  updateEngineBoreStroke(where: EngineBoreStrokeWhereUniqueInput!, data: EngineBoreStrokeUpdateInput!): EngineBoreStroke
  updateEngineBoreStrokes(data: [EngineBoreStrokeUpdateArgs!]!): [EngineBoreStroke]
  deleteEngineBoreStroke(where: EngineBoreStrokeWhereUniqueInput!): EngineBoreStroke
  deleteEngineBoreStrokes(where: [EngineBoreStrokeWhereUniqueInput!]!): [EngineBoreStroke]
  createEngineConfig(data: EngineConfigCreateInput!): EngineConfig
  createEngineConfigs(data: [EngineConfigCreateInput!]!): [EngineConfig]
  updateEngineConfig(where: EngineConfigWhereUniqueInput!, data: EngineConfigUpdateInput!): EngineConfig
  updateEngineConfigs(data: [EngineConfigUpdateArgs!]!): [EngineConfig]
  deleteEngineConfig(where: EngineConfigWhereUniqueInput!): EngineConfig
  deleteEngineConfigs(where: [EngineConfigWhereUniqueInput!]!): [EngineConfig]
  createEngineConfig2(data: EngineConfig2CreateInput!): EngineConfig2
  createEngineConfig2s(data: [EngineConfig2CreateInput!]!): [EngineConfig2]
  updateEngineConfig2(where: EngineConfig2WhereUniqueInput!, data: EngineConfig2UpdateInput!): EngineConfig2
  updateEngineConfig2s(data: [EngineConfig2UpdateArgs!]!): [EngineConfig2]
  deleteEngineConfig2(where: EngineConfig2WhereUniqueInput!): EngineConfig2
  deleteEngineConfig2s(where: [EngineConfig2WhereUniqueInput!]!): [EngineConfig2]
  createEngineDesignation(data: EngineDesignationCreateInput!): EngineDesignation
  createEngineDesignations(data: [EngineDesignationCreateInput!]!): [EngineDesignation]
  updateEngineDesignation(where: EngineDesignationWhereUniqueInput!, data: EngineDesignationUpdateInput!): EngineDesignation
  updateEngineDesignations(data: [EngineDesignationUpdateArgs!]!): [EngineDesignation]
  deleteEngineDesignation(where: EngineDesignationWhereUniqueInput!): EngineDesignation
  deleteEngineDesignations(where: [EngineDesignationWhereUniqueInput!]!): [EngineDesignation]
  createEngineVersion(data: EngineVersionCreateInput!): EngineVersion
  createEngineVersions(data: [EngineVersionCreateInput!]!): [EngineVersion]
  updateEngineVersion(where: EngineVersionWhereUniqueInput!, data: EngineVersionUpdateInput!): EngineVersion
  updateEngineVersions(data: [EngineVersionUpdateArgs!]!): [EngineVersion]
  deleteEngineVersion(where: EngineVersionWhereUniqueInput!): EngineVersion
  deleteEngineVersions(where: [EngineVersionWhereUniqueInput!]!): [EngineVersion]
  createEngineVIN(data: EngineVINCreateInput!): EngineVIN
  createEngineVINS(data: [EngineVINCreateInput!]!): [EngineVIN]
  updateEngineVIN(where: EngineVINWhereUniqueInput!, data: EngineVINUpdateInput!): EngineVIN
  updateEngineVINS(data: [EngineVINUpdateArgs!]!): [EngineVIN]
  deleteEngineVIN(where: EngineVINWhereUniqueInput!): EngineVIN
  deleteEngineVINS(where: [EngineVINWhereUniqueInput!]!): [EngineVIN]
  createEnglishPhrase(data: EnglishPhraseCreateInput!): EnglishPhrase
  createEnglishPhrases(data: [EnglishPhraseCreateInput!]!): [EnglishPhrase]
  updateEnglishPhrase(where: EnglishPhraseWhereUniqueInput!, data: EnglishPhraseUpdateInput!): EnglishPhrase
  updateEnglishPhrases(data: [EnglishPhraseUpdateArgs!]!): [EnglishPhrase]
  deleteEnglishPhrase(where: EnglishPhraseWhereUniqueInput!): EnglishPhrase
  deleteEnglishPhrases(where: [EnglishPhraseWhereUniqueInput!]!): [EnglishPhrase]
  createEquipment(data: EquipmentCreateInput!): Equipment
  createEquipments(data: [EquipmentCreateInput!]!): [Equipment]
  updateEquipment(where: EquipmentWhereUniqueInput!, data: EquipmentUpdateInput!): Equipment
  updateEquipments(data: [EquipmentUpdateArgs!]!): [Equipment]
  deleteEquipment(where: EquipmentWhereUniqueInput!): Equipment
  deleteEquipments(where: [EquipmentWhereUniqueInput!]!): [Equipment]
  createEquipmentBase(data: EquipmentBaseCreateInput!): EquipmentBase
  createEquipmentBases(data: [EquipmentBaseCreateInput!]!): [EquipmentBase]
  updateEquipmentBase(where: EquipmentBaseWhereUniqueInput!, data: EquipmentBaseUpdateInput!): EquipmentBase
  updateEquipmentBases(data: [EquipmentBaseUpdateArgs!]!): [EquipmentBase]
  deleteEquipmentBase(where: EquipmentBaseWhereUniqueInput!): EquipmentBase
  deleteEquipmentBases(where: [EquipmentBaseWhereUniqueInput!]!): [EquipmentBase]
  createEquipmentModel(data: EquipmentModelCreateInput!): EquipmentModel
  createEquipmentModels(data: [EquipmentModelCreateInput!]!): [EquipmentModel]
  updateEquipmentModel(where: EquipmentModelWhereUniqueInput!, data: EquipmentModelUpdateInput!): EquipmentModel
  updateEquipmentModels(data: [EquipmentModelUpdateArgs!]!): [EquipmentModel]
  deleteEquipmentModel(where: EquipmentModelWhereUniqueInput!): EquipmentModel
  deleteEquipmentModels(where: [EquipmentModelWhereUniqueInput!]!): [EquipmentModel]
  createEquipmentToEngineConfig(data: EquipmentToEngineConfigCreateInput!): EquipmentToEngineConfig
  createEquipmentToEngineConfigs(data: [EquipmentToEngineConfigCreateInput!]!): [EquipmentToEngineConfig]
  updateEquipmentToEngineConfig(where: EquipmentToEngineConfigWhereUniqueInput!, data: EquipmentToEngineConfigUpdateInput!): EquipmentToEngineConfig
  updateEquipmentToEngineConfigs(data: [EquipmentToEngineConfigUpdateArgs!]!): [EquipmentToEngineConfig]
  deleteEquipmentToEngineConfig(where: EquipmentToEngineConfigWhereUniqueInput!): EquipmentToEngineConfig
  deleteEquipmentToEngineConfigs(where: [EquipmentToEngineConfigWhereUniqueInput!]!): [EquipmentToEngineConfig]
  createFuelDeliveryConfig(data: FuelDeliveryConfigCreateInput!): FuelDeliveryConfig
  createFuelDeliveryConfigs(data: [FuelDeliveryConfigCreateInput!]!): [FuelDeliveryConfig]
  updateFuelDeliveryConfig(where: FuelDeliveryConfigWhereUniqueInput!, data: FuelDeliveryConfigUpdateInput!): FuelDeliveryConfig
  updateFuelDeliveryConfigs(data: [FuelDeliveryConfigUpdateArgs!]!): [FuelDeliveryConfig]
  deleteFuelDeliveryConfig(where: FuelDeliveryConfigWhereUniqueInput!): FuelDeliveryConfig
  deleteFuelDeliveryConfigs(where: [FuelDeliveryConfigWhereUniqueInput!]!): [FuelDeliveryConfig]
  createFuelDeliverySubType(data: FuelDeliverySubTypeCreateInput!): FuelDeliverySubType
  createFuelDeliverySubTypes(data: [FuelDeliverySubTypeCreateInput!]!): [FuelDeliverySubType]
  updateFuelDeliverySubType(where: FuelDeliverySubTypeWhereUniqueInput!, data: FuelDeliverySubTypeUpdateInput!): FuelDeliverySubType
  updateFuelDeliverySubTypes(data: [FuelDeliverySubTypeUpdateArgs!]!): [FuelDeliverySubType]
  deleteFuelDeliverySubType(where: FuelDeliverySubTypeWhereUniqueInput!): FuelDeliverySubType
  deleteFuelDeliverySubTypes(where: [FuelDeliverySubTypeWhereUniqueInput!]!): [FuelDeliverySubType]
  createFuelDeliveryType(data: FuelDeliveryTypeCreateInput!): FuelDeliveryType
  createFuelDeliveryTypes(data: [FuelDeliveryTypeCreateInput!]!): [FuelDeliveryType]
  updateFuelDeliveryType(where: FuelDeliveryTypeWhereUniqueInput!, data: FuelDeliveryTypeUpdateInput!): FuelDeliveryType
  updateFuelDeliveryTypes(data: [FuelDeliveryTypeUpdateArgs!]!): [FuelDeliveryType]
  deleteFuelDeliveryType(where: FuelDeliveryTypeWhereUniqueInput!): FuelDeliveryType
  deleteFuelDeliveryTypes(where: [FuelDeliveryTypeWhereUniqueInput!]!): [FuelDeliveryType]
  createFuelSystemControlType(data: FuelSystemControlTypeCreateInput!): FuelSystemControlType
  createFuelSystemControlTypes(data: [FuelSystemControlTypeCreateInput!]!): [FuelSystemControlType]
  updateFuelSystemControlType(where: FuelSystemControlTypeWhereUniqueInput!, data: FuelSystemControlTypeUpdateInput!): FuelSystemControlType
  updateFuelSystemControlTypes(data: [FuelSystemControlTypeUpdateArgs!]!): [FuelSystemControlType]
  deleteFuelSystemControlType(where: FuelSystemControlTypeWhereUniqueInput!): FuelSystemControlType
  deleteFuelSystemControlTypes(where: [FuelSystemControlTypeWhereUniqueInput!]!): [FuelSystemControlType]
  createFuelSystemDesign(data: FuelSystemDesignCreateInput!): FuelSystemDesign
  createFuelSystemDesigns(data: [FuelSystemDesignCreateInput!]!): [FuelSystemDesign]
  updateFuelSystemDesign(where: FuelSystemDesignWhereUniqueInput!, data: FuelSystemDesignUpdateInput!): FuelSystemDesign
  updateFuelSystemDesigns(data: [FuelSystemDesignUpdateArgs!]!): [FuelSystemDesign]
  deleteFuelSystemDesign(where: FuelSystemDesignWhereUniqueInput!): FuelSystemDesign
  deleteFuelSystemDesigns(where: [FuelSystemDesignWhereUniqueInput!]!): [FuelSystemDesign]
  createFuelType(data: FuelTypeCreateInput!): FuelType
  createFuelTypes(data: [FuelTypeCreateInput!]!): [FuelType]
  updateFuelType(where: FuelTypeWhereUniqueInput!, data: FuelTypeUpdateInput!): FuelType
  updateFuelTypes(data: [FuelTypeUpdateArgs!]!): [FuelType]
  deleteFuelType(where: FuelTypeWhereUniqueInput!): FuelType
  deleteFuelTypes(where: [FuelTypeWhereUniqueInput!]!): [FuelType]
  createIgnitionSystemType(data: IgnitionSystemTypeCreateInput!): IgnitionSystemType
  createIgnitionSystemTypes(data: [IgnitionSystemTypeCreateInput!]!): [IgnitionSystemType]
  updateIgnitionSystemType(where: IgnitionSystemTypeWhereUniqueInput!, data: IgnitionSystemTypeUpdateInput!): IgnitionSystemType
  updateIgnitionSystemTypes(data: [IgnitionSystemTypeUpdateArgs!]!): [IgnitionSystemType]
  deleteIgnitionSystemType(where: IgnitionSystemTypeWhereUniqueInput!): IgnitionSystemType
  deleteIgnitionSystemTypes(where: [IgnitionSystemTypeWhereUniqueInput!]!): [IgnitionSystemType]
  createVCLanguage(data: VCLanguageCreateInput!): VCLanguage
  createVCLanguages(data: [VCLanguageCreateInput!]!): [VCLanguage]
  updateVCLanguage(where: VCLanguageWhereUniqueInput!, data: VCLanguageUpdateInput!): VCLanguage
  updateVCLanguages(data: [VCLanguageUpdateArgs!]!): [VCLanguage]
  deleteVCLanguage(where: VCLanguageWhereUniqueInput!): VCLanguage
  deleteVCLanguages(where: [VCLanguageWhereUniqueInput!]!): [VCLanguage]
  createLanguageTranslation(data: LanguageTranslationCreateInput!): LanguageTranslation
  createLanguageTranslations(data: [LanguageTranslationCreateInput!]!): [LanguageTranslation]
  updateLanguageTranslation(where: LanguageTranslationWhereUniqueInput!, data: LanguageTranslationUpdateInput!): LanguageTranslation
  updateLanguageTranslations(data: [LanguageTranslationUpdateArgs!]!): [LanguageTranslation]
  deleteLanguageTranslation(where: LanguageTranslationWhereUniqueInput!): LanguageTranslation
  deleteLanguageTranslations(where: [LanguageTranslationWhereUniqueInput!]!): [LanguageTranslation]
  createLanguageTranslationAttachment(data: LanguageTranslationAttachmentCreateInput!): LanguageTranslationAttachment
  createLanguageTranslationAttachments(data: [LanguageTranslationAttachmentCreateInput!]!): [LanguageTranslationAttachment]
  updateLanguageTranslationAttachment(where: LanguageTranslationAttachmentWhereUniqueInput!, data: LanguageTranslationAttachmentUpdateInput!): LanguageTranslationAttachment
  updateLanguageTranslationAttachments(data: [LanguageTranslationAttachmentUpdateArgs!]!): [LanguageTranslationAttachment]
  deleteLanguageTranslationAttachment(where: LanguageTranslationAttachmentWhereUniqueInput!): LanguageTranslationAttachment
  deleteLanguageTranslationAttachments(where: [LanguageTranslationAttachmentWhereUniqueInput!]!): [LanguageTranslationAttachment]
  createMake(data: MakeCreateInput!): Make
  createMakes(data: [MakeCreateInput!]!): [Make]
  updateMake(where: MakeWhereUniqueInput!, data: MakeUpdateInput!): Make
  updateMakes(data: [MakeUpdateArgs!]!): [Make]
  deleteMake(where: MakeWhereUniqueInput!): Make
  deleteMakes(where: [MakeWhereUniqueInput!]!): [Make]
  createMfr(data: MfrCreateInput!): Mfr
  createMfrs(data: [MfrCreateInput!]!): [Mfr]
  updateMfr(where: MfrWhereUniqueInput!, data: MfrUpdateInput!): Mfr
  updateMfrs(data: [MfrUpdateArgs!]!): [Mfr]
  deleteMfr(where: MfrWhereUniqueInput!): Mfr
  deleteMfrs(where: [MfrWhereUniqueInput!]!): [Mfr]
  createMfrBodyCode(data: MfrBodyCodeCreateInput!): MfrBodyCode
  createMfrBodyCodes(data: [MfrBodyCodeCreateInput!]!): [MfrBodyCode]
  updateMfrBodyCode(where: MfrBodyCodeWhereUniqueInput!, data: MfrBodyCodeUpdateInput!): MfrBodyCode
  updateMfrBodyCodes(data: [MfrBodyCodeUpdateArgs!]!): [MfrBodyCode]
  deleteMfrBodyCode(where: MfrBodyCodeWhereUniqueInput!): MfrBodyCode
  deleteMfrBodyCodes(where: [MfrBodyCodeWhereUniqueInput!]!): [MfrBodyCode]
  createModel(data: ModelCreateInput!): Model
  createModels(data: [ModelCreateInput!]!): [Model]
  updateModel(where: ModelWhereUniqueInput!, data: ModelUpdateInput!): Model
  updateModels(data: [ModelUpdateArgs!]!): [Model]
  deleteModel(where: ModelWhereUniqueInput!): Model
  deleteModels(where: [ModelWhereUniqueInput!]!): [Model]
  createPowerOutput(data: PowerOutputCreateInput!): PowerOutput
  createPowerOutputs(data: [PowerOutputCreateInput!]!): [PowerOutput]
  updatePowerOutput(where: PowerOutputWhereUniqueInput!, data: PowerOutputUpdateInput!): PowerOutput
  updatePowerOutputs(data: [PowerOutputUpdateArgs!]!): [PowerOutput]
  deletePowerOutput(where: PowerOutputWhereUniqueInput!): PowerOutput
  deletePowerOutputs(where: [PowerOutputWhereUniqueInput!]!): [PowerOutput]
  createPublicationStage(data: PublicationStageCreateInput!): PublicationStage
  createPublicationStages(data: [PublicationStageCreateInput!]!): [PublicationStage]
  updatePublicationStage(where: PublicationStageWhereUniqueInput!, data: PublicationStageUpdateInput!): PublicationStage
  updatePublicationStages(data: [PublicationStageUpdateArgs!]!): [PublicationStage]
  deletePublicationStage(where: PublicationStageWhereUniqueInput!): PublicationStage
  deletePublicationStages(where: [PublicationStageWhereUniqueInput!]!): [PublicationStage]
  createRegion(data: RegionCreateInput!): Region
  createRegions(data: [RegionCreateInput!]!): [Region]
  updateRegion(where: RegionWhereUniqueInput!, data: RegionUpdateInput!): Region
  updateRegions(data: [RegionUpdateArgs!]!): [Region]
  deleteRegion(where: RegionWhereUniqueInput!): Region
  deleteRegions(where: [RegionWhereUniqueInput!]!): [Region]
  createSpringType(data: SpringTypeCreateInput!): SpringType
  createSpringTypes(data: [SpringTypeCreateInput!]!): [SpringType]
  updateSpringType(where: SpringTypeWhereUniqueInput!, data: SpringTypeUpdateInput!): SpringType
  updateSpringTypes(data: [SpringTypeUpdateArgs!]!): [SpringType]
  deleteSpringType(where: SpringTypeWhereUniqueInput!): SpringType
  deleteSpringTypes(where: [SpringTypeWhereUniqueInput!]!): [SpringType]
  createSpringTypeConfig(data: SpringTypeConfigCreateInput!): SpringTypeConfig
  createSpringTypeConfigs(data: [SpringTypeConfigCreateInput!]!): [SpringTypeConfig]
  updateSpringTypeConfig(where: SpringTypeConfigWhereUniqueInput!, data: SpringTypeConfigUpdateInput!): SpringTypeConfig
  updateSpringTypeConfigs(data: [SpringTypeConfigUpdateArgs!]!): [SpringTypeConfig]
  deleteSpringTypeConfig(where: SpringTypeConfigWhereUniqueInput!): SpringTypeConfig
  deleteSpringTypeConfigs(where: [SpringTypeConfigWhereUniqueInput!]!): [SpringTypeConfig]
  createSteeringConfig(data: SteeringConfigCreateInput!): SteeringConfig
  createSteeringConfigs(data: [SteeringConfigCreateInput!]!): [SteeringConfig]
  updateSteeringConfig(where: SteeringConfigWhereUniqueInput!, data: SteeringConfigUpdateInput!): SteeringConfig
  updateSteeringConfigs(data: [SteeringConfigUpdateArgs!]!): [SteeringConfig]
  deleteSteeringConfig(where: SteeringConfigWhereUniqueInput!): SteeringConfig
  deleteSteeringConfigs(where: [SteeringConfigWhereUniqueInput!]!): [SteeringConfig]
  createSteeringSystem(data: SteeringSystemCreateInput!): SteeringSystem
  createSteeringSystems(data: [SteeringSystemCreateInput!]!): [SteeringSystem]
  updateSteeringSystem(where: SteeringSystemWhereUniqueInput!, data: SteeringSystemUpdateInput!): SteeringSystem
  updateSteeringSystems(data: [SteeringSystemUpdateArgs!]!): [SteeringSystem]
  deleteSteeringSystem(where: SteeringSystemWhereUniqueInput!): SteeringSystem
  deleteSteeringSystems(where: [SteeringSystemWhereUniqueInput!]!): [SteeringSystem]
  createSteeringType(data: SteeringTypeCreateInput!): SteeringType
  createSteeringTypes(data: [SteeringTypeCreateInput!]!): [SteeringType]
  updateSteeringType(where: SteeringTypeWhereUniqueInput!, data: SteeringTypeUpdateInput!): SteeringType
  updateSteeringTypes(data: [SteeringTypeUpdateArgs!]!): [SteeringType]
  deleteSteeringType(where: SteeringTypeWhereUniqueInput!): SteeringType
  deleteSteeringTypes(where: [SteeringTypeWhereUniqueInput!]!): [SteeringType]
  createSubModel(data: SubModelCreateInput!): SubModel
  createSubModels(data: [SubModelCreateInput!]!): [SubModel]
  updateSubModel(where: SubModelWhereUniqueInput!, data: SubModelUpdateInput!): SubModel
  updateSubModels(data: [SubModelUpdateArgs!]!): [SubModel]
  deleteSubModel(where: SubModelWhereUniqueInput!): SubModel
  deleteSubModels(where: [SubModelWhereUniqueInput!]!): [SubModel]
  createTransmission(data: TransmissionCreateInput!): Transmission
  createTransmissions(data: [TransmissionCreateInput!]!): [Transmission]
  updateTransmission(where: TransmissionWhereUniqueInput!, data: TransmissionUpdateInput!): Transmission
  updateTransmissions(data: [TransmissionUpdateArgs!]!): [Transmission]
  deleteTransmission(where: TransmissionWhereUniqueInput!): Transmission
  deleteTransmissions(where: [TransmissionWhereUniqueInput!]!): [Transmission]
  createTransmissionBase(data: TransmissionBaseCreateInput!): TransmissionBase
  createTransmissionBases(data: [TransmissionBaseCreateInput!]!): [TransmissionBase]
  updateTransmissionBase(where: TransmissionBaseWhereUniqueInput!, data: TransmissionBaseUpdateInput!): TransmissionBase
  updateTransmissionBases(data: [TransmissionBaseUpdateArgs!]!): [TransmissionBase]
  deleteTransmissionBase(where: TransmissionBaseWhereUniqueInput!): TransmissionBase
  deleteTransmissionBases(where: [TransmissionBaseWhereUniqueInput!]!): [TransmissionBase]
  createTransmissionControlType(data: TransmissionControlTypeCreateInput!): TransmissionControlType
  createTransmissionControlTypes(data: [TransmissionControlTypeCreateInput!]!): [TransmissionControlType]
  updateTransmissionControlType(where: TransmissionControlTypeWhereUniqueInput!, data: TransmissionControlTypeUpdateInput!): TransmissionControlType
  updateTransmissionControlTypes(data: [TransmissionControlTypeUpdateArgs!]!): [TransmissionControlType]
  deleteTransmissionControlType(where: TransmissionControlTypeWhereUniqueInput!): TransmissionControlType
  deleteTransmissionControlTypes(where: [TransmissionControlTypeWhereUniqueInput!]!): [TransmissionControlType]
  createTransmissionMfrCode(data: TransmissionMfrCodeCreateInput!): TransmissionMfrCode
  createTransmissionMfrCodes(data: [TransmissionMfrCodeCreateInput!]!): [TransmissionMfrCode]
  updateTransmissionMfrCode(where: TransmissionMfrCodeWhereUniqueInput!, data: TransmissionMfrCodeUpdateInput!): TransmissionMfrCode
  updateTransmissionMfrCodes(data: [TransmissionMfrCodeUpdateArgs!]!): [TransmissionMfrCode]
  deleteTransmissionMfrCode(where: TransmissionMfrCodeWhereUniqueInput!): TransmissionMfrCode
  deleteTransmissionMfrCodes(where: [TransmissionMfrCodeWhereUniqueInput!]!): [TransmissionMfrCode]
  createTransmissionNumSpeed(data: TransmissionNumSpeedCreateInput!): TransmissionNumSpeed
  createTransmissionNumSpeeds(data: [TransmissionNumSpeedCreateInput!]!): [TransmissionNumSpeed]
  updateTransmissionNumSpeed(where: TransmissionNumSpeedWhereUniqueInput!, data: TransmissionNumSpeedUpdateInput!): TransmissionNumSpeed
  updateTransmissionNumSpeeds(data: [TransmissionNumSpeedUpdateArgs!]!): [TransmissionNumSpeed]
  deleteTransmissionNumSpeed(where: TransmissionNumSpeedWhereUniqueInput!): TransmissionNumSpeed
  deleteTransmissionNumSpeeds(where: [TransmissionNumSpeedWhereUniqueInput!]!): [TransmissionNumSpeed]
  createTransmissionType(data: TransmissionTypeCreateInput!): TransmissionType
  createTransmissionTypes(data: [TransmissionTypeCreateInput!]!): [TransmissionType]
  updateTransmissionType(where: TransmissionTypeWhereUniqueInput!, data: TransmissionTypeUpdateInput!): TransmissionType
  updateTransmissionTypes(data: [TransmissionTypeUpdateArgs!]!): [TransmissionType]
  deleteTransmissionType(where: TransmissionTypeWhereUniqueInput!): TransmissionType
  deleteTransmissionTypes(where: [TransmissionTypeWhereUniqueInput!]!): [TransmissionType]
  createValve(data: ValveCreateInput!): Valve
  createValves(data: [ValveCreateInput!]!): [Valve]
  updateValve(where: ValveWhereUniqueInput!, data: ValveUpdateInput!): Valve
  updateValves(data: [ValveUpdateArgs!]!): [Valve]
  deleteValve(where: ValveWhereUniqueInput!): Valve
  deleteValves(where: [ValveWhereUniqueInput!]!): [Valve]
  createVCdbChange(data: VCdbChangeCreateInput!): VCdbChange
  createVCdbChanges(data: [VCdbChangeCreateInput!]!): [VCdbChange]
  updateVCdbChange(where: VCdbChangeWhereUniqueInput!, data: VCdbChangeUpdateInput!): VCdbChange
  updateVCdbChanges(data: [VCdbChangeUpdateArgs!]!): [VCdbChange]
  deleteVCdbChange(where: VCdbChangeWhereUniqueInput!): VCdbChange
  deleteVCdbChanges(where: [VCdbChangeWhereUniqueInput!]!): [VCdbChange]
  createVehicle(data: VehicleCreateInput!): Vehicle
  createVehicles(data: [VehicleCreateInput!]!): [Vehicle]
  updateVehicle(where: VehicleWhereUniqueInput!, data: VehicleUpdateInput!): Vehicle
  updateVehicles(data: [VehicleUpdateArgs!]!): [Vehicle]
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteVehicles(where: [VehicleWhereUniqueInput!]!): [Vehicle]
  createVehicleToBedConfig(data: VehicleToBedConfigCreateInput!): VehicleToBedConfig
  createVehicleToBedConfigs(data: [VehicleToBedConfigCreateInput!]!): [VehicleToBedConfig]
  updateVehicleToBedConfig(where: VehicleToBedConfigWhereUniqueInput!, data: VehicleToBedConfigUpdateInput!): VehicleToBedConfig
  updateVehicleToBedConfigs(data: [VehicleToBedConfigUpdateArgs!]!): [VehicleToBedConfig]
  deleteVehicleToBedConfig(where: VehicleToBedConfigWhereUniqueInput!): VehicleToBedConfig
  deleteVehicleToBedConfigs(where: [VehicleToBedConfigWhereUniqueInput!]!): [VehicleToBedConfig]
  createVehicleToBodyConfig(data: VehicleToBodyConfigCreateInput!): VehicleToBodyConfig
  createVehicleToBodyConfigs(data: [VehicleToBodyConfigCreateInput!]!): [VehicleToBodyConfig]
  updateVehicleToBodyConfig(where: VehicleToBodyConfigWhereUniqueInput!, data: VehicleToBodyConfigUpdateInput!): VehicleToBodyConfig
  updateVehicleToBodyConfigs(data: [VehicleToBodyConfigUpdateArgs!]!): [VehicleToBodyConfig]
  deleteVehicleToBodyConfig(where: VehicleToBodyConfigWhereUniqueInput!): VehicleToBodyConfig
  deleteVehicleToBodyConfigs(where: [VehicleToBodyConfigWhereUniqueInput!]!): [VehicleToBodyConfig]
  createVehicleToBodyStyleConfig(data: VehicleToBodyStyleConfigCreateInput!): VehicleToBodyStyleConfig
  createVehicleToBodyStyleConfigs(data: [VehicleToBodyStyleConfigCreateInput!]!): [VehicleToBodyStyleConfig]
  updateVehicleToBodyStyleConfig(where: VehicleToBodyStyleConfigWhereUniqueInput!, data: VehicleToBodyStyleConfigUpdateInput!): VehicleToBodyStyleConfig
  updateVehicleToBodyStyleConfigs(data: [VehicleToBodyStyleConfigUpdateArgs!]!): [VehicleToBodyStyleConfig]
  deleteVehicleToBodyStyleConfig(where: VehicleToBodyStyleConfigWhereUniqueInput!): VehicleToBodyStyleConfig
  deleteVehicleToBodyStyleConfigs(where: [VehicleToBodyStyleConfigWhereUniqueInput!]!): [VehicleToBodyStyleConfig]
  createVehicleToBrakeConfig(data: VehicleToBrakeConfigCreateInput!): VehicleToBrakeConfig
  createVehicleToBrakeConfigs(data: [VehicleToBrakeConfigCreateInput!]!): [VehicleToBrakeConfig]
  updateVehicleToBrakeConfig(where: VehicleToBrakeConfigWhereUniqueInput!, data: VehicleToBrakeConfigUpdateInput!): VehicleToBrakeConfig
  updateVehicleToBrakeConfigs(data: [VehicleToBrakeConfigUpdateArgs!]!): [VehicleToBrakeConfig]
  deleteVehicleToBrakeConfig(where: VehicleToBrakeConfigWhereUniqueInput!): VehicleToBrakeConfig
  deleteVehicleToBrakeConfigs(where: [VehicleToBrakeConfigWhereUniqueInput!]!): [VehicleToBrakeConfig]
  createVehicleToClass(data: VehicleToClassCreateInput!): VehicleToClass
  createVehicleToClasses(data: [VehicleToClassCreateInput!]!): [VehicleToClass]
  updateVehicleToClass(where: VehicleToClassWhereUniqueInput!, data: VehicleToClassUpdateInput!): VehicleToClass
  updateVehicleToClasses(data: [VehicleToClassUpdateArgs!]!): [VehicleToClass]
  deleteVehicleToClass(where: VehicleToClassWhereUniqueInput!): VehicleToClass
  deleteVehicleToClasses(where: [VehicleToClassWhereUniqueInput!]!): [VehicleToClass]
  createVehicleToDriveType(data: VehicleToDriveTypeCreateInput!): VehicleToDriveType
  createVehicleToDriveTypes(data: [VehicleToDriveTypeCreateInput!]!): [VehicleToDriveType]
  updateVehicleToDriveType(where: VehicleToDriveTypeWhereUniqueInput!, data: VehicleToDriveTypeUpdateInput!): VehicleToDriveType
  updateVehicleToDriveTypes(data: [VehicleToDriveTypeUpdateArgs!]!): [VehicleToDriveType]
  deleteVehicleToDriveType(where: VehicleToDriveTypeWhereUniqueInput!): VehicleToDriveType
  deleteVehicleToDriveTypes(where: [VehicleToDriveTypeWhereUniqueInput!]!): [VehicleToDriveType]
  createVehicleToEngineConfig(data: VehicleToEngineConfigCreateInput!): VehicleToEngineConfig
  createVehicleToEngineConfigs(data: [VehicleToEngineConfigCreateInput!]!): [VehicleToEngineConfig]
  updateVehicleToEngineConfig(where: VehicleToEngineConfigWhereUniqueInput!, data: VehicleToEngineConfigUpdateInput!): VehicleToEngineConfig
  updateVehicleToEngineConfigs(data: [VehicleToEngineConfigUpdateArgs!]!): [VehicleToEngineConfig]
  deleteVehicleToEngineConfig(where: VehicleToEngineConfigWhereUniqueInput!): VehicleToEngineConfig
  deleteVehicleToEngineConfigs(where: [VehicleToEngineConfigWhereUniqueInput!]!): [VehicleToEngineConfig]
  createVehicleToMfrBodyCode(data: VehicleToMfrBodyCodeCreateInput!): VehicleToMfrBodyCode
  createVehicleToMfrBodyCodes(data: [VehicleToMfrBodyCodeCreateInput!]!): [VehicleToMfrBodyCode]
  updateVehicleToMfrBodyCode(where: VehicleToMfrBodyCodeWhereUniqueInput!, data: VehicleToMfrBodyCodeUpdateInput!): VehicleToMfrBodyCode
  updateVehicleToMfrBodyCodes(data: [VehicleToMfrBodyCodeUpdateArgs!]!): [VehicleToMfrBodyCode]
  deleteVehicleToMfrBodyCode(where: VehicleToMfrBodyCodeWhereUniqueInput!): VehicleToMfrBodyCode
  deleteVehicleToMfrBodyCodes(where: [VehicleToMfrBodyCodeWhereUniqueInput!]!): [VehicleToMfrBodyCode]
  createVehicleToSpringTypeConfig(data: VehicleToSpringTypeConfigCreateInput!): VehicleToSpringTypeConfig
  createVehicleToSpringTypeConfigs(data: [VehicleToSpringTypeConfigCreateInput!]!): [VehicleToSpringTypeConfig]
  updateVehicleToSpringTypeConfig(where: VehicleToSpringTypeConfigWhereUniqueInput!, data: VehicleToSpringTypeConfigUpdateInput!): VehicleToSpringTypeConfig
  updateVehicleToSpringTypeConfigs(data: [VehicleToSpringTypeConfigUpdateArgs!]!): [VehicleToSpringTypeConfig]
  deleteVehicleToSpringTypeConfig(where: VehicleToSpringTypeConfigWhereUniqueInput!): VehicleToSpringTypeConfig
  deleteVehicleToSpringTypeConfigs(where: [VehicleToSpringTypeConfigWhereUniqueInput!]!): [VehicleToSpringTypeConfig]
  createVehicleToSteeringConfig(data: VehicleToSteeringConfigCreateInput!): VehicleToSteeringConfig
  createVehicleToSteeringConfigs(data: [VehicleToSteeringConfigCreateInput!]!): [VehicleToSteeringConfig]
  updateVehicleToSteeringConfig(where: VehicleToSteeringConfigWhereUniqueInput!, data: VehicleToSteeringConfigUpdateInput!): VehicleToSteeringConfig
  updateVehicleToSteeringConfigs(data: [VehicleToSteeringConfigUpdateArgs!]!): [VehicleToSteeringConfig]
  deleteVehicleToSteeringConfig(where: VehicleToSteeringConfigWhereUniqueInput!): VehicleToSteeringConfig
  deleteVehicleToSteeringConfigs(where: [VehicleToSteeringConfigWhereUniqueInput!]!): [VehicleToSteeringConfig]
  createVehicleToTransmission(data: VehicleToTransmissionCreateInput!): VehicleToTransmission
  createVehicleToTransmissions(data: [VehicleToTransmissionCreateInput!]!): [VehicleToTransmission]
  updateVehicleToTransmission(where: VehicleToTransmissionWhereUniqueInput!, data: VehicleToTransmissionUpdateInput!): VehicleToTransmission
  updateVehicleToTransmissions(data: [VehicleToTransmissionUpdateArgs!]!): [VehicleToTransmission]
  deleteVehicleToTransmission(where: VehicleToTransmissionWhereUniqueInput!): VehicleToTransmission
  deleteVehicleToTransmissions(where: [VehicleToTransmissionWhereUniqueInput!]!): [VehicleToTransmission]
  createVehicleToWheelbase(data: VehicleToWheelbaseCreateInput!): VehicleToWheelbase
  createVehicleToWheelbases(data: [VehicleToWheelbaseCreateInput!]!): [VehicleToWheelbase]
  updateVehicleToWheelbase(where: VehicleToWheelbaseWhereUniqueInput!, data: VehicleToWheelbaseUpdateInput!): VehicleToWheelbase
  updateVehicleToWheelbases(data: [VehicleToWheelbaseUpdateArgs!]!): [VehicleToWheelbase]
  deleteVehicleToWheelbase(where: VehicleToWheelbaseWhereUniqueInput!): VehicleToWheelbase
  deleteVehicleToWheelbases(where: [VehicleToWheelbaseWhereUniqueInput!]!): [VehicleToWheelbase]
  createVehicleType(data: VehicleTypeCreateInput!): VehicleType
  createVehicleTypes(data: [VehicleTypeCreateInput!]!): [VehicleType]
  updateVehicleType(where: VehicleTypeWhereUniqueInput!, data: VehicleTypeUpdateInput!): VehicleType
  updateVehicleTypes(data: [VehicleTypeUpdateArgs!]!): [VehicleType]
  deleteVehicleType(where: VehicleTypeWhereUniqueInput!): VehicleType
  deleteVehicleTypes(where: [VehicleTypeWhereUniqueInput!]!): [VehicleType]
  createVehicleTypeGroup(data: VehicleTypeGroupCreateInput!): VehicleTypeGroup
  createVehicleTypeGroups(data: [VehicleTypeGroupCreateInput!]!): [VehicleTypeGroup]
  updateVehicleTypeGroup(where: VehicleTypeGroupWhereUniqueInput!, data: VehicleTypeGroupUpdateInput!): VehicleTypeGroup
  updateVehicleTypeGroups(data: [VehicleTypeGroupUpdateArgs!]!): [VehicleTypeGroup]
  deleteVehicleTypeGroup(where: VehicleTypeGroupWhereUniqueInput!): VehicleTypeGroup
  deleteVehicleTypeGroups(where: [VehicleTypeGroupWhereUniqueInput!]!): [VehicleTypeGroup]
  createVersion(data: VersionCreateInput!): Version
  createVersions(data: [VersionCreateInput!]!): [Version]
  updateVersion(where: VersionWhereUniqueInput!, data: VersionUpdateInput!): Version
  updateVersions(data: [VersionUpdateArgs!]!): [Version]
  deleteVersion(where: VersionWhereUniqueInput!): Version
  deleteVersions(where: [VersionWhereUniqueInput!]!): [Version]
  createWheelBase(data: WheelBaseCreateInput!): WheelBase
  createWheelBases(data: [WheelBaseCreateInput!]!): [WheelBase]
  updateWheelBase(where: WheelBaseWhereUniqueInput!, data: WheelBaseUpdateInput!): WheelBase
  updateWheelBases(data: [WheelBaseUpdateArgs!]!): [WheelBase]
  deleteWheelBase(where: WheelBaseWhereUniqueInput!): WheelBase
  deleteWheelBases(where: [WheelBaseWhereUniqueInput!]!): [WheelBase]
  createYear(data: YearCreateInput!): Year
  createYears(data: [YearCreateInput!]!): [Year]
  updateYear(where: YearWhereUniqueInput!, data: YearUpdateInput!): Year
  updateYears(data: [YearUpdateArgs!]!): [Year]
  deleteYear(where: YearWhereUniqueInput!): Year
  deleteYears(where: [YearWhereUniqueInput!]!): [Year]
  createBedLength(data: BedLengthCreateInput!): BedLength
  createBedLengths(data: [BedLengthCreateInput!]!): [BedLength]
  updateBedLength(where: BedLengthWhereUniqueInput!, data: BedLengthUpdateInput!): BedLength
  updateBedLengths(data: [BedLengthUpdateArgs!]!): [BedLength]
  deleteBedLength(where: BedLengthWhereUniqueInput!): BedLength
  deleteBedLengths(where: [BedLengthWhereUniqueInput!]!): [BedLength]
  createBedType(data: BedTypeCreateInput!): BedType
  createBedTypes(data: [BedTypeCreateInput!]!): [BedType]
  updateBedType(where: BedTypeWhereUniqueInput!, data: BedTypeUpdateInput!): BedType
  updateBedTypes(data: [BedTypeUpdateArgs!]!): [BedType]
  deleteBedType(where: BedTypeWhereUniqueInput!): BedType
  deleteBedTypes(where: [BedTypeWhereUniqueInput!]!): [BedType]
  createPCdbPartTerminology(data: PCdbPartTerminologyCreateInput!): PCdbPartTerminology
  createPCdbPartTerminologies(data: [PCdbPartTerminologyCreateInput!]!): [PCdbPartTerminology]
  updatePCdbPartTerminology(where: PCdbPartTerminologyWhereUniqueInput!, data: PCdbPartTerminologyUpdateInput!): PCdbPartTerminology
  updatePCdbPartTerminologies(data: [PCdbPartTerminologyUpdateArgs!]!): [PCdbPartTerminology]
  deletePCdbPartTerminology(where: PCdbPartTerminologyWhereUniqueInput!): PCdbPartTerminology
  deletePCdbPartTerminologies(where: [PCdbPartTerminologyWhereUniqueInput!]!): [PCdbPartTerminology]
}

type Query {
  app(where: AppWhereUniqueInput!): App
  apps(where: AppWhereInput! = {}, orderBy: [AppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AppWhereUniqueInput): [App!]
  appsCount(where: AppWhereInput! = {}): Int
  asset(where: AssetWhereUniqueInput!): Asset
  assets(where: AssetWhereInput! = {}, orderBy: [AssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssetWhereUniqueInput): [Asset!]
  assetsCount(where: AssetWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  digitalAsset(where: DigitalAssetWhereUniqueInput!): DigitalAsset
  digitalAssets(where: DigitalAssetWhereInput! = {}, orderBy: [DigitalAssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DigitalAssetWhereUniqueInput): [DigitalAsset!]
  digitalAssetsCount(where: DigitalAssetWhereInput! = {}): Int
  partType(where: PartTypeWhereUniqueInput!): PartType
  partTypes(where: PartTypeWhereInput! = {}, orderBy: [PartTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartTypeWhereUniqueInput): [PartType!]
  partTypesCount(where: PartTypeWhereInput! = {}): Int
  catalog(where: CatalogWhereUniqueInput!): Catalog
  catalogs(where: CatalogWhereInput! = {}, orderBy: [CatalogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CatalogWhereUniqueInput): [Catalog!]
  catalogsCount(where: CatalogWhereInput! = {}): Int
  acesApp(where: AcesAppWhereUniqueInput!): AcesApp
  acesApps(where: AcesAppWhereInput! = {}, orderBy: [AcesAppOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AcesAppWhereUniqueInput): [AcesApp!]
  acesAppsCount(where: AcesAppWhereInput! = {}): Int
  acesAsset(where: AcesAssetWhereUniqueInput!): AcesAsset
  acesAssets(where: AcesAssetWhereInput! = {}, orderBy: [AcesAssetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AcesAssetWhereUniqueInput): [AcesAsset!]
  acesAssetsCount(where: AcesAssetWhereInput! = {}): Int
  acesDigitalFileInformation(where: AcesDigitalFileInformationWhereUniqueInput!): AcesDigitalFileInformation
  acesDigitalFileInformations(where: AcesDigitalFileInformationWhereInput! = {}, orderBy: [AcesDigitalFileInformationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AcesDigitalFileInformationWhereUniqueInput): [AcesDigitalFileInformation!]
  acesDigitalFileInformationsCount(where: AcesDigitalFileInformationWhereInput! = {}): Int
  measurementGroup(where: MeasurementGroupWhereUniqueInput!): MeasurementGroup
  measurementGroups(where: MeasurementGroupWhereInput! = {}, orderBy: [MeasurementGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MeasurementGroupWhereUniqueInput): [MeasurementGroup!]
  measurementGroupsCount(where: MeasurementGroupWhereInput! = {}): Int
  metaData(where: MetaDataWhereUniqueInput!): MetaData
  metaDatas(where: MetaDataWhereInput! = {}, orderBy: [MetaDataOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MetaDataWhereUniqueInput): [MetaData!]
  metaDatasCount(where: MetaDataWhereInput! = {}): Int
  metaUOMCodeAssignment(where: MetaUOMCodeAssignmentWhereUniqueInput!): MetaUOMCodeAssignment
  metaUOMCodeAssignments(where: MetaUOMCodeAssignmentWhereInput! = {}, orderBy: [MetaUOMCodeAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MetaUOMCodeAssignmentWhereUniqueInput): [MetaUOMCodeAssignment!]
  metaUOMCodeAssignmentsCount(where: MetaUOMCodeAssignmentWhereInput! = {}): Int
  metaUOMCode(where: MetaUOMCodeWhereUniqueInput!): MetaUOMCode
  metaUOMCodes(where: MetaUOMCodeWhereInput! = {}, orderBy: [MetaUOMCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MetaUOMCodeWhereUniqueInput): [MetaUOMCode!]
  metaUOMCodesCount(where: MetaUOMCodeWhereInput! = {}): Int
  partAttributeAssignment(where: PartAttributeAssignmentWhereUniqueInput!): PartAttributeAssignment
  partAttributeAssignments(where: PartAttributeAssignmentWhereInput! = {}, orderBy: [PartAttributeAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartAttributeAssignmentWhereUniqueInput): [PartAttributeAssignment!]
  partAttributeAssignmentsCount(where: PartAttributeAssignmentWhereInput! = {}): Int
  partAttributeStyle(where: PartAttributeStyleWhereUniqueInput!): PartAttributeStyle
  partAttributeStyles(where: PartAttributeStyleWhereInput! = {}, orderBy: [PartAttributeStyleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartAttributeStyleWhereUniqueInput): [PartAttributeStyle!]
  partAttributeStylesCount(where: PartAttributeStyleWhereInput! = {}): Int
  partAttribute(where: PartAttributeWhereUniqueInput!): PartAttribute
  partAttributes(where: PartAttributeWhereInput! = {}, orderBy: [PartAttributeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartAttributeWhereUniqueInput): [PartAttribute!]
  partAttributesCount(where: PartAttributeWhereInput! = {}): Int
  partTypeStyle(where: PartTypeStyleWhereUniqueInput!): PartTypeStyle
  partTypeStyles(where: PartTypeStyleWhereInput! = {}, orderBy: [PartTypeStyleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartTypeStyleWhereUniqueInput): [PartTypeStyle!]
  partTypeStylesCount(where: PartTypeStyleWhereInput! = {}): Int
  style(where: StyleWhereUniqueInput!): Style
  styles(where: StyleWhereInput! = {}, orderBy: [StyleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StyleWhereUniqueInput): [Style!]
  stylesCount(where: StyleWhereInput! = {}): Int
  validValueAssignment(where: ValidValueAssignmentWhereUniqueInput!): ValidValueAssignment
  validValueAssignments(where: ValidValueAssignmentWhereInput! = {}, orderBy: [ValidValueAssignmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ValidValueAssignmentWhereUniqueInput): [ValidValueAssignment!]
  validValueAssignmentsCount(where: ValidValueAssignmentWhereInput! = {}): Int
  validValue(where: ValidValueWhereUniqueInput!): ValidValue
  validValues(where: ValidValueWhereInput! = {}, orderBy: [ValidValueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ValidValueWhereUniqueInput): [ValidValue!]
  validValuesCount(where: ValidValueWhereInput! = {}): Int
  pAVersion(where: PAVersionWhereUniqueInput!): PAVersion
  pAVersions(where: PAVersionWhereInput! = {}, orderBy: [PAVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PAVersionWhereUniqueInput): [PAVersion!]
  pAVersionsCount(where: PAVersionWhereInput! = {}): Int
  aCESCodedValue(where: ACESCodedValueWhereUniqueInput!): ACESCodedValue
  aCESCodedValues(where: ACESCodedValueWhereInput! = {}, orderBy: [ACESCodedValueOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ACESCodedValueWhereUniqueInput): [ACESCodedValue!]
  aCESCodedValuesCount(where: ACESCodedValueWhereInput! = {}): Int
  alias(where: AliasWhereUniqueInput!): Alias
  aliases(where: AliasWhereInput! = {}, orderBy: [AliasOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AliasWhereUniqueInput): [Alias!]
  aliasesCount(where: AliasWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  codeMaster(where: CodeMasterWhereUniqueInput!): CodeMaster
  codeMasters(where: CodeMasterWhereInput! = {}, orderBy: [CodeMasterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CodeMasterWhereUniqueInput): [CodeMaster!]
  codeMastersCount(where: CodeMasterWhereInput! = {}): Int
  pCChange(where: PCChangeWhereUniqueInput!): PCChange
  pCChanges(where: PCChangeWhereInput! = {}, orderBy: [PCChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeWhereUniqueInput): [PCChange!]
  pCChangesCount(where: PCChangeWhereInput! = {}): Int
  pCChangeAttributeState(where: PCChangeAttributeStateWhereUniqueInput!): PCChangeAttributeState
  pCChangeAttributeStates(where: PCChangeAttributeStateWhereInput! = {}, orderBy: [PCChangeAttributeStateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeAttributeStateWhereUniqueInput): [PCChangeAttributeState!]
  pCChangeAttributeStatesCount(where: PCChangeAttributeStateWhereInput! = {}): Int
  pCChangeDetail(where: PCChangeDetailWhereUniqueInput!): PCChangeDetail
  pCChangeDetails(where: PCChangeDetailWhereInput! = {}, orderBy: [PCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeDetailWhereUniqueInput): [PCChangeDetail!]
  pCChangeDetailsCount(where: PCChangeDetailWhereInput! = {}): Int
  pCChangeReason(where: PCChangeReasonWhereUniqueInput!): PCChangeReason
  pCChangeReasons(where: PCChangeReasonWhereInput! = {}, orderBy: [PCChangeReasonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeReasonWhereUniqueInput): [PCChangeReason!]
  pCChangeReasonsCount(where: PCChangeReasonWhereInput! = {}): Int
  pCChangeTableName(where: PCChangeTableNameWhereUniqueInput!): PCChangeTableName
  pCChangeTableNames(where: PCChangeTableNameWhereInput! = {}, orderBy: [PCChangeTableNameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCChangeTableNameWhereUniqueInput): [PCChangeTableName!]
  pCChangeTableNamesCount(where: PCChangeTableNameWhereInput! = {}): Int
  part(where: PartWhereUniqueInput!): Part
  parts(where: PartWhereInput! = {}, orderBy: [PartOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartWhereUniqueInput): [Part!]
  partsCount(where: PartWhereInput! = {}): Int
  partsDescription(where: PartsDescriptionWhereUniqueInput!): PartsDescription
  partsDescriptions(where: PartsDescriptionWhereInput! = {}, orderBy: [PartsDescriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsDescriptionWhereUniqueInput): [PartsDescription!]
  partsDescriptionsCount(where: PartsDescriptionWhereInput! = {}): Int
  partsRelationship(where: PartsRelationshipWhereUniqueInput!): PartsRelationship
  partsRelationships(where: PartsRelationshipWhereInput! = {}, orderBy: [PartsRelationshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsRelationshipWhereUniqueInput): [PartsRelationship!]
  partsRelationshipsCount(where: PartsRelationshipWhereInput! = {}): Int
  partsToAlias(where: PartsToAliasWhereUniqueInput!): PartsToAlias
  partsToAliases(where: PartsToAliasWhereInput! = {}, orderBy: [PartsToAliasOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToAliasWhereUniqueInput): [PartsToAlias!]
  partsToAliasesCount(where: PartsToAliasWhereInput! = {}): Int
  partsToUse(where: PartsToUseWhereUniqueInput!): PartsToUse
  partsToUses(where: PartsToUseWhereInput! = {}, orderBy: [PartsToUseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsToUseWhereUniqueInput): [PartsToUse!]
  partsToUsesCount(where: PartsToUseWhereInput! = {}): Int
  position(where: PositionWhereUniqueInput!): Position
  positions(where: PositionWhereInput! = {}, orderBy: [PositionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PositionWhereUniqueInput): [Position!]
  positionsCount(where: PositionWhereInput! = {}): Int
  subcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  subcategories(where: SubcategoryWhereInput! = {}, orderBy: [SubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoryWhereUniqueInput): [Subcategory!]
  subcategoriesCount(where: SubcategoryWhereInput! = {}): Int
  use(where: UseWhereUniqueInput!): Use
  uses(where: UseWhereInput! = {}, orderBy: [UseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UseWhereUniqueInput): [Use!]
  usesCount(where: UseWhereInput! = {}): Int
  pIESCode(where: PIESCodeWhereUniqueInput!): PIESCode
  pIESCodes(where: PIESCodeWhereInput! = {}, orderBy: [PIESCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESCodeWhereUniqueInput): [PIESCode!]
  pIESCodesCount(where: PIESCodeWhereInput! = {}): Int
  pIESExpiCode(where: PIESExpiCodeWhereUniqueInput!): PIESExpiCode
  pIESExpiCodes(where: PIESExpiCodeWhereInput! = {}, orderBy: [PIESExpiCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESExpiCodeWhereUniqueInput): [PIESExpiCode!]
  pIESExpiCodesCount(where: PIESExpiCodeWhereInput! = {}): Int
  pIESExpiGroup(where: PIESExpiGroupWhereUniqueInput!): PIESExpiGroup
  pIESExpiGroups(where: PIESExpiGroupWhereInput! = {}, orderBy: [PIESExpiGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESExpiGroupWhereUniqueInput): [PIESExpiGroup!]
  pIESExpiGroupsCount(where: PIESExpiGroupWhereInput! = {}): Int
  pIESField(where: PIESFieldWhereUniqueInput!): PIESField
  pIESFields(where: PIESFieldWhereInput! = {}, orderBy: [PIESFieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESFieldWhereUniqueInput): [PIESField!]
  pIESFieldsCount(where: PIESFieldWhereInput! = {}): Int
  pIESReferenceFieldCode(where: PIESReferenceFieldCodeWhereUniqueInput!): PIESReferenceFieldCode
  pIESReferenceFieldCodes(where: PIESReferenceFieldCodeWhereInput! = {}, orderBy: [PIESReferenceFieldCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESReferenceFieldCodeWhereUniqueInput): [PIESReferenceFieldCode!]
  pIESReferenceFieldCodesCount(where: PIESReferenceFieldCodeWhereInput! = {}): Int
  pIESSegment(where: PIESSegmentWhereUniqueInput!): PIESSegment
  pIESSegments(where: PIESSegmentWhereInput! = {}, orderBy: [PIESSegmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PIESSegmentWhereUniqueInput): [PIESSegment!]
  pIESSegmentsCount(where: PIESSegmentWhereInput! = {}): Int
  pCVersion(where: PCVersionWhereUniqueInput!): PCVersion
  pCVersions(where: PCVersionWhereInput! = {}, orderBy: [PCVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCVersionWhereUniqueInput): [PCVersion!]
  pCVersionsCount(where: PCVersionWhereInput! = {}): Int
  partsSupersession(where: PartsSupersessionWhereUniqueInput!): PartsSupersession
  partsSupersessions(where: PartsSupersessionWhereInput! = {}, orderBy: [PartsSupersessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartsSupersessionWhereUniqueInput): [PartsSupersession!]
  partsSupersessionsCount(where: PartsSupersessionWhereInput! = {}): Int
  qChangeAttributeState(where: QChangeAttributeStateWhereUniqueInput!): QChangeAttributeState
  qChangeAttributeStates(where: QChangeAttributeStateWhereInput! = {}, orderBy: [QChangeAttributeStateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeAttributeStateWhereUniqueInput): [QChangeAttributeState!]
  qChangeAttributeStatesCount(where: QChangeAttributeStateWhereInput! = {}): Int
  qChangeDetail(where: QChangeDetailWhereUniqueInput!): QChangeDetail
  qChangeDetails(where: QChangeDetailWhereInput! = {}, orderBy: [QChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeDetailWhereUniqueInput): [QChangeDetail!]
  qChangeDetailsCount(where: QChangeDetailWhereInput! = {}): Int
  qChangeReason(where: QChangeReasonWhereUniqueInput!): QChangeReason
  qChangeReasons(where: QChangeReasonWhereInput! = {}, orderBy: [QChangeReasonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeReasonWhereUniqueInput): [QChangeReason!]
  qChangeReasonsCount(where: QChangeReasonWhereInput! = {}): Int
  qChange(where: QChangeWhereUniqueInput!): QChange
  qChanges(where: QChangeWhereInput! = {}, orderBy: [QChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeWhereUniqueInput): [QChange!]
  qChangesCount(where: QChangeWhereInput! = {}): Int
  qChangeTableName(where: QChangeTableNameWhereUniqueInput!): QChangeTableName
  qChangeTableNames(where: QChangeTableNameWhereInput! = {}, orderBy: [QChangeTableNameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QChangeTableNameWhereUniqueInput): [QChangeTableName!]
  qChangeTableNamesCount(where: QChangeTableNameWhereInput! = {}): Int
  groupNumber(where: GroupNumberWhereUniqueInput!): GroupNumber
  groupNumbers(where: GroupNumberWhereInput! = {}, orderBy: [GroupNumberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GroupNumberWhereUniqueInput): [GroupNumber!]
  groupNumbersCount(where: GroupNumberWhereInput! = {}): Int
  qLanguage(where: QLanguageWhereUniqueInput!): QLanguage
  qLanguages(where: QLanguageWhereInput! = {}, orderBy: [QLanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QLanguageWhereUniqueInput): [QLanguage!]
  qLanguagesCount(where: QLanguageWhereInput! = {}): Int
  qdbChange(where: QdbChangeWhereUniqueInput!): QdbChange
  qdbChanges(where: QdbChangeWhereInput! = {}, orderBy: [QdbChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QdbChangeWhereUniqueInput): [QdbChange!]
  qdbChangesCount(where: QdbChangeWhereInput! = {}): Int
  qQualifier(where: QQualifierWhereUniqueInput!): QQualifier
  qQualifiers(where: QQualifierWhereInput! = {}, orderBy: [QQualifierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QQualifierWhereUniqueInput): [QQualifier!]
  qQualifiersCount(where: QQualifierWhereInput! = {}): Int
  qualifierGroup(where: QualifierGroupWhereUniqueInput!): QualifierGroup
  qualifierGroups(where: QualifierGroupWhereInput! = {}, orderBy: [QualifierGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierGroupWhereUniqueInput): [QualifierGroup!]
  qualifierGroupsCount(where: QualifierGroupWhereInput! = {}): Int
  qualifierTranslation(where: QualifierTranslationWhereUniqueInput!): QualifierTranslation
  qualifierTranslations(where: QualifierTranslationWhereInput! = {}, orderBy: [QualifierTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierTranslationWhereUniqueInput): [QualifierTranslation!]
  qualifierTranslationsCount(where: QualifierTranslationWhereInput! = {}): Int
  qualifierType(where: QualifierTypeWhereUniqueInput!): QualifierType
  qualifierTypes(where: QualifierTypeWhereInput! = {}, orderBy: [QualifierTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QualifierTypeWhereUniqueInput): [QualifierType!]
  qualifierTypesCount(where: QualifierTypeWhereInput! = {}): Int
  qVersion(where: QVersionWhereUniqueInput!): QVersion
  qVersions(where: QVersionWhereInput! = {}, orderBy: [QVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QVersionWhereUniqueInput): [QVersion!]
  qVersionsCount(where: QVersionWhereInput! = {}): Int
  abbreviation(where: AbbreviationWhereUniqueInput!): Abbreviation
  abbreviations(where: AbbreviationWhereInput! = {}, orderBy: [AbbreviationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AbbreviationWhereUniqueInput): [Abbreviation!]
  abbreviationsCount(where: AbbreviationWhereInput! = {}): Int
  aspiration(where: AspirationWhereUniqueInput!): Aspiration
  aspirations(where: AspirationWhereInput! = {}, orderBy: [AspirationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AspirationWhereUniqueInput): [Aspiration!]
  aspirationsCount(where: AspirationWhereInput! = {}): Int
  attachmentType(where: AttachmentTypeWhereUniqueInput!): AttachmentType
  attachmentTypes(where: AttachmentTypeWhereInput! = {}, orderBy: [AttachmentTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AttachmentTypeWhereUniqueInput): [AttachmentType!]
  attachmentTypesCount(where: AttachmentTypeWhereInput! = {}): Int
  baseVehicle(where: BaseVehicleWhereUniqueInput!): BaseVehicle
  baseVehicles(where: BaseVehicleWhereInput! = {}, orderBy: [BaseVehicleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BaseVehicleWhereUniqueInput): [BaseVehicle!]
  baseVehiclesCount(where: BaseVehicleWhereInput! = {}): Int
  bedConfig(where: BedConfigWhereUniqueInput!): BedConfig
  bedConfigs(where: BedConfigWhereInput! = {}, orderBy: [BedConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BedConfigWhereUniqueInput): [BedConfig!]
  bedConfigsCount(where: BedConfigWhereInput! = {}): Int
  bodyType(where: BodyTypeWhereUniqueInput!): BodyType
  bodyTypes(where: BodyTypeWhereInput! = {}, orderBy: [BodyTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BodyTypeWhereUniqueInput): [BodyType!]
  bodyTypesCount(where: BodyTypeWhereInput! = {}): Int
  bodyNumDoors(where: BodyNumDoorsWhereUniqueInput!): BodyNumDoors
  bodyNumDoorsList(where: BodyNumDoorsWhereInput! = {}, orderBy: [BodyNumDoorsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BodyNumDoorsWhereUniqueInput): [BodyNumDoors!]
  bodyNumDoorsListCount(where: BodyNumDoorsWhereInput! = {}): Int
  bodyStyleConfig(where: BodyStyleConfigWhereUniqueInput!): BodyStyleConfig
  bodyStyleConfigs(where: BodyStyleConfigWhereInput! = {}, orderBy: [BodyStyleConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BodyStyleConfigWhereUniqueInput): [BodyStyleConfig!]
  bodyStyleConfigsCount(where: BodyStyleConfigWhereInput! = {}): Int
  brakeABS(where: BrakeABSWhereUniqueInput!): BrakeABS
  brakeABSList(where: BrakeABSWhereInput! = {}, orderBy: [BrakeABSOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrakeABSWhereUniqueInput): [BrakeABS!]
  brakeABSListCount(where: BrakeABSWhereInput! = {}): Int
  brakeConfig(where: BrakeConfigWhereUniqueInput!): BrakeConfig
  brakeConfigs(where: BrakeConfigWhereInput! = {}, orderBy: [BrakeConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrakeConfigWhereUniqueInput): [BrakeConfig!]
  brakeConfigsCount(where: BrakeConfigWhereInput! = {}): Int
  brakeSystem(where: BrakeSystemWhereUniqueInput!): BrakeSystem
  brakeSystems(where: BrakeSystemWhereInput! = {}, orderBy: [BrakeSystemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrakeSystemWhereUniqueInput): [BrakeSystem!]
  brakeSystemsCount(where: BrakeSystemWhereInput! = {}): Int
  brakeType(where: BrakeTypeWhereUniqueInput!): BrakeType
  brakeTypes(where: BrakeTypeWhereInput! = {}, orderBy: [BrakeTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrakeTypeWhereUniqueInput): [BrakeType!]
  brakeTypesCount(where: BrakeTypeWhereInput! = {}): Int
  changeAttributeState(where: ChangeAttributeStateWhereUniqueInput!): ChangeAttributeState
  changeAttributeStates(where: ChangeAttributeStateWhereInput! = {}, orderBy: [ChangeAttributeStateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChangeAttributeStateWhereUniqueInput): [ChangeAttributeState!]
  changeAttributeStatesCount(where: ChangeAttributeStateWhereInput! = {}): Int
  vCChangeDetail(where: VCChangeDetailWhereUniqueInput!): VCChangeDetail
  vCChangeDetails(where: VCChangeDetailWhereInput! = {}, orderBy: [VCChangeDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeDetailWhereUniqueInput): [VCChangeDetail!]
  vCChangeDetailsCount(where: VCChangeDetailWhereInput! = {}): Int
  vCChangeReason(where: VCChangeReasonWhereUniqueInput!): VCChangeReason
  vCChangeReasons(where: VCChangeReasonWhereInput! = {}, orderBy: [VCChangeReasonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeReasonWhereUniqueInput): [VCChangeReason!]
  vCChangeReasonsCount(where: VCChangeReasonWhereInput! = {}): Int
  vCChange(where: VCChangeWhereUniqueInput!): VCChange
  vCChanges(where: VCChangeWhereInput! = {}, orderBy: [VCChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeWhereUniqueInput): [VCChange!]
  vCChangesCount(where: VCChangeWhereInput! = {}): Int
  vCChangeTableName(where: VCChangeTableNameWhereUniqueInput!): VCChangeTableName
  vCChangeTableNames(where: VCChangeTableNameWhereInput! = {}, orderBy: [VCChangeTableNameOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCChangeTableNameWhereUniqueInput): [VCChangeTableName!]
  vCChangeTableNamesCount(where: VCChangeTableNameWhereInput! = {}): Int
  class(where: ClassWhereUniqueInput!): Class
  classes(where: ClassWhereInput! = {}, orderBy: [ClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClassWhereUniqueInput): [Class!]
  classesCount(where: ClassWhereInput! = {}): Int
  cylinderHeadType(where: CylinderHeadTypeWhereUniqueInput!): CylinderHeadType
  cylinderHeadTypes(where: CylinderHeadTypeWhereInput! = {}, orderBy: [CylinderHeadTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CylinderHeadTypeWhereUniqueInput): [CylinderHeadType!]
  cylinderHeadTypesCount(where: CylinderHeadTypeWhereInput! = {}): Int
  driveType(where: DriveTypeWhereUniqueInput!): DriveType
  driveTypes(where: DriveTypeWhereInput! = {}, orderBy: [DriveTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DriveTypeWhereUniqueInput): [DriveType!]
  driveTypesCount(where: DriveTypeWhereInput! = {}): Int
  elecControlled(where: ElecControlledWhereUniqueInput!): ElecControlled
  elecControlleds(where: ElecControlledWhereInput! = {}, orderBy: [ElecControlledOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElecControlledWhereUniqueInput): [ElecControlled!]
  elecControlledsCount(where: ElecControlledWhereInput! = {}): Int
  engineBase(where: EngineBaseWhereUniqueInput!): EngineBase
  engineBases(where: EngineBaseWhereInput! = {}, orderBy: [EngineBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineBaseWhereUniqueInput): [EngineBase!]
  engineBasesCount(where: EngineBaseWhereInput! = {}): Int
  engineBase2(where: EngineBase2WhereUniqueInput!): EngineBase2
  engineBase2s(where: EngineBase2WhereInput! = {}, orderBy: [EngineBase2OrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineBase2WhereUniqueInput): [EngineBase2!]
  engineBase2sCount(where: EngineBase2WhereInput! = {}): Int
  engineBlock(where: EngineBlockWhereUniqueInput!): EngineBlock
  engineBlocks(where: EngineBlockWhereInput! = {}, orderBy: [EngineBlockOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineBlockWhereUniqueInput): [EngineBlock!]
  engineBlocksCount(where: EngineBlockWhereInput! = {}): Int
  engineBoreStroke(where: EngineBoreStrokeWhereUniqueInput!): EngineBoreStroke
  engineBoreStrokes(where: EngineBoreStrokeWhereInput! = {}, orderBy: [EngineBoreStrokeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineBoreStrokeWhereUniqueInput): [EngineBoreStroke!]
  engineBoreStrokesCount(where: EngineBoreStrokeWhereInput! = {}): Int
  engineConfig(where: EngineConfigWhereUniqueInput!): EngineConfig
  engineConfigs(where: EngineConfigWhereInput! = {}, orderBy: [EngineConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineConfigWhereUniqueInput): [EngineConfig!]
  engineConfigsCount(where: EngineConfigWhereInput! = {}): Int
  engineConfig2(where: EngineConfig2WhereUniqueInput!): EngineConfig2
  engineConfig2s(where: EngineConfig2WhereInput! = {}, orderBy: [EngineConfig2OrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineConfig2WhereUniqueInput): [EngineConfig2!]
  engineConfig2sCount(where: EngineConfig2WhereInput! = {}): Int
  engineDesignation(where: EngineDesignationWhereUniqueInput!): EngineDesignation
  engineDesignations(where: EngineDesignationWhereInput! = {}, orderBy: [EngineDesignationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineDesignationWhereUniqueInput): [EngineDesignation!]
  engineDesignationsCount(where: EngineDesignationWhereInput! = {}): Int
  engineVersion(where: EngineVersionWhereUniqueInput!): EngineVersion
  engineVersions(where: EngineVersionWhereInput! = {}, orderBy: [EngineVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineVersionWhereUniqueInput): [EngineVersion!]
  engineVersionsCount(where: EngineVersionWhereInput! = {}): Int
  engineVIN(where: EngineVINWhereUniqueInput!): EngineVIN
  engineVINS(where: EngineVINWhereInput! = {}, orderBy: [EngineVINOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EngineVINWhereUniqueInput): [EngineVIN!]
  engineVINSCount(where: EngineVINWhereInput! = {}): Int
  englishPhrase(where: EnglishPhraseWhereUniqueInput!): EnglishPhrase
  englishPhrases(where: EnglishPhraseWhereInput! = {}, orderBy: [EnglishPhraseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EnglishPhraseWhereUniqueInput): [EnglishPhrase!]
  englishPhrasesCount(where: EnglishPhraseWhereInput! = {}): Int
  equipment(where: EquipmentWhereUniqueInput!): Equipment
  equipments(where: EquipmentWhereInput! = {}, orderBy: [EquipmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EquipmentWhereUniqueInput): [Equipment!]
  equipmentsCount(where: EquipmentWhereInput! = {}): Int
  equipmentBase(where: EquipmentBaseWhereUniqueInput!): EquipmentBase
  equipmentBases(where: EquipmentBaseWhereInput! = {}, orderBy: [EquipmentBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EquipmentBaseWhereUniqueInput): [EquipmentBase!]
  equipmentBasesCount(where: EquipmentBaseWhereInput! = {}): Int
  equipmentModel(where: EquipmentModelWhereUniqueInput!): EquipmentModel
  equipmentModels(where: EquipmentModelWhereInput! = {}, orderBy: [EquipmentModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EquipmentModelWhereUniqueInput): [EquipmentModel!]
  equipmentModelsCount(where: EquipmentModelWhereInput! = {}): Int
  equipmentToEngineConfig(where: EquipmentToEngineConfigWhereUniqueInput!): EquipmentToEngineConfig
  equipmentToEngineConfigs(where: EquipmentToEngineConfigWhereInput! = {}, orderBy: [EquipmentToEngineConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EquipmentToEngineConfigWhereUniqueInput): [EquipmentToEngineConfig!]
  equipmentToEngineConfigsCount(where: EquipmentToEngineConfigWhereInput! = {}): Int
  fuelDeliveryConfig(where: FuelDeliveryConfigWhereUniqueInput!): FuelDeliveryConfig
  fuelDeliveryConfigs(where: FuelDeliveryConfigWhereInput! = {}, orderBy: [FuelDeliveryConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelDeliveryConfigWhereUniqueInput): [FuelDeliveryConfig!]
  fuelDeliveryConfigsCount(where: FuelDeliveryConfigWhereInput! = {}): Int
  fuelDeliverySubType(where: FuelDeliverySubTypeWhereUniqueInput!): FuelDeliverySubType
  fuelDeliverySubTypes(where: FuelDeliverySubTypeWhereInput! = {}, orderBy: [FuelDeliverySubTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelDeliverySubTypeWhereUniqueInput): [FuelDeliverySubType!]
  fuelDeliverySubTypesCount(where: FuelDeliverySubTypeWhereInput! = {}): Int
  fuelDeliveryType(where: FuelDeliveryTypeWhereUniqueInput!): FuelDeliveryType
  fuelDeliveryTypes(where: FuelDeliveryTypeWhereInput! = {}, orderBy: [FuelDeliveryTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelDeliveryTypeWhereUniqueInput): [FuelDeliveryType!]
  fuelDeliveryTypesCount(where: FuelDeliveryTypeWhereInput! = {}): Int
  fuelSystemControlType(where: FuelSystemControlTypeWhereUniqueInput!): FuelSystemControlType
  fuelSystemControlTypes(where: FuelSystemControlTypeWhereInput! = {}, orderBy: [FuelSystemControlTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelSystemControlTypeWhereUniqueInput): [FuelSystemControlType!]
  fuelSystemControlTypesCount(where: FuelSystemControlTypeWhereInput! = {}): Int
  fuelSystemDesign(where: FuelSystemDesignWhereUniqueInput!): FuelSystemDesign
  fuelSystemDesigns(where: FuelSystemDesignWhereInput! = {}, orderBy: [FuelSystemDesignOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelSystemDesignWhereUniqueInput): [FuelSystemDesign!]
  fuelSystemDesignsCount(where: FuelSystemDesignWhereInput! = {}): Int
  fuelType(where: FuelTypeWhereUniqueInput!): FuelType
  fuelTypes(where: FuelTypeWhereInput! = {}, orderBy: [FuelTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FuelTypeWhereUniqueInput): [FuelType!]
  fuelTypesCount(where: FuelTypeWhereInput! = {}): Int
  ignitionSystemType(where: IgnitionSystemTypeWhereUniqueInput!): IgnitionSystemType
  ignitionSystemTypes(where: IgnitionSystemTypeWhereInput! = {}, orderBy: [IgnitionSystemTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IgnitionSystemTypeWhereUniqueInput): [IgnitionSystemType!]
  ignitionSystemTypesCount(where: IgnitionSystemTypeWhereInput! = {}): Int
  vCLanguage(where: VCLanguageWhereUniqueInput!): VCLanguage
  vCLanguages(where: VCLanguageWhereInput! = {}, orderBy: [VCLanguageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCLanguageWhereUniqueInput): [VCLanguage!]
  vCLanguagesCount(where: VCLanguageWhereInput! = {}): Int
  languageTranslation(where: LanguageTranslationWhereUniqueInput!): LanguageTranslation
  languageTranslations(where: LanguageTranslationWhereInput! = {}, orderBy: [LanguageTranslationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageTranslationWhereUniqueInput): [LanguageTranslation!]
  languageTranslationsCount(where: LanguageTranslationWhereInput! = {}): Int
  languageTranslationAttachment(where: LanguageTranslationAttachmentWhereUniqueInput!): LanguageTranslationAttachment
  languageTranslationAttachments(where: LanguageTranslationAttachmentWhereInput! = {}, orderBy: [LanguageTranslationAttachmentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LanguageTranslationAttachmentWhereUniqueInput): [LanguageTranslationAttachment!]
  languageTranslationAttachmentsCount(where: LanguageTranslationAttachmentWhereInput! = {}): Int
  make(where: MakeWhereUniqueInput!): Make
  makes(where: MakeWhereInput! = {}, orderBy: [MakeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MakeWhereUniqueInput): [Make!]
  makesCount(where: MakeWhereInput! = {}): Int
  mfr(where: MfrWhereUniqueInput!): Mfr
  mfrs(where: MfrWhereInput! = {}, orderBy: [MfrOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MfrWhereUniqueInput): [Mfr!]
  mfrsCount(where: MfrWhereInput! = {}): Int
  mfrBodyCode(where: MfrBodyCodeWhereUniqueInput!): MfrBodyCode
  mfrBodyCodes(where: MfrBodyCodeWhereInput! = {}, orderBy: [MfrBodyCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MfrBodyCodeWhereUniqueInput): [MfrBodyCode!]
  mfrBodyCodesCount(where: MfrBodyCodeWhereInput! = {}): Int
  model(where: ModelWhereUniqueInput!): Model
  models(where: ModelWhereInput! = {}, orderBy: [ModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ModelWhereUniqueInput): [Model!]
  modelsCount(where: ModelWhereInput! = {}): Int
  powerOutput(where: PowerOutputWhereUniqueInput!): PowerOutput
  powerOutputs(where: PowerOutputWhereInput! = {}, orderBy: [PowerOutputOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PowerOutputWhereUniqueInput): [PowerOutput!]
  powerOutputsCount(where: PowerOutputWhereInput! = {}): Int
  publicationStage(where: PublicationStageWhereUniqueInput!): PublicationStage
  publicationStages(where: PublicationStageWhereInput! = {}, orderBy: [PublicationStageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublicationStageWhereUniqueInput): [PublicationStage!]
  publicationStagesCount(where: PublicationStageWhereInput! = {}): Int
  region(where: RegionWhereUniqueInput!): Region
  regions(where: RegionWhereInput! = {}, orderBy: [RegionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RegionWhereUniqueInput): [Region!]
  regionsCount(where: RegionWhereInput! = {}): Int
  springType(where: SpringTypeWhereUniqueInput!): SpringType
  springTypes(where: SpringTypeWhereInput! = {}, orderBy: [SpringTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpringTypeWhereUniqueInput): [SpringType!]
  springTypesCount(where: SpringTypeWhereInput! = {}): Int
  springTypeConfig(where: SpringTypeConfigWhereUniqueInput!): SpringTypeConfig
  springTypeConfigs(where: SpringTypeConfigWhereInput! = {}, orderBy: [SpringTypeConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpringTypeConfigWhereUniqueInput): [SpringTypeConfig!]
  springTypeConfigsCount(where: SpringTypeConfigWhereInput! = {}): Int
  steeringConfig(where: SteeringConfigWhereUniqueInput!): SteeringConfig
  steeringConfigs(where: SteeringConfigWhereInput! = {}, orderBy: [SteeringConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringConfigWhereUniqueInput): [SteeringConfig!]
  steeringConfigsCount(where: SteeringConfigWhereInput! = {}): Int
  steeringSystem(where: SteeringSystemWhereUniqueInput!): SteeringSystem
  steeringSystems(where: SteeringSystemWhereInput! = {}, orderBy: [SteeringSystemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringSystemWhereUniqueInput): [SteeringSystem!]
  steeringSystemsCount(where: SteeringSystemWhereInput! = {}): Int
  steeringType(where: SteeringTypeWhereUniqueInput!): SteeringType
  steeringTypes(where: SteeringTypeWhereInput! = {}, orderBy: [SteeringTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringTypeWhereUniqueInput): [SteeringType!]
  steeringTypesCount(where: SteeringTypeWhereInput! = {}): Int
  subModel(where: SubModelWhereUniqueInput!): SubModel
  subModels(where: SubModelWhereInput! = {}, orderBy: [SubModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubModelWhereUniqueInput): [SubModel!]
  subModelsCount(where: SubModelWhereInput! = {}): Int
  transmission(where: TransmissionWhereUniqueInput!): Transmission
  transmissions(where: TransmissionWhereInput! = {}, orderBy: [TransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionWhereUniqueInput): [Transmission!]
  transmissionsCount(where: TransmissionWhereInput! = {}): Int
  transmissionBase(where: TransmissionBaseWhereUniqueInput!): TransmissionBase
  transmissionBases(where: TransmissionBaseWhereInput! = {}, orderBy: [TransmissionBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionBaseWhereUniqueInput): [TransmissionBase!]
  transmissionBasesCount(where: TransmissionBaseWhereInput! = {}): Int
  transmissionControlType(where: TransmissionControlTypeWhereUniqueInput!): TransmissionControlType
  transmissionControlTypes(where: TransmissionControlTypeWhereInput! = {}, orderBy: [TransmissionControlTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionControlTypeWhereUniqueInput): [TransmissionControlType!]
  transmissionControlTypesCount(where: TransmissionControlTypeWhereInput! = {}): Int
  transmissionMfrCode(where: TransmissionMfrCodeWhereUniqueInput!): TransmissionMfrCode
  transmissionMfrCodes(where: TransmissionMfrCodeWhereInput! = {}, orderBy: [TransmissionMfrCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionMfrCodeWhereUniqueInput): [TransmissionMfrCode!]
  transmissionMfrCodesCount(where: TransmissionMfrCodeWhereInput! = {}): Int
  transmissionNumSpeed(where: TransmissionNumSpeedWhereUniqueInput!): TransmissionNumSpeed
  transmissionNumSpeeds(where: TransmissionNumSpeedWhereInput! = {}, orderBy: [TransmissionNumSpeedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionNumSpeedWhereUniqueInput): [TransmissionNumSpeed!]
  transmissionNumSpeedsCount(where: TransmissionNumSpeedWhereInput! = {}): Int
  transmissionType(where: TransmissionTypeWhereUniqueInput!): TransmissionType
  transmissionTypes(where: TransmissionTypeWhereInput! = {}, orderBy: [TransmissionTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransmissionTypeWhereUniqueInput): [TransmissionType!]
  transmissionTypesCount(where: TransmissionTypeWhereInput! = {}): Int
  valve(where: ValveWhereUniqueInput!): Valve
  valves(where: ValveWhereInput! = {}, orderBy: [ValveOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ValveWhereUniqueInput): [Valve!]
  valvesCount(where: ValveWhereInput! = {}): Int
  vCdbChange(where: VCdbChangeWhereUniqueInput!): VCdbChange
  vCdbChanges(where: VCdbChangeWhereInput! = {}, orderBy: [VCdbChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VCdbChangeWhereUniqueInput): [VCdbChange!]
  vCdbChangesCount(where: VCdbChangeWhereInput! = {}): Int
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehicles(where: VehicleWhereInput! = {}, orderBy: [VehicleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleWhereUniqueInput): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  vehicleToBedConfig(where: VehicleToBedConfigWhereUniqueInput!): VehicleToBedConfig
  vehicleToBedConfigs(where: VehicleToBedConfigWhereInput! = {}, orderBy: [VehicleToBedConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToBedConfigWhereUniqueInput): [VehicleToBedConfig!]
  vehicleToBedConfigsCount(where: VehicleToBedConfigWhereInput! = {}): Int
  vehicleToBodyConfig(where: VehicleToBodyConfigWhereUniqueInput!): VehicleToBodyConfig
  vehicleToBodyConfigs(where: VehicleToBodyConfigWhereInput! = {}, orderBy: [VehicleToBodyConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToBodyConfigWhereUniqueInput): [VehicleToBodyConfig!]
  vehicleToBodyConfigsCount(where: VehicleToBodyConfigWhereInput! = {}): Int
  vehicleToBodyStyleConfig(where: VehicleToBodyStyleConfigWhereUniqueInput!): VehicleToBodyStyleConfig
  vehicleToBodyStyleConfigs(where: VehicleToBodyStyleConfigWhereInput! = {}, orderBy: [VehicleToBodyStyleConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToBodyStyleConfigWhereUniqueInput): [VehicleToBodyStyleConfig!]
  vehicleToBodyStyleConfigsCount(where: VehicleToBodyStyleConfigWhereInput! = {}): Int
  vehicleToBrakeConfig(where: VehicleToBrakeConfigWhereUniqueInput!): VehicleToBrakeConfig
  vehicleToBrakeConfigs(where: VehicleToBrakeConfigWhereInput! = {}, orderBy: [VehicleToBrakeConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToBrakeConfigWhereUniqueInput): [VehicleToBrakeConfig!]
  vehicleToBrakeConfigsCount(where: VehicleToBrakeConfigWhereInput! = {}): Int
  vehicleToClass(where: VehicleToClassWhereUniqueInput!): VehicleToClass
  vehicleToClasses(where: VehicleToClassWhereInput! = {}, orderBy: [VehicleToClassOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToClassWhereUniqueInput): [VehicleToClass!]
  vehicleToClassesCount(where: VehicleToClassWhereInput! = {}): Int
  vehicleToDriveType(where: VehicleToDriveTypeWhereUniqueInput!): VehicleToDriveType
  vehicleToDriveTypes(where: VehicleToDriveTypeWhereInput! = {}, orderBy: [VehicleToDriveTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToDriveTypeWhereUniqueInput): [VehicleToDriveType!]
  vehicleToDriveTypesCount(where: VehicleToDriveTypeWhereInput! = {}): Int
  vehicleToEngineConfig(where: VehicleToEngineConfigWhereUniqueInput!): VehicleToEngineConfig
  vehicleToEngineConfigs(where: VehicleToEngineConfigWhereInput! = {}, orderBy: [VehicleToEngineConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToEngineConfigWhereUniqueInput): [VehicleToEngineConfig!]
  vehicleToEngineConfigsCount(where: VehicleToEngineConfigWhereInput! = {}): Int
  vehicleToMfrBodyCode(where: VehicleToMfrBodyCodeWhereUniqueInput!): VehicleToMfrBodyCode
  vehicleToMfrBodyCodes(where: VehicleToMfrBodyCodeWhereInput! = {}, orderBy: [VehicleToMfrBodyCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToMfrBodyCodeWhereUniqueInput): [VehicleToMfrBodyCode!]
  vehicleToMfrBodyCodesCount(where: VehicleToMfrBodyCodeWhereInput! = {}): Int
  vehicleToSpringTypeConfig(where: VehicleToSpringTypeConfigWhereUniqueInput!): VehicleToSpringTypeConfig
  vehicleToSpringTypeConfigs(where: VehicleToSpringTypeConfigWhereInput! = {}, orderBy: [VehicleToSpringTypeConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToSpringTypeConfigWhereUniqueInput): [VehicleToSpringTypeConfig!]
  vehicleToSpringTypeConfigsCount(where: VehicleToSpringTypeConfigWhereInput! = {}): Int
  vehicleToSteeringConfig(where: VehicleToSteeringConfigWhereUniqueInput!): VehicleToSteeringConfig
  vehicleToSteeringConfigs(where: VehicleToSteeringConfigWhereInput! = {}, orderBy: [VehicleToSteeringConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToSteeringConfigWhereUniqueInput): [VehicleToSteeringConfig!]
  vehicleToSteeringConfigsCount(where: VehicleToSteeringConfigWhereInput! = {}): Int
  vehicleToTransmission(where: VehicleToTransmissionWhereUniqueInput!): VehicleToTransmission
  vehicleToTransmissions(where: VehicleToTransmissionWhereInput! = {}, orderBy: [VehicleToTransmissionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToTransmissionWhereUniqueInput): [VehicleToTransmission!]
  vehicleToTransmissionsCount(where: VehicleToTransmissionWhereInput! = {}): Int
  vehicleToWheelbase(where: VehicleToWheelbaseWhereUniqueInput!): VehicleToWheelbase
  vehicleToWheelbases(where: VehicleToWheelbaseWhereInput! = {}, orderBy: [VehicleToWheelbaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleToWheelbaseWhereUniqueInput): [VehicleToWheelbase!]
  vehicleToWheelbasesCount(where: VehicleToWheelbaseWhereInput! = {}): Int
  vehicleType(where: VehicleTypeWhereUniqueInput!): VehicleType
  vehicleTypes(where: VehicleTypeWhereInput! = {}, orderBy: [VehicleTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleTypeWhereUniqueInput): [VehicleType!]
  vehicleTypesCount(where: VehicleTypeWhereInput! = {}): Int
  vehicleTypeGroup(where: VehicleTypeGroupWhereUniqueInput!): VehicleTypeGroup
  vehicleTypeGroups(where: VehicleTypeGroupWhereInput! = {}, orderBy: [VehicleTypeGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VehicleTypeGroupWhereUniqueInput): [VehicleTypeGroup!]
  vehicleTypeGroupsCount(where: VehicleTypeGroupWhereInput! = {}): Int
  version(where: VersionWhereUniqueInput!): Version
  versions(where: VersionWhereInput! = {}, orderBy: [VersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VersionWhereUniqueInput): [Version!]
  versionsCount(where: VersionWhereInput! = {}): Int
  wheelBase(where: WheelBaseWhereUniqueInput!): WheelBase
  wheelBases(where: WheelBaseWhereInput! = {}, orderBy: [WheelBaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WheelBaseWhereUniqueInput): [WheelBase!]
  wheelBasesCount(where: WheelBaseWhereInput! = {}): Int
  year(where: YearWhereUniqueInput!): Year
  years(where: YearWhereInput! = {}, orderBy: [YearOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: YearWhereUniqueInput): [Year!]
  yearsCount(where: YearWhereInput! = {}): Int
  bedLength(where: BedLengthWhereUniqueInput!): BedLength
  bedLengths(where: BedLengthWhereInput! = {}, orderBy: [BedLengthOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BedLengthWhereUniqueInput): [BedLength!]
  bedLengthsCount(where: BedLengthWhereInput! = {}): Int
  bedType(where: BedTypeWhereUniqueInput!): BedType
  bedTypes(where: BedTypeWhereInput! = {}, orderBy: [BedTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BedTypeWhereUniqueInput): [BedType!]
  bedTypesCount(where: BedTypeWhereInput! = {}): Int
  pCdbPartTerminology(where: PCdbPartTerminologyWhereUniqueInput!): PCdbPartTerminology
  pCdbPartTerminologies(where: PCdbPartTerminologyWhereInput! = {}, orderBy: [PCdbPartTerminologyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PCdbPartTerminologyWhereUniqueInput): [PCdbPartTerminology!]
  pCdbPartTerminologiesCount(where: PCdbPartTerminologyWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
